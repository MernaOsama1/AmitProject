
509_GROUP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000237c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000237c  00002410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800178  00800178  00002528  2**0
                  ALLOC
  3 .stab         00003c48  00000000  00000000  00002528  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c0d  00000000  00000000  00006170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00007d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d8  00000000  00000000  00007efd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002114  00000000  00000000  000080d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000121a  00000000  00000000  0000a1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001165  00000000  00000000  0000b403  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000c568  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f7  00000000  00000000  0000c708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009a2  00000000  00000000  0000c9ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d3a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__vector_1>
       8:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_2>
       c:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0f 11 	call	0x221e	; 0x221e <main>
      8a:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 85 11 	jmp	0x230a	; 0x230a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 85 11 	jmp	0x230a	; 0x230a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__+0x18>

000007ea <__floatsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__+0x12>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	da 01       	movw	r26, r20
     800:	c9 01       	movw	r24, r18
     802:	88 27       	eor	r24, r24
     804:	b7 fd       	sbrc	r27, 7
     806:	83 95       	inc	r24
     808:	99 27       	eor	r25, r25
     80a:	aa 27       	eor	r26, r26
     80c:	bb 27       	eor	r27, r27
     80e:	b8 2e       	mov	r11, r24
     810:	21 15       	cp	r18, r1
     812:	31 05       	cpc	r19, r1
     814:	41 05       	cpc	r20, r1
     816:	51 05       	cpc	r21, r1
     818:	19 f4       	brne	.+6      	; 0x820 <__floatsisf+0x36>
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	3a c0       	rjmp	.+116    	; 0x894 <__stack+0x35>
     820:	88 23       	and	r24, r24
     822:	a9 f0       	breq	.+42     	; 0x84e <__floatsisf+0x64>
     824:	20 30       	cpi	r18, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	38 07       	cpc	r19, r24
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	48 07       	cpc	r20, r24
     82e:	80 e8       	ldi	r24, 0x80	; 128
     830:	58 07       	cpc	r21, r24
     832:	29 f4       	brne	.+10     	; 0x83e <__floatsisf+0x54>
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	9f ec       	ldi	r25, 0xCF	; 207
     83c:	30 c0       	rjmp	.+96     	; 0x89e <__stack+0x3f>
     83e:	ee 24       	eor	r14, r14
     840:	ff 24       	eor	r15, r15
     842:	87 01       	movw	r16, r14
     844:	e2 1a       	sub	r14, r18
     846:	f3 0a       	sbc	r15, r19
     848:	04 0b       	sbc	r16, r20
     84a:	15 0b       	sbc	r17, r21
     84c:	02 c0       	rjmp	.+4      	; 0x852 <__floatsisf+0x68>
     84e:	79 01       	movw	r14, r18
     850:	8a 01       	movw	r16, r20
     852:	8e e1       	ldi	r24, 0x1E	; 30
     854:	c8 2e       	mov	r12, r24
     856:	d1 2c       	mov	r13, r1
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ed 82       	std	Y+5, r14	; 0x05
     85e:	fe 82       	std	Y+6, r15	; 0x06
     860:	0f 83       	std	Y+7, r16	; 0x07
     862:	18 87       	std	Y+8, r17	; 0x08
     864:	c8 01       	movw	r24, r16
     866:	b7 01       	movw	r22, r14
     868:	0e 94 20 05 	call	0xa40	; 0xa40 <__clzsi2>
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	18 16       	cp	r1, r24
     870:	19 06       	cpc	r1, r25
     872:	84 f4       	brge	.+32     	; 0x894 <__stack+0x35>
     874:	08 2e       	mov	r0, r24
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	ee 0c       	add	r14, r14
     87a:	ff 1c       	adc	r15, r15
     87c:	00 1f       	adc	r16, r16
     87e:	11 1f       	adc	r17, r17
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	ed 82       	std	Y+5, r14	; 0x05
     886:	fe 82       	std	Y+6, r15	; 0x06
     888:	0f 83       	std	Y+7, r16	; 0x07
     88a:	18 87       	std	Y+8, r17	; 0x08
     88c:	c8 1a       	sub	r12, r24
     88e:	d9 0a       	sbc	r13, r25
     890:	dc 82       	std	Y+4, r13	; 0x04
     892:	cb 82       	std	Y+3, r12	; 0x03
     894:	ba 82       	std	Y+2, r11	; 0x02
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	e9 e0       	ldi	r30, 0x09	; 9
     8a2:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__epilogue_restores__+0x12>

000008a6 <__fixsfsi>:
     8a6:	ac e0       	ldi	r26, 0x0C	; 12
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e9 e5       	ldi	r30, 0x59	; 89
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	0c 94 95 11 	jmp	0x232a	; 0x232a <__prologue_saves__+0x20>
     8b2:	69 83       	std	Y+1, r22	; 0x01
     8b4:	7a 83       	std	Y+2, r23	; 0x02
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	9c 83       	std	Y+4, r25	; 0x04
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	be 01       	movw	r22, r28
     8c0:	6b 5f       	subi	r22, 0xFB	; 251
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     8c8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	61 f1       	breq	.+88     	; 0x926 <__fixsfsi+0x80>
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	50 f1       	brcs	.+84     	; 0x926 <__fixsfsi+0x80>
     8d2:	84 30       	cpi	r24, 0x04	; 4
     8d4:	21 f4       	brne	.+8      	; 0x8de <__fixsfsi+0x38>
     8d6:	8e 81       	ldd	r24, Y+6	; 0x06
     8d8:	88 23       	and	r24, r24
     8da:	51 f1       	breq	.+84     	; 0x930 <__fixsfsi+0x8a>
     8dc:	2e c0       	rjmp	.+92     	; 0x93a <__fixsfsi+0x94>
     8de:	2f 81       	ldd	r18, Y+7	; 0x07
     8e0:	38 85       	ldd	r19, Y+8	; 0x08
     8e2:	37 fd       	sbrc	r19, 7
     8e4:	20 c0       	rjmp	.+64     	; 0x926 <__fixsfsi+0x80>
     8e6:	6e 81       	ldd	r22, Y+6	; 0x06
     8e8:	2f 31       	cpi	r18, 0x1F	; 31
     8ea:	31 05       	cpc	r19, r1
     8ec:	1c f0       	brlt	.+6      	; 0x8f4 <__fixsfsi+0x4e>
     8ee:	66 23       	and	r22, r22
     8f0:	f9 f0       	breq	.+62     	; 0x930 <__fixsfsi+0x8a>
     8f2:	23 c0       	rjmp	.+70     	; 0x93a <__fixsfsi+0x94>
     8f4:	8e e1       	ldi	r24, 0x1E	; 30
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	82 1b       	sub	r24, r18
     8fa:	93 0b       	sbc	r25, r19
     8fc:	29 85       	ldd	r18, Y+9	; 0x09
     8fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     900:	4b 85       	ldd	r20, Y+11	; 0x0b
     902:	5c 85       	ldd	r21, Y+12	; 0x0c
     904:	04 c0       	rjmp	.+8      	; 0x90e <__fixsfsi+0x68>
     906:	56 95       	lsr	r21
     908:	47 95       	ror	r20
     90a:	37 95       	ror	r19
     90c:	27 95       	ror	r18
     90e:	8a 95       	dec	r24
     910:	d2 f7       	brpl	.-12     	; 0x906 <__fixsfsi+0x60>
     912:	66 23       	and	r22, r22
     914:	b1 f0       	breq	.+44     	; 0x942 <__fixsfsi+0x9c>
     916:	50 95       	com	r21
     918:	40 95       	com	r20
     91a:	30 95       	com	r19
     91c:	21 95       	neg	r18
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	0e c0       	rjmp	.+28     	; 0x942 <__fixsfsi+0x9c>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	09 c0       	rjmp	.+18     	; 0x942 <__fixsfsi+0x9c>
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	3f ef       	ldi	r19, 0xFF	; 255
     934:	4f ef       	ldi	r20, 0xFF	; 255
     936:	5f e7       	ldi	r21, 0x7F	; 127
     938:	04 c0       	rjmp	.+8      	; 0x942 <__fixsfsi+0x9c>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e8       	ldi	r21, 0x80	; 128
     942:	b9 01       	movw	r22, r18
     944:	ca 01       	movw	r24, r20
     946:	2c 96       	adiw	r28, 0x0c	; 12
     948:	e2 e0       	ldi	r30, 0x02	; 2
     94a:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__epilogue_restores__+0x20>

0000094e <__floatunsisf>:
     94e:	a8 e0       	ldi	r26, 0x08	; 8
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	ed ea       	ldi	r30, 0xAD	; 173
     954:	f4 e0       	ldi	r31, 0x04	; 4
     956:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x10>
     95a:	7b 01       	movw	r14, r22
     95c:	8c 01       	movw	r16, r24
     95e:	61 15       	cp	r22, r1
     960:	71 05       	cpc	r23, r1
     962:	81 05       	cpc	r24, r1
     964:	91 05       	cpc	r25, r1
     966:	19 f4       	brne	.+6      	; 0x96e <__floatunsisf+0x20>
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	89 83       	std	Y+1, r24	; 0x01
     96c:	60 c0       	rjmp	.+192    	; 0xa2e <__floatunsisf+0xe0>
     96e:	83 e0       	ldi	r24, 0x03	; 3
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 20 05 	call	0xa40	; 0xa40 <__clzsi2>
     98c:	fc 01       	movw	r30, r24
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	f7 ff       	sbrs	r31, 7
     992:	3b c0       	rjmp	.+118    	; 0xa0a <__floatunsisf+0xbc>
     994:	22 27       	eor	r18, r18
     996:	33 27       	eor	r19, r19
     998:	2e 1b       	sub	r18, r30
     99a:	3f 0b       	sbc	r19, r31
     99c:	57 01       	movw	r10, r14
     99e:	68 01       	movw	r12, r16
     9a0:	02 2e       	mov	r0, r18
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__floatunsisf+0x5e>
     9a4:	d6 94       	lsr	r13
     9a6:	c7 94       	ror	r12
     9a8:	b7 94       	ror	r11
     9aa:	a7 94       	ror	r10
     9ac:	0a 94       	dec	r0
     9ae:	d2 f7       	brpl	.-12     	; 0x9a4 <__floatunsisf+0x56>
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__floatunsisf+0x7c>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	aa 1f       	adc	r26, r26
     9c8:	bb 1f       	adc	r27, r27
     9ca:	2a 95       	dec	r18
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__floatunsisf+0x74>
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	a1 09       	sbc	r26, r1
     9d2:	b1 09       	sbc	r27, r1
     9d4:	8e 21       	and	r24, r14
     9d6:	9f 21       	and	r25, r15
     9d8:	a0 23       	and	r26, r16
     9da:	b1 23       	and	r27, r17
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	a1 05       	cpc	r26, r1
     9e0:	b1 05       	cpc	r27, r1
     9e2:	21 f0       	breq	.+8      	; 0x9ec <__floatunsisf+0x9e>
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	4a 29       	or	r20, r10
     9ee:	5b 29       	or	r21, r11
     9f0:	6c 29       	or	r22, r12
     9f2:	7d 29       	or	r23, r13
     9f4:	4d 83       	std	Y+5, r20	; 0x05
     9f6:	5e 83       	std	Y+6, r21	; 0x06
     9f8:	6f 83       	std	Y+7, r22	; 0x07
     9fa:	78 87       	std	Y+8, r23	; 0x08
     9fc:	8e e1       	ldi	r24, 0x1E	; 30
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	8e 1b       	sub	r24, r30
     a02:	9f 0b       	sbc	r25, r31
     a04:	9c 83       	std	Y+4, r25	; 0x04
     a06:	8b 83       	std	Y+3, r24	; 0x03
     a08:	12 c0       	rjmp	.+36     	; 0xa2e <__floatunsisf+0xe0>
     a0a:	30 97       	sbiw	r30, 0x00	; 0
     a0c:	81 f0       	breq	.+32     	; 0xa2e <__floatunsisf+0xe0>
     a0e:	0e 2e       	mov	r0, r30
     a10:	04 c0       	rjmp	.+8      	; 0xa1a <__floatunsisf+0xcc>
     a12:	ee 0c       	add	r14, r14
     a14:	ff 1c       	adc	r15, r15
     a16:	00 1f       	adc	r16, r16
     a18:	11 1f       	adc	r17, r17
     a1a:	0a 94       	dec	r0
     a1c:	d2 f7       	brpl	.-12     	; 0xa12 <__floatunsisf+0xc4>
     a1e:	ed 82       	std	Y+5, r14	; 0x05
     a20:	fe 82       	std	Y+6, r15	; 0x06
     a22:	0f 83       	std	Y+7, r16	; 0x07
     a24:	18 87       	std	Y+8, r17	; 0x08
     a26:	ce 1a       	sub	r12, r30
     a28:	df 0a       	sbc	r13, r31
     a2a:	dc 82       	std	Y+4, r13	; 0x04
     a2c:	cb 82       	std	Y+3, r12	; 0x03
     a2e:	1a 82       	std	Y+2, r1	; 0x02
     a30:	ce 01       	movw	r24, r28
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     a38:	28 96       	adiw	r28, 0x08	; 8
     a3a:	ea e0       	ldi	r30, 0x0A	; 10
     a3c:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x10>

00000a40 <__clzsi2>:
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	7b 01       	movw	r14, r22
     a4a:	8c 01       	movw	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	e8 16       	cp	r14, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	f8 06       	cpc	r15, r24
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	08 07       	cpc	r16, r24
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	18 07       	cpc	r17, r24
     a5c:	88 f4       	brcc	.+34     	; 0xa80 <__clzsi2+0x40>
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	e8 16       	cp	r14, r24
     a62:	f1 04       	cpc	r15, r1
     a64:	01 05       	cpc	r16, r1
     a66:	11 05       	cpc	r17, r1
     a68:	31 f0       	breq	.+12     	; 0xa76 <__clzsi2+0x36>
     a6a:	28 f0       	brcs	.+10     	; 0xa76 <__clzsi2+0x36>
     a6c:	88 e0       	ldi	r24, 0x08	; 8
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	17 c0       	rjmp	.+46     	; 0xaa4 <__clzsi2+0x64>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	12 c0       	rjmp	.+36     	; 0xaa4 <__clzsi2+0x64>
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	e8 16       	cp	r14, r24
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	f8 06       	cpc	r15, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	08 07       	cpc	r16, r24
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	18 07       	cpc	r17, r24
     a90:	28 f0       	brcs	.+10     	; 0xa9c <__clzsi2+0x5c>
     a92:	88 e1       	ldi	r24, 0x18	; 24
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__clzsi2+0x64>
     a9c:	80 e1       	ldi	r24, 0x10	; 16
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	20 e2       	ldi	r18, 0x20	; 32
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	28 1b       	sub	r18, r24
     aae:	39 0b       	sbc	r19, r25
     ab0:	4a 0b       	sbc	r20, r26
     ab2:	5b 0b       	sbc	r21, r27
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__clzsi2+0x7e>
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__clzsi2+0x76>
     ac2:	f7 01       	movw	r30, r14
     ac4:	e8 59       	subi	r30, 0x98	; 152
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	80 81       	ld	r24, Z
     aca:	28 1b       	sub	r18, r24
     acc:	31 09       	sbc	r19, r1
     ace:	41 09       	sbc	r20, r1
     ad0:	51 09       	sbc	r21, r1
     ad2:	c9 01       	movw	r24, r18
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	08 95       	ret

00000ade <__pack_f>:
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	fc 01       	movw	r30, r24
     aea:	e4 80       	ldd	r14, Z+4	; 0x04
     aec:	f5 80       	ldd	r15, Z+5	; 0x05
     aee:	06 81       	ldd	r16, Z+6	; 0x06
     af0:	17 81       	ldd	r17, Z+7	; 0x07
     af2:	d1 80       	ldd	r13, Z+1	; 0x01
     af4:	80 81       	ld	r24, Z
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	48 f4       	brcc	.+18     	; 0xb0c <__pack_f+0x2e>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	a0 e1       	ldi	r26, 0x10	; 16
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	e8 2a       	or	r14, r24
     b04:	f9 2a       	or	r15, r25
     b06:	0a 2b       	or	r16, r26
     b08:	1b 2b       	or	r17, r27
     b0a:	a5 c0       	rjmp	.+330    	; 0xc56 <__pack_f+0x178>
     b0c:	84 30       	cpi	r24, 0x04	; 4
     b0e:	09 f4       	brne	.+2      	; 0xb12 <__pack_f+0x34>
     b10:	9f c0       	rjmp	.+318    	; 0xc50 <__pack_f+0x172>
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	21 f4       	brne	.+8      	; 0xb1e <__pack_f+0x40>
     b16:	ee 24       	eor	r14, r14
     b18:	ff 24       	eor	r15, r15
     b1a:	87 01       	movw	r16, r14
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <__pack_f+0x4a>
     b1e:	e1 14       	cp	r14, r1
     b20:	f1 04       	cpc	r15, r1
     b22:	01 05       	cpc	r16, r1
     b24:	11 05       	cpc	r17, r1
     b26:	19 f4       	brne	.+6      	; 0xb2e <__pack_f+0x50>
     b28:	e0 e0       	ldi	r30, 0x00	; 0
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	96 c0       	rjmp	.+300    	; 0xc5a <__pack_f+0x17c>
     b2e:	62 81       	ldd	r22, Z+2	; 0x02
     b30:	73 81       	ldd	r23, Z+3	; 0x03
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	62 38       	cpi	r22, 0x82	; 130
     b36:	79 07       	cpc	r23, r25
     b38:	0c f0       	brlt	.+2      	; 0xb3c <__pack_f+0x5e>
     b3a:	5b c0       	rjmp	.+182    	; 0xbf2 <__pack_f+0x114>
     b3c:	22 e8       	ldi	r18, 0x82	; 130
     b3e:	3f ef       	ldi	r19, 0xFF	; 255
     b40:	26 1b       	sub	r18, r22
     b42:	37 0b       	sbc	r19, r23
     b44:	2a 31       	cpi	r18, 0x1A	; 26
     b46:	31 05       	cpc	r19, r1
     b48:	2c f0       	brlt	.+10     	; 0xb54 <__pack_f+0x76>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	2a c0       	rjmp	.+84     	; 0xba8 <__pack_f+0xca>
     b54:	b8 01       	movw	r22, r16
     b56:	a7 01       	movw	r20, r14
     b58:	02 2e       	mov	r0, r18
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__pack_f+0x86>
     b5c:	76 95       	lsr	r23
     b5e:	67 95       	ror	r22
     b60:	57 95       	ror	r21
     b62:	47 95       	ror	r20
     b64:	0a 94       	dec	r0
     b66:	d2 f7       	brpl	.-12     	; 0xb5c <__pack_f+0x7e>
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	a0 e0       	ldi	r26, 0x00	; 0
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <__pack_f+0x9c>
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	aa 1f       	adc	r26, r26
     b78:	bb 1f       	adc	r27, r27
     b7a:	2a 95       	dec	r18
     b7c:	d2 f7       	brpl	.-12     	; 0xb72 <__pack_f+0x94>
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	a1 09       	sbc	r26, r1
     b82:	b1 09       	sbc	r27, r1
     b84:	8e 21       	and	r24, r14
     b86:	9f 21       	and	r25, r15
     b88:	a0 23       	and	r26, r16
     b8a:	b1 23       	and	r27, r17
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	a1 05       	cpc	r26, r1
     b90:	b1 05       	cpc	r27, r1
     b92:	21 f0       	breq	.+8      	; 0xb9c <__pack_f+0xbe>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	9a 01       	movw	r18, r20
     b9e:	ab 01       	movw	r20, r22
     ba0:	28 2b       	or	r18, r24
     ba2:	39 2b       	or	r19, r25
     ba4:	4a 2b       	or	r20, r26
     ba6:	5b 2b       	or	r21, r27
     ba8:	da 01       	movw	r26, r20
     baa:	c9 01       	movw	r24, r18
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	90 70       	andi	r25, 0x00	; 0
     bb0:	a0 70       	andi	r26, 0x00	; 0
     bb2:	b0 70       	andi	r27, 0x00	; 0
     bb4:	80 34       	cpi	r24, 0x40	; 64
     bb6:	91 05       	cpc	r25, r1
     bb8:	a1 05       	cpc	r26, r1
     bba:	b1 05       	cpc	r27, r1
     bbc:	39 f4       	brne	.+14     	; 0xbcc <__pack_f+0xee>
     bbe:	27 ff       	sbrs	r18, 7
     bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <__pack_f+0xf6>
     bc2:	20 5c       	subi	r18, 0xC0	; 192
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
     bc6:	4f 4f       	sbci	r20, 0xFF	; 255
     bc8:	5f 4f       	sbci	r21, 0xFF	; 255
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__pack_f+0xf6>
     bcc:	21 5c       	subi	r18, 0xC1	; 193
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	4f 4f       	sbci	r20, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	e0 e0       	ldi	r30, 0x00	; 0
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	20 30       	cpi	r18, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	3a 07       	cpc	r19, r26
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	4a 07       	cpc	r20, r26
     be2:	a0 e4       	ldi	r26, 0x40	; 64
     be4:	5a 07       	cpc	r21, r26
     be6:	10 f0       	brcs	.+4      	; 0xbec <__pack_f+0x10e>
     be8:	e1 e0       	ldi	r30, 0x01	; 1
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	79 01       	movw	r14, r18
     bee:	8a 01       	movw	r16, r20
     bf0:	27 c0       	rjmp	.+78     	; 0xc40 <__pack_f+0x162>
     bf2:	60 38       	cpi	r22, 0x80	; 128
     bf4:	71 05       	cpc	r23, r1
     bf6:	64 f5       	brge	.+88     	; 0xc50 <__pack_f+0x172>
     bf8:	fb 01       	movw	r30, r22
     bfa:	e1 58       	subi	r30, 0x81	; 129
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	d8 01       	movw	r26, r16
     c00:	c7 01       	movw	r24, r14
     c02:	8f 77       	andi	r24, 0x7F	; 127
     c04:	90 70       	andi	r25, 0x00	; 0
     c06:	a0 70       	andi	r26, 0x00	; 0
     c08:	b0 70       	andi	r27, 0x00	; 0
     c0a:	80 34       	cpi	r24, 0x40	; 64
     c0c:	91 05       	cpc	r25, r1
     c0e:	a1 05       	cpc	r26, r1
     c10:	b1 05       	cpc	r27, r1
     c12:	39 f4       	brne	.+14     	; 0xc22 <__pack_f+0x144>
     c14:	e7 fe       	sbrs	r14, 7
     c16:	0d c0       	rjmp	.+26     	; 0xc32 <__pack_f+0x154>
     c18:	80 e4       	ldi	r24, 0x40	; 64
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x14c>
     c22:	8f e3       	ldi	r24, 0x3F	; 63
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e0       	ldi	r26, 0x00	; 0
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e8 0e       	add	r14, r24
     c2c:	f9 1e       	adc	r15, r25
     c2e:	0a 1f       	adc	r16, r26
     c30:	1b 1f       	adc	r17, r27
     c32:	17 ff       	sbrs	r17, 7
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <__pack_f+0x162>
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	31 96       	adiw	r30, 0x01	; 1
     c40:	87 e0       	ldi	r24, 0x07	; 7
     c42:	16 95       	lsr	r17
     c44:	07 95       	ror	r16
     c46:	f7 94       	ror	r15
     c48:	e7 94       	ror	r14
     c4a:	8a 95       	dec	r24
     c4c:	d1 f7       	brne	.-12     	; 0xc42 <__pack_f+0x164>
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <__pack_f+0x17c>
     c50:	ee 24       	eor	r14, r14
     c52:	ff 24       	eor	r15, r15
     c54:	87 01       	movw	r16, r14
     c56:	ef ef       	ldi	r30, 0xFF	; 255
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	6e 2f       	mov	r22, r30
     c5c:	67 95       	ror	r22
     c5e:	66 27       	eor	r22, r22
     c60:	67 95       	ror	r22
     c62:	90 2f       	mov	r25, r16
     c64:	9f 77       	andi	r25, 0x7F	; 127
     c66:	d7 94       	ror	r13
     c68:	dd 24       	eor	r13, r13
     c6a:	d7 94       	ror	r13
     c6c:	8e 2f       	mov	r24, r30
     c6e:	86 95       	lsr	r24
     c70:	49 2f       	mov	r20, r25
     c72:	46 2b       	or	r20, r22
     c74:	58 2f       	mov	r21, r24
     c76:	5d 29       	or	r21, r13
     c78:	b7 01       	movw	r22, r14
     c7a:	ca 01       	movw	r24, r20
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	08 95       	ret

00000c88 <__unpack_f>:
     c88:	fc 01       	movw	r30, r24
     c8a:	db 01       	movw	r26, r22
     c8c:	40 81       	ld	r20, Z
     c8e:	51 81       	ldd	r21, Z+1	; 0x01
     c90:	22 81       	ldd	r18, Z+2	; 0x02
     c92:	62 2f       	mov	r22, r18
     c94:	6f 77       	andi	r22, 0x7F	; 127
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	22 1f       	adc	r18, r18
     c9a:	22 27       	eor	r18, r18
     c9c:	22 1f       	adc	r18, r18
     c9e:	93 81       	ldd	r25, Z+3	; 0x03
     ca0:	89 2f       	mov	r24, r25
     ca2:	88 0f       	add	r24, r24
     ca4:	82 2b       	or	r24, r18
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	99 1f       	adc	r25, r25
     cac:	99 27       	eor	r25, r25
     cae:	99 1f       	adc	r25, r25
     cb0:	11 96       	adiw	r26, 0x01	; 1
     cb2:	9c 93       	st	X, r25
     cb4:	11 97       	sbiw	r26, 0x01	; 1
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	a9 f5       	brne	.+106    	; 0xd26 <__unpack_f+0x9e>
     cbc:	41 15       	cp	r20, r1
     cbe:	51 05       	cpc	r21, r1
     cc0:	61 05       	cpc	r22, r1
     cc2:	71 05       	cpc	r23, r1
     cc4:	11 f4       	brne	.+4      	; 0xcca <__unpack_f+0x42>
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	37 c0       	rjmp	.+110    	; 0xd38 <__unpack_f+0xb0>
     cca:	82 e8       	ldi	r24, 0x82	; 130
     ccc:	9f ef       	ldi	r25, 0xFF	; 255
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	9a 01       	movw	r18, r20
     cd8:	ab 01       	movw	r20, r22
     cda:	67 e0       	ldi	r22, 0x07	; 7
     cdc:	22 0f       	add	r18, r18
     cde:	33 1f       	adc	r19, r19
     ce0:	44 1f       	adc	r20, r20
     ce2:	55 1f       	adc	r21, r21
     ce4:	6a 95       	dec	r22
     ce6:	d1 f7       	brne	.-12     	; 0xcdc <__unpack_f+0x54>
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	8c 93       	st	X, r24
     cec:	0d c0       	rjmp	.+26     	; 0xd08 <__unpack_f+0x80>
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	44 1f       	adc	r20, r20
     cf4:	55 1f       	adc	r21, r21
     cf6:	12 96       	adiw	r26, 0x02	; 2
     cf8:	8d 91       	ld	r24, X+
     cfa:	9c 91       	ld	r25, X
     cfc:	13 97       	sbiw	r26, 0x03	; 3
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	13 96       	adiw	r26, 0x03	; 3
     d02:	9c 93       	st	X, r25
     d04:	8e 93       	st	-X, r24
     d06:	12 97       	sbiw	r26, 0x02	; 2
     d08:	20 30       	cpi	r18, 0x00	; 0
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	38 07       	cpc	r19, r24
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	48 07       	cpc	r20, r24
     d12:	80 e4       	ldi	r24, 0x40	; 64
     d14:	58 07       	cpc	r21, r24
     d16:	58 f3       	brcs	.-42     	; 0xcee <__unpack_f+0x66>
     d18:	14 96       	adiw	r26, 0x04	; 4
     d1a:	2d 93       	st	X+, r18
     d1c:	3d 93       	st	X+, r19
     d1e:	4d 93       	st	X+, r20
     d20:	5c 93       	st	X, r21
     d22:	17 97       	sbiw	r26, 0x07	; 7
     d24:	08 95       	ret
     d26:	2f 3f       	cpi	r18, 0xFF	; 255
     d28:	31 05       	cpc	r19, r1
     d2a:	79 f4       	brne	.+30     	; 0xd4a <__unpack_f+0xc2>
     d2c:	41 15       	cp	r20, r1
     d2e:	51 05       	cpc	r21, r1
     d30:	61 05       	cpc	r22, r1
     d32:	71 05       	cpc	r23, r1
     d34:	19 f4       	brne	.+6      	; 0xd3c <__unpack_f+0xb4>
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	8c 93       	st	X, r24
     d3a:	08 95       	ret
     d3c:	64 ff       	sbrs	r22, 4
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <__unpack_f+0xbe>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	8c 93       	st	X, r24
     d44:	12 c0       	rjmp	.+36     	; 0xd6a <__unpack_f+0xe2>
     d46:	1c 92       	st	X, r1
     d48:	10 c0       	rjmp	.+32     	; 0xd6a <__unpack_f+0xe2>
     d4a:	2f 57       	subi	r18, 0x7F	; 127
     d4c:	30 40       	sbci	r19, 0x00	; 0
     d4e:	13 96       	adiw	r26, 0x03	; 3
     d50:	3c 93       	st	X, r19
     d52:	2e 93       	st	-X, r18
     d54:	12 97       	sbiw	r26, 0x02	; 2
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	8c 93       	st	X, r24
     d5a:	87 e0       	ldi	r24, 0x07	; 7
     d5c:	44 0f       	add	r20, r20
     d5e:	55 1f       	adc	r21, r21
     d60:	66 1f       	adc	r22, r22
     d62:	77 1f       	adc	r23, r23
     d64:	8a 95       	dec	r24
     d66:	d1 f7       	brne	.-12     	; 0xd5c <__unpack_f+0xd4>
     d68:	70 64       	ori	r23, 0x40	; 64
     d6a:	14 96       	adiw	r26, 0x04	; 4
     d6c:	4d 93       	st	X+, r20
     d6e:	5d 93       	st	X+, r21
     d70:	6d 93       	st	X+, r22
     d72:	7c 93       	st	X, r23
     d74:	17 97       	sbiw	r26, 0x07	; 7
     d76:	08 95       	ret

00000d78 <__fpcmp_parts_f>:
     d78:	1f 93       	push	r17
     d7a:	dc 01       	movw	r26, r24
     d7c:	fb 01       	movw	r30, r22
     d7e:	9c 91       	ld	r25, X
     d80:	92 30       	cpi	r25, 0x02	; 2
     d82:	08 f4       	brcc	.+2      	; 0xd86 <__fpcmp_parts_f+0xe>
     d84:	47 c0       	rjmp	.+142    	; 0xe14 <__fpcmp_parts_f+0x9c>
     d86:	80 81       	ld	r24, Z
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	08 f4       	brcc	.+2      	; 0xd8e <__fpcmp_parts_f+0x16>
     d8c:	43 c0       	rjmp	.+134    	; 0xe14 <__fpcmp_parts_f+0x9c>
     d8e:	94 30       	cpi	r25, 0x04	; 4
     d90:	51 f4       	brne	.+20     	; 0xda6 <__fpcmp_parts_f+0x2e>
     d92:	11 96       	adiw	r26, 0x01	; 1
     d94:	1c 91       	ld	r17, X
     d96:	84 30       	cpi	r24, 0x04	; 4
     d98:	99 f5       	brne	.+102    	; 0xe00 <__fpcmp_parts_f+0x88>
     d9a:	81 81       	ldd	r24, Z+1	; 0x01
     d9c:	68 2f       	mov	r22, r24
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	61 1b       	sub	r22, r17
     da2:	71 09       	sbc	r23, r1
     da4:	3f c0       	rjmp	.+126    	; 0xe24 <__fpcmp_parts_f+0xac>
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	21 f0       	breq	.+8      	; 0xdb2 <__fpcmp_parts_f+0x3a>
     daa:	92 30       	cpi	r25, 0x02	; 2
     dac:	31 f4       	brne	.+12     	; 0xdba <__fpcmp_parts_f+0x42>
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	b9 f1       	breq	.+110    	; 0xe20 <__fpcmp_parts_f+0xa8>
     db2:	81 81       	ldd	r24, Z+1	; 0x01
     db4:	88 23       	and	r24, r24
     db6:	89 f1       	breq	.+98     	; 0xe1a <__fpcmp_parts_f+0xa2>
     db8:	2d c0       	rjmp	.+90     	; 0xe14 <__fpcmp_parts_f+0x9c>
     dba:	11 96       	adiw	r26, 0x01	; 1
     dbc:	1c 91       	ld	r17, X
     dbe:	11 97       	sbiw	r26, 0x01	; 1
     dc0:	82 30       	cpi	r24, 0x02	; 2
     dc2:	f1 f0       	breq	.+60     	; 0xe00 <__fpcmp_parts_f+0x88>
     dc4:	81 81       	ldd	r24, Z+1	; 0x01
     dc6:	18 17       	cp	r17, r24
     dc8:	d9 f4       	brne	.+54     	; 0xe00 <__fpcmp_parts_f+0x88>
     dca:	12 96       	adiw	r26, 0x02	; 2
     dcc:	2d 91       	ld	r18, X+
     dce:	3c 91       	ld	r19, X
     dd0:	13 97       	sbiw	r26, 0x03	; 3
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	82 17       	cp	r24, r18
     dd8:	93 07       	cpc	r25, r19
     dda:	94 f0       	brlt	.+36     	; 0xe00 <__fpcmp_parts_f+0x88>
     ddc:	28 17       	cp	r18, r24
     dde:	39 07       	cpc	r19, r25
     de0:	bc f0       	brlt	.+46     	; 0xe10 <__fpcmp_parts_f+0x98>
     de2:	14 96       	adiw	r26, 0x04	; 4
     de4:	8d 91       	ld	r24, X+
     de6:	9d 91       	ld	r25, X+
     de8:	0d 90       	ld	r0, X+
     dea:	bc 91       	ld	r27, X
     dec:	a0 2d       	mov	r26, r0
     dee:	24 81       	ldd	r18, Z+4	; 0x04
     df0:	35 81       	ldd	r19, Z+5	; 0x05
     df2:	46 81       	ldd	r20, Z+6	; 0x06
     df4:	57 81       	ldd	r21, Z+7	; 0x07
     df6:	28 17       	cp	r18, r24
     df8:	39 07       	cpc	r19, r25
     dfa:	4a 07       	cpc	r20, r26
     dfc:	5b 07       	cpc	r21, r27
     dfe:	18 f4       	brcc	.+6      	; 0xe06 <__fpcmp_parts_f+0x8e>
     e00:	11 23       	and	r17, r17
     e02:	41 f0       	breq	.+16     	; 0xe14 <__fpcmp_parts_f+0x9c>
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <__fpcmp_parts_f+0xa2>
     e06:	82 17       	cp	r24, r18
     e08:	93 07       	cpc	r25, r19
     e0a:	a4 07       	cpc	r26, r20
     e0c:	b5 07       	cpc	r27, r21
     e0e:	40 f4       	brcc	.+16     	; 0xe20 <__fpcmp_parts_f+0xa8>
     e10:	11 23       	and	r17, r17
     e12:	19 f0       	breq	.+6      	; 0xe1a <__fpcmp_parts_f+0xa2>
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <__fpcmp_parts_f+0xac>
     e1a:	6f ef       	ldi	r22, 0xFF	; 255
     e1c:	7f ef       	ldi	r23, 0xFF	; 255
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <__fpcmp_parts_f+0xac>
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	cb 01       	movw	r24, r22
     e26:	1f 91       	pop	r17
     e28:	08 95       	ret

00000e2a <M_WDT_Void_WDTInit>:


void M_WDT_Void_WDTInit(void)
{
	/* TO ENABLE WDT */
	SET_BIT(WDTCR_REG,WDE_BIT);
     e2a:	e1 e4       	ldi	r30, 0x41	; 65
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	88 60       	ori	r24, 0x08	; 8
     e32:	80 83       	st	Z, r24
	/* TO SELECT 2.1 SECOND AS WINDOW TIME */
	SET_BIT(WDTCR_REG,WDP0_BIT);
     e34:	80 81       	ld	r24, Z
     e36:	81 60       	ori	r24, 0x01	; 1
     e38:	80 83       	st	Z, r24
	SET_BIT(WDTCR_REG,WDP1_BIT);
     e3a:	80 81       	ld	r24, Z
     e3c:	82 60       	ori	r24, 0x02	; 2
     e3e:	80 83       	st	Z, r24
	SET_BIT(WDTCR_REG,WDP2_BIT);
     e40:	80 81       	ld	r24, Z
     e42:	84 60       	ori	r24, 0x04	; 4
     e44:	80 83       	st	Z, r24
}
     e46:	08 95       	ret

00000e48 <M_WDT_Void_WDTRefresh>:
void M_WDT_Void_WDTRefresh(void)
{
	asm("WDR");
     e48:	a8 95       	wdr
}
     e4a:	08 95       	ret

00000e4c <M_UART_Void_UARTSend>:
}

void M_UART_Void_UARTSend(u8 Copy_U8_Data)
{
	u32 Local_U32_Counter = 0;
	UDR_REG = Copy_U8_Data;
     e4c:	8c b9       	out	0x0c, r24	; 12
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
	while(Local_U32_Counter < POLLING_TIME)
	{
		Local_U32_Counter++;
		if(GET_BIT(UCSRA_REG,TXC_BIT) == UART_FINISHED_TRANSMITTING)
     e56:	eb e2       	ldi	r30, 0x2B	; 43
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	86 fd       	sbrc	r24, 6
     e5e:	0c c0       	rjmp	.+24     	; 0xe78 <M_UART_Void_UARTSend+0x2c>
{
	u32 Local_U32_Counter = 0;
	UDR_REG = Copy_U8_Data;
	while(Local_U32_Counter < POLLING_TIME)
	{
		Local_U32_Counter++;
     e60:	2f 5f       	subi	r18, 0xFF	; 255
     e62:	3f 4f       	sbci	r19, 0xFF	; 255
     e64:	4f 4f       	sbci	r20, 0xFF	; 255
     e66:	5f 4f       	sbci	r21, 0xFF	; 255

void M_UART_Void_UARTSend(u8 Copy_U8_Data)
{
	u32 Local_U32_Counter = 0;
	UDR_REG = Copy_U8_Data;
	while(Local_U32_Counter < POLLING_TIME)
     e68:	20 38       	cpi	r18, 0x80	; 128
     e6a:	84 e8       	ldi	r24, 0x84	; 132
     e6c:	38 07       	cpc	r19, r24
     e6e:	8e e1       	ldi	r24, 0x1E	; 30
     e70:	48 07       	cpc	r20, r24
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	58 07       	cpc	r21, r24
     e76:	89 f7       	brne	.-30     	; 0xe5a <M_UART_Void_UARTSend+0xe>
     e78:	08 95       	ret

00000e7a <M_UART_Void_UARTRec>:
			break;
		}
	}
}
u8   M_UART_Void_UARTRec(void)
{
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < POLLING_TIME)
	{
		Local_U32_Counter++;
		if(GET_BIT(UCSRA_REG,RXC_BIT) == UART_FINISHED_RECEIVING)
     e82:	eb e2       	ldi	r30, 0x2B	; 43
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	88 23       	and	r24, r24
     e8a:	64 f0       	brlt	.+24     	; 0xea4 <M_UART_Void_UARTRec+0x2a>
u8   M_UART_Void_UARTRec(void)
{
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < POLLING_TIME)
	{
		Local_U32_Counter++;
     e8c:	2f 5f       	subi	r18, 0xFF	; 255
     e8e:	3f 4f       	sbci	r19, 0xFF	; 255
     e90:	4f 4f       	sbci	r20, 0xFF	; 255
     e92:	5f 4f       	sbci	r21, 0xFF	; 255
	}
}
u8   M_UART_Void_UARTRec(void)
{
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < POLLING_TIME)
     e94:	20 38       	cpi	r18, 0x80	; 128
     e96:	84 e8       	ldi	r24, 0x84	; 132
     e98:	38 07       	cpc	r19, r24
     e9a:	8e e1       	ldi	r24, 0x1E	; 30
     e9c:	48 07       	cpc	r20, r24
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	58 07       	cpc	r21, r24
     ea2:	89 f7       	brne	.-30     	; 0xe86 <M_UART_Void_UARTRec+0xc>
		if(GET_BIT(UCSRA_REG,RXC_BIT) == UART_FINISHED_RECEIVING)
		{
			break;
		}
	}
	return UDR_REG;
     ea4:	8c b1       	in	r24, 0x0c	; 12
}
     ea6:	08 95       	ret

00000ea8 <M_UART_Void_UARTInit>:

void M_UART_Void_UARTInit(void)
{
	u8 Local_U8_UCSRCValue = 0b10000000;

	M_DIO_Void_SetPinDirection(PD0_PIN,INPUT);
     ea8:	88 e2       	ldi	r24, 0x28	; 40
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PD1_PIN,OUTPUT);
     eb0:	89 e2       	ldi	r24, 0x29	; 41
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>

	/* TO SELECT CHARACTER SIZE -> 8 BITS */
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
     eb8:	ea e2       	ldi	r30, 0x2A	; 42
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8b 7f       	andi	r24, 0xFB	; 251
     ec0:	80 83       	st	Z, r24
#if   UART_STOP_BITS   ==   UART_1_STOP_BIT
	CLR_BIT(Local_U8_UCSRCValue,USBS_BIT);
#elif UART_STOP_BITS   ==   UART_2_STOP_BIT
	SET_BIT(Local_U8_UCSRCValue,USBS_BIT);
#endif
	UCSRC_REG = Local_U8_UCSRCValue;
     ec2:	86 e8       	ldi	r24, 0x86	; 134
     ec4:	80 bd       	out	0x20, r24	; 32
	/* TO SELECT BAUDRATE -> 9600 */
	UBRRL_REG = ((F_OSC * (u32)1000000) / ((u32)16 * UART_BAUDRATE)) - 1;
     ec6:	87 e6       	ldi	r24, 0x67	; 103
     ec8:	89 b9       	out	0x09, r24	; 9
	/* TO ENABLE RX CICUIT */
	SET_BIT(UCSRB_REG,RXEN_BIT);
     eca:	80 81       	ld	r24, Z
     ecc:	80 61       	ori	r24, 0x10	; 16
     ece:	80 83       	st	Z, r24
	/* TO ENABLE TX CIRCUIT */
	SET_BIT(UCSRB_REG,TXEN_BIT);
     ed0:	80 81       	ld	r24, Z
     ed2:	88 60       	ori	r24, 0x08	; 8
     ed4:	80 83       	st	Z, r24
}
     ed6:	08 95       	ret

00000ed8 <M_Timer_Void_TimerInit>:



void M_Timer_Void_TimerInit(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
     ed8:	88 23       	and	r24, r24
     eda:	69 f4       	brne	.+26     	; 0xef6 <M_Timer_Void_TimerInit+0x1e>
		CLR_BIT(TCCR0_REG,WGM00_BIT);
		CLR_BIT(TCCR0_REG,WGM01_BIT);
		/* TO ENABLE TIMER0 OVERFLOW INT */
		SET_BIT(TIMSK_REG,TOIE0_BIT);
#elif TIMER0_MODE   ==   CTC_MODE
		CLR_BIT(TCCR0_REG,WGM00_BIT);
     edc:	e3 e5       	ldi	r30, 0x53	; 83
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	8f 7b       	andi	r24, 0xBF	; 191
     ee4:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG,WGM01_BIT);
     ee6:	80 81       	ld	r24, Z
     ee8:	88 60       	ori	r24, 0x08	; 8
     eea:	80 83       	st	Z, r24
		/* TO ENABLE TIMER0 COMPARE MATCH INT */
		SET_BIT(TIMSK_REG,OCIE0_BIT);
     eec:	e9 e5       	ldi	r30, 0x59	; 89
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	82 60       	ori	r24, 0x02	; 2
     ef4:	80 83       	st	Z, r24
     ef6:	08 95       	ret

00000ef8 <M_Timer_Void_TimerSetTime>:
	default:
		break;
	}
}
void M_Timer_Void_TimerSetTime(u8 Copy_U8_TimerChannel,u32 Copy_U32_DesiredTime)
{
     ef8:	9f 92       	push	r9
     efa:	af 92       	push	r10
     efc:	bf 92       	push	r11
     efe:	cf 92       	push	r12
     f00:	df 92       	push	r13
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
	u32 Local_U32_TickTime   = TIMER_PRESCALER_DV / F_OSC;       /* result will be in micro second */
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000) / Local_U32_TickTime;
	u8 Local_U8_DF  = 255;
	switch(Copy_U8_TimerChannel)
     f0a:	88 23       	and	r24, r24
     f0c:	09 f0       	breq	.+2      	; 0xf10 <M_Timer_Void_TimerSetTime+0x18>
     f0e:	4f c0       	rjmp	.+158    	; 0xfae <M_Timer_Void_TimerSetTime+0xb6>
	}
}
void M_Timer_Void_TimerSetTime(u8 Copy_U8_TimerChannel,u32 Copy_U32_DesiredTime)
{
	u32 Local_U32_TickTime   = TIMER_PRESCALER_DV / F_OSC;       /* result will be in micro second */
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000) / Local_U32_TickTime;
     f10:	cb 01       	movw	r24, r22
     f12:	ba 01       	movw	r22, r20
     f14:	28 ee       	ldi	r18, 0xE8	; 232
     f16:	33 e0       	ldi	r19, 0x03	; 3
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	0e 94 1d 11 	call	0x223a	; 0x223a <__mulsi3>
     f20:	5b 01       	movw	r10, r22
     f22:	6c 01       	movw	r12, r24
     f24:	68 94       	set
     f26:	15 f8       	bld	r1, 5
     f28:	d6 94       	lsr	r13
     f2a:	c7 94       	ror	r12
     f2c:	b7 94       	ror	r11
     f2e:	a7 94       	ror	r10
     f30:	16 94       	lsr	r1
     f32:	d1 f7       	brne	.-12     	; 0xf28 <M_Timer_Void_TimerSetTime+0x30>
		{
			TCNT0_REG = 256 - Timer_U8_RemTicks;
			Timer_U32_NumOfOverFlows++;
		}
#elif TIMER0_MODE   ==   CTC_MODE     // 500 tick
		while(Local_U32_TotalTicks % Local_U8_DF)
     f34:	c6 01       	movw	r24, r12
     f36:	b5 01       	movw	r22, r10
     f38:	2f ef       	ldi	r18, 0xFF	; 255
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 e0       	ldi	r20, 0x00	; 0
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	0e 94 48 11 	call	0x2290	; 0x2290 <__udivmodsi4>
     f44:	61 15       	cp	r22, r1
     f46:	71 05       	cpc	r23, r1
     f48:	81 05       	cpc	r24, r1
     f4a:	91 05       	cpc	r25, r1
     f4c:	69 f4       	brne	.+26     	; 0xf68 <M_Timer_Void_TimerSetTime+0x70>
     f4e:	99 24       	eor	r9, r9
     f50:	9a 94       	dec	r9
     f52:	0f 2e       	mov	r0, r31
     f54:	ff ef       	ldi	r31, 0xFF	; 255
     f56:	ef 2e       	mov	r14, r31
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	ff 2e       	mov	r15, r31
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	0f 2f       	mov	r16, r31
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	1f 2f       	mov	r17, r31
     f64:	f0 2d       	mov	r31, r0
     f66:	12 c0       	rjmp	.+36     	; 0xf8c <M_Timer_Void_TimerSetTime+0x94>
     f68:	99 24       	eor	r9, r9
     f6a:	9a 94       	dec	r9
		{
			--Local_U8_DF;
     f6c:	9a 94       	dec	r9
		{
			TCNT0_REG = 256 - Timer_U8_RemTicks;
			Timer_U32_NumOfOverFlows++;
		}
#elif TIMER0_MODE   ==   CTC_MODE     // 500 tick
		while(Local_U32_TotalTicks % Local_U8_DF)
     f6e:	e9 2c       	mov	r14, r9
     f70:	ff 24       	eor	r15, r15
     f72:	00 e0       	ldi	r16, 0x00	; 0
     f74:	10 e0       	ldi	r17, 0x00	; 0
     f76:	c6 01       	movw	r24, r12
     f78:	b5 01       	movw	r22, r10
     f7a:	a8 01       	movw	r20, r16
     f7c:	97 01       	movw	r18, r14
     f7e:	0e 94 48 11 	call	0x2290	; 0x2290 <__udivmodsi4>
     f82:	61 15       	cp	r22, r1
     f84:	71 05       	cpc	r23, r1
     f86:	81 05       	cpc	r24, r1
     f88:	91 05       	cpc	r25, r1
     f8a:	81 f7       	brne	.-32     	; 0xf6c <M_Timer_Void_TimerSetTime+0x74>
		{
			--Local_U8_DF;
		}
		Timer_U32_NumOfCompareMatch = Local_U32_TotalTicks / Local_U8_DF;
     f8c:	c6 01       	movw	r24, r12
     f8e:	b5 01       	movw	r22, r10
     f90:	a8 01       	movw	r20, r16
     f92:	97 01       	movw	r18, r14
     f94:	0e 94 48 11 	call	0x2290	; 0x2290 <__udivmodsi4>
     f98:	20 93 7d 01 	sts	0x017D, r18
     f9c:	30 93 7e 01 	sts	0x017E, r19
     fa0:	40 93 7f 01 	sts	0x017F, r20
     fa4:	50 93 80 01 	sts	0x0180, r21
		OCR0_REG = Local_U8_DF - 1;
     fa8:	89 2d       	mov	r24, r9
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	8c bf       	out	0x3c, r24	; 60

		break;
	default: break;
	}

}
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	ff 90       	pop	r15
     fb4:	ef 90       	pop	r14
     fb6:	df 90       	pop	r13
     fb8:	cf 90       	pop	r12
     fba:	bf 90       	pop	r11
     fbc:	af 90       	pop	r10
     fbe:	9f 90       	pop	r9
     fc0:	08 95       	ret

00000fc2 <M_Timer_Void_TimerStart>:

void M_Timer_Void_TimerStart(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
     fc2:	88 23       	and	r24, r24
     fc4:	19 f0       	breq	.+6      	; 0xfcc <M_Timer_Void_TimerStart+0xa>
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	c1 f4       	brne	.+48     	; 0xffa <M_Timer_Void_TimerStart+0x38>
     fca:	0c c0       	rjmp	.+24     	; 0xfe4 <M_Timer_Void_TimerStart+0x22>
	{
	case TIMER0_CHANNEL:
#if   TIMER_PRESCALER_DV   ==   1024
		SET_BIT(TCCR0_REG,CS00_BIT);
     fcc:	e3 e5       	ldi	r30, 0x53	; 83
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	81 60       	ori	r24, 0x01	; 1
     fd4:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
     fd6:	80 81       	ld	r24, Z
     fd8:	8d 7f       	andi	r24, 0xFD	; 253
     fda:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG,CS02_BIT);
     fdc:	80 81       	ld	r24, Z
     fde:	84 60       	ori	r24, 0x04	; 4
     fe0:	80 83       	st	Z, r24
     fe2:	08 95       	ret
		SET_BIT(TCCR0_REG,CS02_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
		/* TO SELECT TIMER1 PRESCALER DV -> 256 */
		CLR_BIT(TCCR1B_REG,CS10_BIT);
     fe4:	ee e4       	ldi	r30, 0x4E	; 78
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8e 7f       	andi	r24, 0xFE	; 254
     fec:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
     fee:	80 81       	ld	r24, Z
     ff0:	8d 7f       	andi	r24, 0xFD	; 253
     ff2:	80 83       	st	Z, r24
		SET_BIT(TCCR1B_REG,CS12_BIT);
     ff4:	80 81       	ld	r24, Z
     ff6:	84 60       	ori	r24, 0x04	; 4
     ff8:	80 83       	st	Z, r24
     ffa:	08 95       	ret

00000ffc <M_Timer_Void_TimerStop>:
	default : break;
	}
}
void M_Timer_Void_TimerStop(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
     ffc:	88 23       	and	r24, r24
     ffe:	19 f0       	breq	.+6      	; 0x1006 <M_Timer_Void_TimerStop+0xa>
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	c1 f4       	brne	.+48     	; 0x1034 <M_Timer_Void_TimerStop+0x38>
    1004:	0c c0       	rjmp	.+24     	; 0x101e <M_Timer_Void_TimerStop+0x22>
	{
	case TIMER0_CHANNEL:
		CLR_BIT(TCCR0_REG,CS00_BIT);
    1006:	e3 e5       	ldi	r30, 0x53	; 83
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	8e 7f       	andi	r24, 0xFE	; 254
    100e:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
    1010:	80 81       	ld	r24, Z
    1012:	8d 7f       	andi	r24, 0xFD	; 253
    1014:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS02_BIT);
    1016:	80 81       	ld	r24, Z
    1018:	8b 7f       	andi	r24, 0xFB	; 251
    101a:	80 83       	st	Z, r24
    101c:	08 95       	ret
		break;
	case TIMER1_CHANNEL:
		CLR_BIT(TCCR1B_REG,CS10_BIT);
    101e:	ee e4       	ldi	r30, 0x4E	; 78
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8e 7f       	andi	r24, 0xFE	; 254
    1026:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    1028:	80 81       	ld	r24, Z
    102a:	8d 7f       	andi	r24, 0xFD	; 253
    102c:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS12_BIT);
    102e:	80 81       	ld	r24, Z
    1030:	8b 7f       	andi	r24, 0xFB	; 251
    1032:	80 83       	st	Z, r24
    1034:	08 95       	ret

00001036 <M_Timer_Void_PWMSetDutyCycle>:
		break;
	default : break;
	}
}
void M_Timer_Void_PWMSetDutyCycle(u8 Copy_U8_TimerChannel,f32 Copy_F32_DutyCycle)
{
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	7a 01       	movw	r14, r20
    1040:	8b 01       	movw	r16, r22
	switch(Copy_U8_TimerChannel)
    1042:	88 23       	and	r24, r24
    1044:	19 f0       	breq	.+6      	; 0x104c <M_Timer_Void_PWMSetDutyCycle+0x16>
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	69 f5       	brne	.+90     	; 0x10a4 <M_Timer_Void_PWMSetDutyCycle+0x6e>
    104a:	12 c0       	rjmp	.+36     	; 0x1070 <M_Timer_Void_PWMSetDutyCycle+0x3a>

#endif
#elif PWM0_MODE   ==   PHASE_CORRECT_PWM
#if   PWM0_MODE2   ==   NON_INVERTED

		OCR0_REG = (Copy_F32_DutyCycle * 255) / 100;
    104c:	cb 01       	movw	r24, r22
    104e:	ba 01       	movw	r22, r20
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	4f e7       	ldi	r20, 0x7F	; 127
    1056:	53 e4       	ldi	r21, 0x43	; 67
    1058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	48 ec       	ldi	r20, 0xC8	; 200
    1062:	52 e4       	ldi	r21, 0x42	; 66
    1064:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106c:	6c bf       	out	0x3c, r22	; 60
    106e:	1a c0       	rjmp	.+52     	; 0x10a4 <M_Timer_Void_PWMSetDutyCycle+0x6e>

#endif
#endif
		break;
	case TIMER1_CHANNEL:
		OCR1A_REG = ((Copy_F32_DutyCycle * ICR1_REG) / 100) - 1;
    1070:	66 b5       	in	r22, 0x26	; 38
    1072:	77 b5       	in	r23, 0x27	; 39
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    107c:	a8 01       	movw	r20, r16
    107e:	97 01       	movw	r18, r14
    1080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	48 ec       	ldi	r20, 0xC8	; 200
    108a:	52 e4       	ldi	r21, 0x42	; 66
    108c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e8       	ldi	r20, 0x80	; 128
    1096:	5f e3       	ldi	r21, 0x3F	; 63
    1098:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    109c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a0:	7b bd       	out	0x2b, r23	; 43
    10a2:	6a bd       	out	0x2a, r22	; 42
		break;
	case TIMER2_CHANNEL:
		break;
	default:  break;
	}
}
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	ff 90       	pop	r15
    10aa:	ef 90       	pop	r14
    10ac:	08 95       	ret

000010ae <M_Timer_Void_PWMSetFreaquancy>:
void M_Timer_Void_PWMSetFreaquancy(u8 Copy_U8_Freq)
{
	ICR1_REG = ((F_OSC * 1000000 / 256) / Copy_U8_Freq);
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	64 e2       	ldi	r22, 0x24	; 36
    10b8:	74 ef       	ldi	r23, 0xF4	; 244
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__divmodsi4>
    10c2:	37 bd       	out	0x27, r19	; 39
    10c4:	26 bd       	out	0x26, r18	; 38
}
    10c6:	08 95       	ret

000010c8 <M_Timer_Void_PWMStart>:
void M_Timer_Void_PWMStart(u8 Copy_U8_TimerChannel)
{
	M_Timer_Void_TimerStart(Copy_U8_TimerChannel);
    10c8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <M_Timer_Void_TimerStart>
}
    10cc:	08 95       	ret

000010ce <M_Timer_Void_PWMStop>:
void M_Timer_Void_PWMStop(u8 Copy_U8_TimerChannel)
{
	M_Timer_Void_TimerStop(Copy_U8_TimerChannel);
    10ce:	0e 94 fe 07 	call	0xffc	; 0xffc <M_Timer_Void_TimerStop>
}
    10d2:	08 95       	ret

000010d4 <M_Timer_Void_SetCallBack>:

void M_Timer_Void_SetCallBack(u8 Copy_U8_TimerChannel,void(*Copy_Ptr)(void))
{
	switch(Copy_U8_TimerChannel)
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	51 f0       	breq	.+20     	; 0x10ec <M_Timer_Void_SetCallBack+0x18>
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	18 f0       	brcs	.+6      	; 0x10e2 <M_Timer_Void_SetCallBack+0xe>
    10dc:	82 30       	cpi	r24, 0x02	; 2
    10de:	79 f4       	brne	.+30     	; 0x10fe <M_Timer_Void_SetCallBack+0x2a>
    10e0:	0a c0       	rjmp	.+20     	; 0x10f6 <M_Timer_Void_SetCallBack+0x22>
	{
	case TIMER0_CHANNEL:
		Timer0_CallBack = Copy_Ptr;
    10e2:	70 93 8a 01 	sts	0x018A, r23
    10e6:	60 93 89 01 	sts	0x0189, r22
    10ea:	08 95       	ret
		break;
	case TIMER1_CHANNEL:
		Timer1_CallBack = Copy_Ptr;
    10ec:	70 93 88 01 	sts	0x0188, r23
    10f0:	60 93 87 01 	sts	0x0187, r22
    10f4:	08 95       	ret
		break;
	case TIMER2_CHANNEL:
		Timer2_CallBack = Copy_Ptr;
    10f6:	70 93 86 01 	sts	0x0186, r23
    10fa:	60 93 85 01 	sts	0x0185, r22
    10fe:	08 95       	ret

00001100 <__vector_10>:
		Local_U32_Counter = 0;
	}
}
#elif TIMER0_MODE   ==   CTC_MODE
ISR(TIMER0_COMP_vect)
{
    1100:	1f 92       	push	r1
    1102:	0f 92       	push	r0
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	0f 92       	push	r0
    1108:	11 24       	eor	r1, r1
    110a:	2f 93       	push	r18
    110c:	3f 93       	push	r19
    110e:	4f 93       	push	r20
    1110:	5f 93       	push	r21
    1112:	6f 93       	push	r22
    1114:	7f 93       	push	r23
    1116:	8f 93       	push	r24
    1118:	9f 93       	push	r25
    111a:	af 93       	push	r26
    111c:	bf 93       	push	r27
    111e:	ef 93       	push	r30
    1120:	ff 93       	push	r31
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
    1122:	80 91 81 01 	lds	r24, 0x0181
    1126:	90 91 82 01 	lds	r25, 0x0182
    112a:	a0 91 83 01 	lds	r26, 0x0183
    112e:	b0 91 84 01 	lds	r27, 0x0184
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	a1 1d       	adc	r26, r1
    1136:	b1 1d       	adc	r27, r1
    1138:	80 93 81 01 	sts	0x0181, r24
    113c:	90 93 82 01 	sts	0x0182, r25
    1140:	a0 93 83 01 	sts	0x0183, r26
    1144:	b0 93 84 01 	sts	0x0184, r27
	if(Local_U32_Counter == Timer_U32_NumOfCompareMatch)
    1148:	20 91 7d 01 	lds	r18, 0x017D
    114c:	30 91 7e 01 	lds	r19, 0x017E
    1150:	40 91 7f 01 	lds	r20, 0x017F
    1154:	50 91 80 01 	lds	r21, 0x0180
    1158:	82 17       	cp	r24, r18
    115a:	93 07       	cpc	r25, r19
    115c:	a4 07       	cpc	r26, r20
    115e:	b5 07       	cpc	r27, r21
    1160:	69 f4       	brne	.+26     	; 0x117c <__vector_10+0x7c>
	{
		Timer0_CallBack();
    1162:	e0 91 89 01 	lds	r30, 0x0189
    1166:	f0 91 8a 01 	lds	r31, 0x018A
    116a:	09 95       	icall
		Local_U32_Counter = 0;
    116c:	10 92 81 01 	sts	0x0181, r1
    1170:	10 92 82 01 	sts	0x0182, r1
    1174:	10 92 83 01 	sts	0x0183, r1
    1178:	10 92 84 01 	sts	0x0184, r1
	}
}
    117c:	ff 91       	pop	r31
    117e:	ef 91       	pop	r30
    1180:	bf 91       	pop	r27
    1182:	af 91       	pop	r26
    1184:	9f 91       	pop	r25
    1186:	8f 91       	pop	r24
    1188:	7f 91       	pop	r23
    118a:	6f 91       	pop	r22
    118c:	5f 91       	pop	r21
    118e:	4f 91       	pop	r20
    1190:	3f 91       	pop	r19
    1192:	2f 91       	pop	r18
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	0f 90       	pop	r0
    119a:	1f 90       	pop	r1
    119c:	18 95       	reti

0000119e <M_Timer_Void_PWMInit>:



void M_Timer_Void_PWMInit(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
    119e:	88 23       	and	r24, r24
    11a0:	19 f0       	breq	.+6      	; 0x11a8 <M_Timer_Void_PWMInit+0xa>
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	71 f5       	brne	.+92     	; 0x1202 <M_Timer_Void_PWMInit+0x64>
    11a6:	13 c0       	rjmp	.+38     	; 0x11ce <M_Timer_Void_PWMInit+0x30>
	{
	case TIMER0_CHANNEL:
		M_DIO_Void_SetPinDirection(PB3_PIN,OUTPUT);
    11a8:	87 e1       	ldi	r24, 0x17	; 23
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
#if   PWM0_MODE   ==   FAST_PWM
		SET_BIT(TCCR0_REG,WGM00_BIT);
		SET_BIT(TCCR0_REG,WGM01_BIT);
#elif PWM0_MODE   ==   PHASE_CORRECT_PWM
		SET_BIT(TCCR0_REG,WGM00_BIT);
    11b0:	e3 e5       	ldi	r30, 0x53	; 83
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	80 64       	ori	r24, 0x40	; 64
    11b8:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,WGM01_BIT);
    11ba:	80 81       	ld	r24, Z
    11bc:	87 7f       	andi	r24, 0xF7	; 247
    11be:	80 83       	st	Z, r24
#endif
#if   PWM0_MODE2   ==   NON_INVERTED
		CLR_BIT(TCCR0_REG,COM00_BIT);
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 7e       	andi	r24, 0xEF	; 239
    11c4:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG,COM01_BIT);
    11c6:	80 81       	ld	r24, Z
    11c8:	80 62       	ori	r24, 0x20	; 32
    11ca:	80 83       	st	Z, r24
    11cc:	08 95       	ret
		SET_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
		M_DIO_Void_SetPinDirection(PD5_PIN,OUTPUT);
    11ce:	8d e2       	ldi	r24, 0x2D	; 45
    11d0:	61 e0       	ldi	r22, 0x01	; 1
    11d2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
		/* TO SELECT MODE NUMBER 14 AT TABLE 47 */
		CLR_BIT(TCCR1A_REG,WGM10_BIT);
    11d6:	af e4       	ldi	r26, 0x4F	; 79
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	8c 91       	ld	r24, X
    11dc:	8e 7f       	andi	r24, 0xFE	; 254
    11de:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,WGM11_BIT);
    11e0:	8c 91       	ld	r24, X
    11e2:	82 60       	ori	r24, 0x02	; 2
    11e4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM12_BIT);
    11e6:	ee e4       	ldi	r30, 0x4E	; 78
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	88 60       	ori	r24, 0x08	; 8
    11ee:	80 83       	st	Z, r24
		SET_BIT(TCCR1B_REG,WGM13_BIT);
    11f0:	80 81       	ld	r24, Z
    11f2:	80 61       	ori	r24, 0x10	; 16
    11f4:	80 83       	st	Z, r24
		/* TO SELECT NON INVERTED MODE */
		CLR_BIT(TCCR1A_REG,COM1A0_BIT);
    11f6:	8c 91       	ld	r24, X
    11f8:	8f 7b       	andi	r24, 0xBF	; 191
    11fa:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,COM1A1_BIT);
    11fc:	8c 91       	ld	r24, X
    11fe:	80 68       	ori	r24, 0x80	; 128
    1200:	8c 93       	st	X, r24
    1202:	08 95       	ret

00001204 <M_GIE_Void_GlobalInterruptEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"

void M_GIE_Void_GlobalInterruptEnable(void)
{
	SET_BIT(SREG_REG,I_BIT);
    1204:	ef e5       	ldi	r30, 0x5F	; 95
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	80 68       	ori	r24, 0x80	; 128
    120c:	80 83       	st	Z, r24
}
    120e:	08 95       	ret

00001210 <M_GIE_Void_GlobalInterruptDisable>:
void M_GIE_Void_GlobalInterruptDisable(void)
{
	CLR_BIT(SREG_REG,I_BIT);
    1210:	ef e5       	ldi	r30, 0x5F	; 95
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8f 77       	andi	r24, 0x7F	; 127
    1218:	80 83       	st	Z, r24
}
    121a:	08 95       	ret

0000121c <M_EXT_INT_Void_ExtIntInit>:

void (*EXT_INT_CallBack) (void);

void M_EXT_INT_Void_ExtIntInit(u8 Copy_U8_Num)
{
	switch(Copy_U8_Num)
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	99 f0       	breq	.+38     	; 0x1246 <M_EXT_INT_Void_ExtIntInit+0x2a>
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	18 f0       	brcs	.+6      	; 0x122a <M_EXT_INT_Void_ExtIntInit+0xe>
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	39 f5       	brne	.+78     	; 0x1276 <M_EXT_INT_Void_ExtIntInit+0x5a>
    1228:	1c c0       	rjmp	.+56     	; 0x1262 <M_EXT_INT_Void_ExtIntInit+0x46>
	{
	case EXT_INT_0:
#if   SENSE_CONTROL0   ==   RISING_EDGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
    122a:	e5 e5       	ldi	r30, 0x55	; 85
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	81 60       	ori	r24, 0x01	; 1
    1232:	80 83       	st	Z, r24
		SET_BIT(MCUCR_REG,ISC01_BIT);
    1234:	80 81       	ld	r24, Z
    1236:	82 60       	ori	r24, 0x02	; 2
    1238:	80 83       	st	Z, r24
#elif SENSE_CONTROL0   ==   ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
		CLR_BIT(MCUCR_REG,ISC01_BIT);
#endif
		// to enable local int
		SET_BIT(GICR_REG,INT0_BIT);
    123a:	eb e5       	ldi	r30, 0x5B	; 91
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	80 64       	ori	r24, 0x40	; 64
    1242:	80 83       	st	Z, r24
    1244:	08 95       	ret
	case EXT_INT_1:
#if   SENSE_CONTROL1   ==   RISING_EDGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
		SET_BIT(MCUCR_REG,ISC11_BIT);
#elif SENSE_CONTROL1   ==   FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC10_BIT);
    1246:	e5 e5       	ldi	r30, 0x55	; 85
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8b 7f       	andi	r24, 0xFB	; 251
    124e:	80 83       	st	Z, r24
		SET_BIT(MCUCR_REG,ISC11_BIT);
    1250:	80 81       	ld	r24, Z
    1252:	88 60       	ori	r24, 0x08	; 8
    1254:	80 83       	st	Z, r24
#elif SENSE_CONTROL1   ==   ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
		CLR_BIT(MCUCR_REG,ISC11_BIT);
#endif
		// to enable local int
		SET_BIT(GICR_REG,INT1_BIT);
    1256:	eb e5       	ldi	r30, 0x5B	; 91
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	80 68       	ori	r24, 0x80	; 128
    125e:	80 83       	st	Z, r24
    1260:	08 95       	ret
		break;
	case EXT_INT_2:
#if   SENSE_CONTROL2   ==   RISING_EDGE
		SET_BIT(MCUCSR_REG,ISC2_BIT);
    1262:	e4 e5       	ldi	r30, 0x54	; 84
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	80 64       	ori	r24, 0x40	; 64
    126a:	80 83       	st	Z, r24
#elif SENSE_CONTROL2   ==   FALLING_EDGE
		CLR_BIT(MCUCSR_REG,ISC2_BIT);
#endif
		// to enable local int
		SET_BIT(GICR_REG,INT2_BIT);
    126c:	eb e5       	ldi	r30, 0x5B	; 91
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 62       	ori	r24, 0x20	; 32
    1274:	80 83       	st	Z, r24
    1276:	08 95       	ret

00001278 <M_EXT_INT_Void_SetCallBack>:
	}
}

void M_EXT_INT_Void_SetCallBack(void(*Copy_Ptr)(void))
{
	EXT_INT_CallBack = Copy_Ptr;
    1278:	90 93 8c 01 	sts	0x018C, r25
    127c:	80 93 8b 01 	sts	0x018B, r24
}
    1280:	08 95       	ret

00001282 <__vector_1>:

ISR(INT0_vect)
{
    1282:	1f 92       	push	r1
    1284:	0f 92       	push	r0
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	0f 92       	push	r0
    128a:	11 24       	eor	r1, r1
    128c:	2f 93       	push	r18
    128e:	3f 93       	push	r19
    1290:	4f 93       	push	r20
    1292:	5f 93       	push	r21
    1294:	6f 93       	push	r22
    1296:	7f 93       	push	r23
    1298:	8f 93       	push	r24
    129a:	9f 93       	push	r25
    129c:	af 93       	push	r26
    129e:	bf 93       	push	r27
    12a0:	ef 93       	push	r30
    12a2:	ff 93       	push	r31
	EXT_INT_CallBack();
    12a4:	e0 91 8b 01 	lds	r30, 0x018B
    12a8:	f0 91 8c 01 	lds	r31, 0x018C
    12ac:	09 95       	icall
}
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	bf 91       	pop	r27
    12b4:	af 91       	pop	r26
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	7f 91       	pop	r23
    12bc:	6f 91       	pop	r22
    12be:	5f 91       	pop	r21
    12c0:	4f 91       	pop	r20
    12c2:	3f 91       	pop	r19
    12c4:	2f 91       	pop	r18
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <__vector_2>:
ISR(INT1_vect)
{
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1

}
    12da:	0f 90       	pop	r0
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	0f 90       	pop	r0
    12e0:	1f 90       	pop	r1
    12e2:	18 95       	reti

000012e4 <__vector_3>:
ISR(INT2_vect)
{
    12e4:	1f 92       	push	r1
    12e6:	0f 92       	push	r0
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	0f 92       	push	r0
    12ec:	11 24       	eor	r1, r1

}
    12ee:	0f 90       	pop	r0
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	0f 90       	pop	r0
    12f4:	1f 90       	pop	r1
    12f6:	18 95       	reti

000012f8 <M_DIO_Void_SetPinDirection>:
#include "DIO_Private.h"
#include "DIO_Interface.h"


void M_DIO_Void_SetPinDirection(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
    12f8:	28 2f       	mov	r18, r24
    12fa:	36 2f       	mov	r19, r22
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    12fc:	6a e0       	ldi	r22, 0x0A	; 10
    12fe:	0e 94 3c 11 	call	0x2278	; 0x2278 <__udivmodqi4>
    1302:	49 2f       	mov	r20, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
    1304:	82 2f       	mov	r24, r18
    1306:	0e 94 3c 11 	call	0x2278	; 0x2278 <__udivmodqi4>
			switch(Copy_U8_State)
    130a:	33 23       	and	r19, r19
    130c:	21 f0       	breq	.+8      	; 0x1316 <M_DIO_Void_SetPinDirection+0x1e>
    130e:	31 30       	cpi	r19, 0x01	; 1
    1310:	09 f0       	breq	.+2      	; 0x1314 <M_DIO_Void_SetPinDirection+0x1c>
    1312:	86 c0       	rjmp	.+268    	; 0x1420 <M_DIO_Void_SetPinDirection+0x128>
    1314:	46 c0       	rjmp	.+140    	; 0x13a2 <M_DIO_Void_SetPinDirection+0xaa>
			{
			case INPUT :
				switch(Local_U8_Port)
    1316:	82 30       	cpi	r24, 0x02	; 2
    1318:	d1 f0       	breq	.+52     	; 0x134e <M_DIO_Void_SetPinDirection+0x56>
    131a:	83 30       	cpi	r24, 0x03	; 3
    131c:	20 f4       	brcc	.+8      	; 0x1326 <M_DIO_Void_SetPinDirection+0x2e>
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	09 f0       	breq	.+2      	; 0x1324 <M_DIO_Void_SetPinDirection+0x2c>
    1322:	7e c0       	rjmp	.+252    	; 0x1420 <M_DIO_Void_SetPinDirection+0x128>
    1324:	06 c0       	rjmp	.+12     	; 0x1332 <M_DIO_Void_SetPinDirection+0x3a>
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	01 f1       	breq	.+64     	; 0x136a <M_DIO_Void_SetPinDirection+0x72>
    132a:	84 30       	cpi	r24, 0x04	; 4
    132c:	09 f0       	breq	.+2      	; 0x1330 <M_DIO_Void_SetPinDirection+0x38>
    132e:	78 c0       	rjmp	.+240    	; 0x1420 <M_DIO_Void_SetPinDirection+0x128>
    1330:	2a c0       	rjmp	.+84     	; 0x1386 <M_DIO_Void_SetPinDirection+0x8e>
				{
				case 1: CLR_BIT(DDRA_REG,Local_U8_Pin); break;
    1332:	ea e3       	ldi	r30, 0x3A	; 58
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	20 81       	ld	r18, Z
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <M_DIO_Void_SetPinDirection+0x4a>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	4a 95       	dec	r20
    1344:	e2 f7       	brpl	.-8      	; 0x133e <M_DIO_Void_SetPinDirection+0x46>
    1346:	80 95       	com	r24
    1348:	82 23       	and	r24, r18
    134a:	80 83       	st	Z, r24
    134c:	08 95       	ret
				case 2: CLR_BIT(DDRB_REG,Local_U8_Pin); break;
    134e:	e7 e3       	ldi	r30, 0x37	; 55
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	20 81       	ld	r18, Z
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 c0       	rjmp	.+4      	; 0x135e <M_DIO_Void_SetPinDirection+0x66>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	4a 95       	dec	r20
    1360:	e2 f7       	brpl	.-8      	; 0x135a <M_DIO_Void_SetPinDirection+0x62>
    1362:	80 95       	com	r24
    1364:	82 23       	and	r24, r18
    1366:	80 83       	st	Z, r24
    1368:	08 95       	ret
				case 3: CLR_BIT(DDRC_REG,Local_U8_Pin); break;
    136a:	e4 e3       	ldi	r30, 0x34	; 52
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	20 81       	ld	r18, Z
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 c0       	rjmp	.+4      	; 0x137a <M_DIO_Void_SetPinDirection+0x82>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	4a 95       	dec	r20
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <M_DIO_Void_SetPinDirection+0x7e>
    137e:	80 95       	com	r24
    1380:	82 23       	and	r24, r18
    1382:	80 83       	st	Z, r24
    1384:	08 95       	ret
				case 4: CLR_BIT(DDRD_REG,Local_U8_Pin); break;
    1386:	e1 e3       	ldi	r30, 0x31	; 49
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	20 81       	ld	r18, Z
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <M_DIO_Void_SetPinDirection+0x9e>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	4a 95       	dec	r20
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <M_DIO_Void_SetPinDirection+0x9a>
    139a:	80 95       	com	r24
    139c:	82 23       	and	r24, r18
    139e:	80 83       	st	Z, r24
    13a0:	08 95       	ret
				default:                                break;
				}
				break;
			case OUTPUT:
				switch(Local_U8_Port)
    13a2:	82 30       	cpi	r24, 0x02	; 2
    13a4:	b9 f0       	breq	.+46     	; 0x13d4 <M_DIO_Void_SetPinDirection+0xdc>
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	18 f4       	brcc	.+6      	; 0x13b0 <M_DIO_Void_SetPinDirection+0xb8>
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	c9 f5       	brne	.+114    	; 0x1420 <M_DIO_Void_SetPinDirection+0x128>
    13ae:	05 c0       	rjmp	.+10     	; 0x13ba <M_DIO_Void_SetPinDirection+0xc2>
    13b0:	83 30       	cpi	r24, 0x03	; 3
    13b2:	e9 f0       	breq	.+58     	; 0x13ee <M_DIO_Void_SetPinDirection+0xf6>
    13b4:	84 30       	cpi	r24, 0x04	; 4
    13b6:	a1 f5       	brne	.+104    	; 0x1420 <M_DIO_Void_SetPinDirection+0x128>
    13b8:	27 c0       	rjmp	.+78     	; 0x1408 <M_DIO_Void_SetPinDirection+0x110>
				{
				case 1: SET_BIT(DDRA_REG,Local_U8_Pin); break;
    13ba:	ea e3       	ldi	r30, 0x3A	; 58
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	20 81       	ld	r18, Z
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <M_DIO_Void_SetPinDirection+0xd2>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	4a 95       	dec	r20
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <M_DIO_Void_SetPinDirection+0xce>
    13ce:	28 2b       	or	r18, r24
    13d0:	20 83       	st	Z, r18
    13d2:	08 95       	ret
				case 2: SET_BIT(DDRB_REG,Local_U8_Pin); break;
    13d4:	e7 e3       	ldi	r30, 0x37	; 55
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	20 81       	ld	r18, Z
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <M_DIO_Void_SetPinDirection+0xec>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	4a 95       	dec	r20
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <M_DIO_Void_SetPinDirection+0xe8>
    13e8:	28 2b       	or	r18, r24
    13ea:	20 83       	st	Z, r18
    13ec:	08 95       	ret
				case 3: SET_BIT(DDRC_REG,Local_U8_Pin); break;
    13ee:	e4 e3       	ldi	r30, 0x34	; 52
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	20 81       	ld	r18, Z
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <M_DIO_Void_SetPinDirection+0x106>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	4a 95       	dec	r20
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <M_DIO_Void_SetPinDirection+0x102>
    1402:	28 2b       	or	r18, r24
    1404:	20 83       	st	Z, r18
    1406:	08 95       	ret
				case 4: SET_BIT(DDRD_REG,Local_U8_Pin); break;
    1408:	e1 e3       	ldi	r30, 0x31	; 49
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	20 81       	ld	r18, Z
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <M_DIO_Void_SetPinDirection+0x120>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	4a 95       	dec	r20
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <M_DIO_Void_SetPinDirection+0x11c>
    141c:	28 2b       	or	r18, r24
    141e:	20 83       	st	Z, r18
    1420:	08 95       	ret

00001422 <M_DIO_Void_SetPinValue>:
				default:                                break;
			}
}

void M_DIO_Void_SetPinValue(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
    1422:	28 2f       	mov	r18, r24
    1424:	36 2f       	mov	r19, r22
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    1426:	6a e0       	ldi	r22, 0x0A	; 10
    1428:	0e 94 3c 11 	call	0x2278	; 0x2278 <__udivmodqi4>
    142c:	49 2f       	mov	r20, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
    142e:	82 2f       	mov	r24, r18
    1430:	0e 94 3c 11 	call	0x2278	; 0x2278 <__udivmodqi4>
			switch(Copy_U8_State)
    1434:	33 23       	and	r19, r19
    1436:	21 f0       	breq	.+8      	; 0x1440 <M_DIO_Void_SetPinValue+0x1e>
    1438:	31 30       	cpi	r19, 0x01	; 1
    143a:	09 f0       	breq	.+2      	; 0x143e <M_DIO_Void_SetPinValue+0x1c>
    143c:	86 c0       	rjmp	.+268    	; 0x154a <M_DIO_Void_SetPinValue+0x128>
    143e:	46 c0       	rjmp	.+140    	; 0x14cc <M_DIO_Void_SetPinValue+0xaa>
			{
			case LOW :
				switch(Local_U8_Port)
    1440:	82 30       	cpi	r24, 0x02	; 2
    1442:	d1 f0       	breq	.+52     	; 0x1478 <M_DIO_Void_SetPinValue+0x56>
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	20 f4       	brcc	.+8      	; 0x1450 <M_DIO_Void_SetPinValue+0x2e>
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	09 f0       	breq	.+2      	; 0x144e <M_DIO_Void_SetPinValue+0x2c>
    144c:	7e c0       	rjmp	.+252    	; 0x154a <M_DIO_Void_SetPinValue+0x128>
    144e:	06 c0       	rjmp	.+12     	; 0x145c <M_DIO_Void_SetPinValue+0x3a>
    1450:	83 30       	cpi	r24, 0x03	; 3
    1452:	01 f1       	breq	.+64     	; 0x1494 <M_DIO_Void_SetPinValue+0x72>
    1454:	84 30       	cpi	r24, 0x04	; 4
    1456:	09 f0       	breq	.+2      	; 0x145a <M_DIO_Void_SetPinValue+0x38>
    1458:	78 c0       	rjmp	.+240    	; 0x154a <M_DIO_Void_SetPinValue+0x128>
    145a:	2a c0       	rjmp	.+84     	; 0x14b0 <M_DIO_Void_SetPinValue+0x8e>
				{
				case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
    145c:	eb e3       	ldi	r30, 0x3B	; 59
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	20 81       	ld	r18, Z
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <M_DIO_Void_SetPinValue+0x4a>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	4a 95       	dec	r20
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <M_DIO_Void_SetPinValue+0x46>
    1470:	80 95       	com	r24
    1472:	82 23       	and	r24, r18
    1474:	80 83       	st	Z, r24
    1476:	08 95       	ret
				case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
    1478:	e8 e3       	ldi	r30, 0x38	; 56
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	20 81       	ld	r18, Z
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <M_DIO_Void_SetPinValue+0x66>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	4a 95       	dec	r20
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <M_DIO_Void_SetPinValue+0x62>
    148c:	80 95       	com	r24
    148e:	82 23       	and	r24, r18
    1490:	80 83       	st	Z, r24
    1492:	08 95       	ret
				case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    1494:	e5 e3       	ldi	r30, 0x35	; 53
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	20 81       	ld	r18, Z
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <M_DIO_Void_SetPinValue+0x82>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	4a 95       	dec	r20
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <M_DIO_Void_SetPinValue+0x7e>
    14a8:	80 95       	com	r24
    14aa:	82 23       	and	r24, r18
    14ac:	80 83       	st	Z, r24
    14ae:	08 95       	ret
				case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    14b0:	e2 e3       	ldi	r30, 0x32	; 50
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	20 81       	ld	r18, Z
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <M_DIO_Void_SetPinValue+0x9e>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	4a 95       	dec	r20
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <M_DIO_Void_SetPinValue+0x9a>
    14c4:	80 95       	com	r24
    14c6:	82 23       	and	r24, r18
    14c8:	80 83       	st	Z, r24
    14ca:	08 95       	ret
				default:                                 break;
				}
				break;
			case HIGH:
				switch(Local_U8_Port)
    14cc:	82 30       	cpi	r24, 0x02	; 2
    14ce:	b9 f0       	breq	.+46     	; 0x14fe <M_DIO_Void_SetPinValue+0xdc>
    14d0:	83 30       	cpi	r24, 0x03	; 3
    14d2:	18 f4       	brcc	.+6      	; 0x14da <M_DIO_Void_SetPinValue+0xb8>
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	c9 f5       	brne	.+114    	; 0x154a <M_DIO_Void_SetPinValue+0x128>
    14d8:	05 c0       	rjmp	.+10     	; 0x14e4 <M_DIO_Void_SetPinValue+0xc2>
    14da:	83 30       	cpi	r24, 0x03	; 3
    14dc:	e9 f0       	breq	.+58     	; 0x1518 <M_DIO_Void_SetPinValue+0xf6>
    14de:	84 30       	cpi	r24, 0x04	; 4
    14e0:	a1 f5       	brne	.+104    	; 0x154a <M_DIO_Void_SetPinValue+0x128>
    14e2:	27 c0       	rjmp	.+78     	; 0x1532 <M_DIO_Void_SetPinValue+0x110>
				{
				case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    14e4:	eb e3       	ldi	r30, 0x3B	; 59
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	20 81       	ld	r18, Z
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <M_DIO_Void_SetPinValue+0xd2>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	4a 95       	dec	r20
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <M_DIO_Void_SetPinValue+0xce>
    14f8:	28 2b       	or	r18, r24
    14fa:	20 83       	st	Z, r18
    14fc:	08 95       	ret
				case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    14fe:	e8 e3       	ldi	r30, 0x38	; 56
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	20 81       	ld	r18, Z
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 c0       	rjmp	.+4      	; 0x150e <M_DIO_Void_SetPinValue+0xec>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	4a 95       	dec	r20
    1510:	e2 f7       	brpl	.-8      	; 0x150a <M_DIO_Void_SetPinValue+0xe8>
    1512:	28 2b       	or	r18, r24
    1514:	20 83       	st	Z, r18
    1516:	08 95       	ret
				case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    1518:	e5 e3       	ldi	r30, 0x35	; 53
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	20 81       	ld	r18, Z
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <M_DIO_Void_SetPinValue+0x106>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	4a 95       	dec	r20
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <M_DIO_Void_SetPinValue+0x102>
    152c:	28 2b       	or	r18, r24
    152e:	20 83       	st	Z, r18
    1530:	08 95       	ret
				case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    1532:	e2 e3       	ldi	r30, 0x32	; 50
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	20 81       	ld	r18, Z
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <M_DIO_Void_SetPinValue+0x120>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	4a 95       	dec	r20
    1544:	e2 f7       	brpl	.-8      	; 0x153e <M_DIO_Void_SetPinValue+0x11c>
    1546:	28 2b       	or	r18, r24
    1548:	20 83       	st	Z, r18
    154a:	08 95       	ret

0000154c <M_DIO_Void_TogPin>:
				break;
				default:                                 break;
			}
}
void M_DIO_Void_TogPin(u8 Copy_U8_Num)
{
    154c:	28 2f       	mov	r18, r24
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    154e:	6a e0       	ldi	r22, 0x0A	; 10
    1550:	0e 94 3c 11 	call	0x2278	; 0x2278 <__udivmodqi4>
    1554:	39 2f       	mov	r19, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
	switch(Local_U8_Port)
    1556:	82 2f       	mov	r24, r18
    1558:	0e 94 3c 11 	call	0x2278	; 0x2278 <__udivmodqi4>
    155c:	82 30       	cpi	r24, 0x02	; 2
    155e:	b9 f0       	breq	.+46     	; 0x158e <M_DIO_Void_TogPin+0x42>
    1560:	83 30       	cpi	r24, 0x03	; 3
    1562:	18 f4       	brcc	.+6      	; 0x156a <M_DIO_Void_TogPin+0x1e>
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	c9 f5       	brne	.+114    	; 0x15da <M_DIO_Void_TogPin+0x8e>
    1568:	05 c0       	rjmp	.+10     	; 0x1574 <M_DIO_Void_TogPin+0x28>
    156a:	83 30       	cpi	r24, 0x03	; 3
    156c:	e9 f0       	breq	.+58     	; 0x15a8 <M_DIO_Void_TogPin+0x5c>
    156e:	84 30       	cpi	r24, 0x04	; 4
    1570:	a1 f5       	brne	.+104    	; 0x15da <M_DIO_Void_TogPin+0x8e>
    1572:	27 c0       	rjmp	.+78     	; 0x15c2 <M_DIO_Void_TogPin+0x76>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Pin); break;
    1574:	eb e3       	ldi	r30, 0x3B	; 59
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	20 81       	ld	r18, Z
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <M_DIO_Void_TogPin+0x38>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	3a 95       	dec	r19
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <M_DIO_Void_TogPin+0x34>
    1588:	28 27       	eor	r18, r24
    158a:	20 83       	st	Z, r18
    158c:	08 95       	ret
	case 2: TOG_BIT(PORTB_REG,Local_U8_Pin); break;
    158e:	e8 e3       	ldi	r30, 0x38	; 56
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	20 81       	ld	r18, Z
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 c0       	rjmp	.+4      	; 0x159e <M_DIO_Void_TogPin+0x52>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	3a 95       	dec	r19
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <M_DIO_Void_TogPin+0x4e>
    15a2:	28 27       	eor	r18, r24
    15a4:	20 83       	st	Z, r18
    15a6:	08 95       	ret
	case 3: TOG_BIT(PORTC_REG,Local_U8_Pin); break;
    15a8:	e5 e3       	ldi	r30, 0x35	; 53
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	20 81       	ld	r18, Z
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <M_DIO_Void_TogPin+0x6c>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	3a 95       	dec	r19
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <M_DIO_Void_TogPin+0x68>
    15bc:	28 27       	eor	r18, r24
    15be:	20 83       	st	Z, r18
    15c0:	08 95       	ret
	case 4: TOG_BIT(PORTD_REG,Local_U8_Pin); break;
    15c2:	e2 e3       	ldi	r30, 0x32	; 50
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	20 81       	ld	r18, Z
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <M_DIO_Void_TogPin+0x86>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	3a 95       	dec	r19
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <M_DIO_Void_TogPin+0x82>
    15d6:	28 27       	eor	r18, r24
    15d8:	20 83       	st	Z, r18
    15da:	08 95       	ret

000015dc <M_DIO_U8_GetPinValue>:
	default:                                 break;
	}
}
u8   M_DIO_U8_GetPinValue(u8 Copy_U8_Num)
{
    15dc:	28 2f       	mov	r18, r24
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    15de:	6a e0       	ldi	r22, 0x0A	; 10
    15e0:	0e 94 3c 11 	call	0x2278	; 0x2278 <__udivmodqi4>
    15e4:	39 2f       	mov	r19, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
	u8 Local_U8_Reading = 0;
	switch(Local_U8_Port)
    15e6:	82 2f       	mov	r24, r18
    15e8:	0e 94 3c 11 	call	0x2278	; 0x2278 <__udivmodqi4>
    15ec:	82 30       	cpi	r24, 0x02	; 2
    15ee:	a1 f0       	breq	.+40     	; 0x1618 <M_DIO_U8_GetPinValue+0x3c>
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	18 f4       	brcc	.+6      	; 0x15fa <M_DIO_U8_GetPinValue+0x1e>
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	29 f4       	brne	.+10     	; 0x1602 <M_DIO_U8_GetPinValue+0x26>
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <M_DIO_U8_GetPinValue+0x2a>
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	b1 f0       	breq	.+44     	; 0x162a <M_DIO_U8_GetPinValue+0x4e>
    15fe:	84 30       	cpi	r24, 0x04	; 4
    1600:	e9 f0       	breq	.+58     	; 0x163c <M_DIO_U8_GetPinValue+0x60>
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	08 95       	ret
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Pin); break;
    1606:	89 b3       	in	r24, 0x19	; 25
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <M_DIO_U8_GetPinValue+0x34>
    160c:	95 95       	asr	r25
    160e:	87 95       	ror	r24
    1610:	3a 95       	dec	r19
    1612:	e2 f7       	brpl	.-8      	; 0x160c <M_DIO_U8_GetPinValue+0x30>
    1614:	81 70       	andi	r24, 0x01	; 1
    1616:	08 95       	ret
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Pin); break;
    1618:	86 b3       	in	r24, 0x16	; 22
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <M_DIO_U8_GetPinValue+0x46>
    161e:	95 95       	asr	r25
    1620:	87 95       	ror	r24
    1622:	3a 95       	dec	r19
    1624:	e2 f7       	brpl	.-8      	; 0x161e <M_DIO_U8_GetPinValue+0x42>
    1626:	81 70       	andi	r24, 0x01	; 1
    1628:	08 95       	ret
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Pin); break;
    162a:	83 b3       	in	r24, 0x13	; 19
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <M_DIO_U8_GetPinValue+0x58>
    1630:	95 95       	asr	r25
    1632:	87 95       	ror	r24
    1634:	3a 95       	dec	r19
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <M_DIO_U8_GetPinValue+0x54>
    1638:	81 70       	andi	r24, 0x01	; 1
    163a:	08 95       	ret
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Pin); break;
    163c:	80 b3       	in	r24, 0x10	; 16
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <M_DIO_U8_GetPinValue+0x6a>
    1642:	95 95       	asr	r25
    1644:	87 95       	ror	r24
    1646:	3a 95       	dec	r19
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <M_DIO_U8_GetPinValue+0x66>
    164a:	81 70       	andi	r24, 0x01	; 1
	default:                                                   break;
	}
	return Local_U8_Reading;
}
    164c:	08 95       	ret

0000164e <M_DIO_Void_SetPinPullUpRes>:
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Num,u8 Copy_U8_State)
{
    164e:	28 2f       	mov	r18, r24
    1650:	36 2f       	mov	r19, r22
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    1652:	6a e0       	ldi	r22, 0x0A	; 10
    1654:	0e 94 3c 11 	call	0x2278	; 0x2278 <__udivmodqi4>
    1658:	49 2f       	mov	r20, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
    165a:	82 2f       	mov	r24, r18
    165c:	0e 94 3c 11 	call	0x2278	; 0x2278 <__udivmodqi4>
			switch(Copy_U8_State)
    1660:	33 23       	and	r19, r19
    1662:	21 f0       	breq	.+8      	; 0x166c <M_DIO_Void_SetPinPullUpRes+0x1e>
    1664:	31 30       	cpi	r19, 0x01	; 1
    1666:	09 f0       	breq	.+2      	; 0x166a <M_DIO_Void_SetPinPullUpRes+0x1c>
    1668:	86 c0       	rjmp	.+268    	; 0x1776 <M_DIO_Void_SetPinPullUpRes+0x128>
    166a:	46 c0       	rjmp	.+140    	; 0x16f8 <M_DIO_Void_SetPinPullUpRes+0xaa>
			{
			case DISABLE :
				switch(Local_U8_Port)
    166c:	82 30       	cpi	r24, 0x02	; 2
    166e:	d1 f0       	breq	.+52     	; 0x16a4 <M_DIO_Void_SetPinPullUpRes+0x56>
    1670:	83 30       	cpi	r24, 0x03	; 3
    1672:	20 f4       	brcc	.+8      	; 0x167c <M_DIO_Void_SetPinPullUpRes+0x2e>
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	09 f0       	breq	.+2      	; 0x167a <M_DIO_Void_SetPinPullUpRes+0x2c>
    1678:	7e c0       	rjmp	.+252    	; 0x1776 <M_DIO_Void_SetPinPullUpRes+0x128>
    167a:	06 c0       	rjmp	.+12     	; 0x1688 <M_DIO_Void_SetPinPullUpRes+0x3a>
    167c:	83 30       	cpi	r24, 0x03	; 3
    167e:	01 f1       	breq	.+64     	; 0x16c0 <M_DIO_Void_SetPinPullUpRes+0x72>
    1680:	84 30       	cpi	r24, 0x04	; 4
    1682:	09 f0       	breq	.+2      	; 0x1686 <M_DIO_Void_SetPinPullUpRes+0x38>
    1684:	78 c0       	rjmp	.+240    	; 0x1776 <M_DIO_Void_SetPinPullUpRes+0x128>
    1686:	2a c0       	rjmp	.+84     	; 0x16dc <M_DIO_Void_SetPinPullUpRes+0x8e>
				{
				case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
    1688:	eb e3       	ldi	r30, 0x3B	; 59
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	20 81       	ld	r18, Z
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <M_DIO_Void_SetPinPullUpRes+0x4a>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	4a 95       	dec	r20
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <M_DIO_Void_SetPinPullUpRes+0x46>
    169c:	80 95       	com	r24
    169e:	82 23       	and	r24, r18
    16a0:	80 83       	st	Z, r24
    16a2:	08 95       	ret
				case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
    16a4:	e8 e3       	ldi	r30, 0x38	; 56
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	20 81       	ld	r18, Z
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <M_DIO_Void_SetPinPullUpRes+0x66>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	4a 95       	dec	r20
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <M_DIO_Void_SetPinPullUpRes+0x62>
    16b8:	80 95       	com	r24
    16ba:	82 23       	and	r24, r18
    16bc:	80 83       	st	Z, r24
    16be:	08 95       	ret
				case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    16c0:	e5 e3       	ldi	r30, 0x35	; 53
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	20 81       	ld	r18, Z
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <M_DIO_Void_SetPinPullUpRes+0x82>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	4a 95       	dec	r20
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <M_DIO_Void_SetPinPullUpRes+0x7e>
    16d4:	80 95       	com	r24
    16d6:	82 23       	and	r24, r18
    16d8:	80 83       	st	Z, r24
    16da:	08 95       	ret
				case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    16dc:	e2 e3       	ldi	r30, 0x32	; 50
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	20 81       	ld	r18, Z
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <M_DIO_Void_SetPinPullUpRes+0x9e>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	4a 95       	dec	r20
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <M_DIO_Void_SetPinPullUpRes+0x9a>
    16f0:	80 95       	com	r24
    16f2:	82 23       	and	r24, r18
    16f4:	80 83       	st	Z, r24
    16f6:	08 95       	ret
				default:                                 break;
				}
				break;
			case ENABLE:
				switch(Local_U8_Port)
    16f8:	82 30       	cpi	r24, 0x02	; 2
    16fa:	b9 f0       	breq	.+46     	; 0x172a <M_DIO_Void_SetPinPullUpRes+0xdc>
    16fc:	83 30       	cpi	r24, 0x03	; 3
    16fe:	18 f4       	brcc	.+6      	; 0x1706 <M_DIO_Void_SetPinPullUpRes+0xb8>
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	c9 f5       	brne	.+114    	; 0x1776 <M_DIO_Void_SetPinPullUpRes+0x128>
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <M_DIO_Void_SetPinPullUpRes+0xc2>
    1706:	83 30       	cpi	r24, 0x03	; 3
    1708:	e9 f0       	breq	.+58     	; 0x1744 <M_DIO_Void_SetPinPullUpRes+0xf6>
    170a:	84 30       	cpi	r24, 0x04	; 4
    170c:	a1 f5       	brne	.+104    	; 0x1776 <M_DIO_Void_SetPinPullUpRes+0x128>
    170e:	27 c0       	rjmp	.+78     	; 0x175e <M_DIO_Void_SetPinPullUpRes+0x110>
				{
				case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    1710:	eb e3       	ldi	r30, 0x3B	; 59
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	20 81       	ld	r18, Z
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <M_DIO_Void_SetPinPullUpRes+0xd2>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	4a 95       	dec	r20
    1722:	e2 f7       	brpl	.-8      	; 0x171c <M_DIO_Void_SetPinPullUpRes+0xce>
    1724:	28 2b       	or	r18, r24
    1726:	20 83       	st	Z, r18
    1728:	08 95       	ret
				case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    172a:	e8 e3       	ldi	r30, 0x38	; 56
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	20 81       	ld	r18, Z
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 c0       	rjmp	.+4      	; 0x173a <M_DIO_Void_SetPinPullUpRes+0xec>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	4a 95       	dec	r20
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <M_DIO_Void_SetPinPullUpRes+0xe8>
    173e:	28 2b       	or	r18, r24
    1740:	20 83       	st	Z, r18
    1742:	08 95       	ret
				case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    1744:	e5 e3       	ldi	r30, 0x35	; 53
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	20 81       	ld	r18, Z
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <M_DIO_Void_SetPinPullUpRes+0x106>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	4a 95       	dec	r20
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <M_DIO_Void_SetPinPullUpRes+0x102>
    1758:	28 2b       	or	r18, r24
    175a:	20 83       	st	Z, r18
    175c:	08 95       	ret
				case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    175e:	e2 e3       	ldi	r30, 0x32	; 50
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	20 81       	ld	r18, Z
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 c0       	rjmp	.+4      	; 0x176e <M_DIO_Void_SetPinPullUpRes+0x120>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	4a 95       	dec	r20
    1770:	e2 f7       	brpl	.-8      	; 0x176a <M_DIO_Void_SetPinPullUpRes+0x11c>
    1772:	28 2b       	or	r18, r24
    1774:	20 83       	st	Z, r18
    1776:	08 95       	ret

00001778 <M_ADC_Void_ADCInit>:


void M_ADC_Void_ADCInit(void)
{
#if   ADC_V_REF_MODE   ==   AVCC
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    1778:	e7 e2       	ldi	r30, 0x27	; 39
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	8f 77       	andi	r24, 0x7F	; 127
    1780:	80 83       	st	Z, r24
	SET_BIT(ADMUX_REG,REFS0_BIT);
    1782:	80 81       	ld	r24, Z
    1784:	80 64       	ori	r24, 0x40	; 64
    1786:	80 83       	st	Z, r24
	SET_BIT(ADMUX_REG,REFS1_BIT);
	SET_BIT(ADMUX_REG,REFS0_BIT);
#endif

	/* TO SELECT RIGHT ADDJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
    1788:	80 81       	ld	r24, Z
    178a:	8f 7d       	andi	r24, 0xDF	; 223
    178c:	80 83       	st	Z, r24

#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    178e:	e6 e2       	ldi	r30, 0x26	; 38
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	84 60       	ori	r24, 0x04	; 4
    1796:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
    1798:	80 81       	ld	r24, Z
    179a:	82 60       	ori	r24, 0x02	; 2
    179c:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
    179e:	80 81       	ld	r24, Z
    17a0:	81 60       	ori	r24, 0x01	; 1
    17a2:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	CLR_BIT(ADCSRA_REG,ADPS0_BIT);
#endif

	SET_BIT(ADCSRA_REG,ADATE_BIT);
    17a4:	80 81       	ld	r24, Z
    17a6:	80 62       	ori	r24, 0x20	; 32
    17a8:	80 83       	st	Z, r24
	/* TO ENABLE ADC CIRCUIT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    17aa:	80 81       	ld	r24, Z
    17ac:	80 68       	ori	r24, 0x80	; 128
    17ae:	80 83       	st	Z, r24
}
    17b0:	08 95       	ret

000017b2 <M_ADC_U16_ADCRead>:
u16  M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
	u32 Local_U32_Counter = 0;
	switch(Copy_U8_AdcChannel)
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	d1 f0       	breq	.+52     	; 0x17ea <M_ADC_U16_ADCRead+0x38>
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	30 f0       	brcs	.+12     	; 0x17c6 <M_ADC_U16_ADCRead+0x14>
    17ba:	82 30       	cpi	r24, 0x02	; 2
    17bc:	41 f1       	breq	.+80     	; 0x180e <M_ADC_U16_ADCRead+0x5c>
    17be:	83 30       	cpi	r24, 0x03	; 3
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <M_ADC_U16_ADCRead+0x12>
    17c2:	48 c0       	rjmp	.+144    	; 0x1854 <M_ADC_U16_ADCRead+0xa2>
    17c4:	36 c0       	rjmp	.+108    	; 0x1832 <M_ADC_U16_ADCRead+0x80>
	{
	case ADC_CHANNEL_0:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    17c6:	e7 e2       	ldi	r30, 0x27	; 39
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	8f 7e       	andi	r24, 0xEF	; 239
    17ce:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    17d0:	80 81       	ld	r24, Z
    17d2:	87 7f       	andi	r24, 0xF7	; 247
    17d4:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    17d6:	80 81       	ld	r24, Z
    17d8:	8b 7f       	andi	r24, 0xFB	; 251
    17da:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX1_BIT);
    17dc:	80 81       	ld	r24, Z
    17de:	8d 7f       	andi	r24, 0xFD	; 253
    17e0:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    17e2:	80 81       	ld	r24, Z
    17e4:	8e 7f       	andi	r24, 0xFE	; 254
    17e6:	80 83       	st	Z, r24
    17e8:	35 c0       	rjmp	.+106    	; 0x1854 <M_ADC_U16_ADCRead+0xa2>
		break;
	case ADC_CHANNEL_1:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    17ea:	e7 e2       	ldi	r30, 0x27	; 39
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	8f 7e       	andi	r24, 0xEF	; 239
    17f2:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    17f4:	80 81       	ld	r24, Z
    17f6:	87 7f       	andi	r24, 0xF7	; 247
    17f8:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    17fa:	80 81       	ld	r24, Z
    17fc:	8b 7f       	andi	r24, 0xFB	; 251
    17fe:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX1_BIT);
    1800:	80 81       	ld	r24, Z
    1802:	8d 7f       	andi	r24, 0xFD	; 253
    1804:	80 83       	st	Z, r24
		SET_BIT(ADMUX_REG,MUX0_BIT);
    1806:	80 81       	ld	r24, Z
    1808:	81 60       	ori	r24, 0x01	; 1
    180a:	80 83       	st	Z, r24
    180c:	23 c0       	rjmp	.+70     	; 0x1854 <M_ADC_U16_ADCRead+0xa2>
		break;
	case ADC_CHANNEL_2:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    180e:	e7 e2       	ldi	r30, 0x27	; 39
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	8f 7e       	andi	r24, 0xEF	; 239
    1816:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    1818:	80 81       	ld	r24, Z
    181a:	87 7f       	andi	r24, 0xF7	; 247
    181c:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    181e:	80 81       	ld	r24, Z
    1820:	8b 7f       	andi	r24, 0xFB	; 251
    1822:	80 83       	st	Z, r24
		SET_BIT(ADMUX_REG,MUX1_BIT);
    1824:	80 81       	ld	r24, Z
    1826:	82 60       	ori	r24, 0x02	; 2
    1828:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    182a:	80 81       	ld	r24, Z
    182c:	8e 7f       	andi	r24, 0xFE	; 254
    182e:	80 83       	st	Z, r24
    1830:	11 c0       	rjmp	.+34     	; 0x1854 <M_ADC_U16_ADCRead+0xa2>
		break;
	case ADC_CHANNEL_3:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    1832:	e7 e2       	ldi	r30, 0x27	; 39
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	8f 7e       	andi	r24, 0xEF	; 239
    183a:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    183c:	80 81       	ld	r24, Z
    183e:	87 7f       	andi	r24, 0xF7	; 247
    1840:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    1842:	80 81       	ld	r24, Z
    1844:	8b 7f       	andi	r24, 0xFB	; 251
    1846:	80 83       	st	Z, r24
		SET_BIT(ADMUX_REG,MUX1_BIT);
    1848:	80 81       	ld	r24, Z
    184a:	82 60       	ori	r24, 0x02	; 2
    184c:	80 83       	st	Z, r24
		SET_BIT(ADMUX_REG,MUX0_BIT);
    184e:	80 81       	ld	r24, Z
    1850:	81 60       	ori	r24, 0x01	; 1
    1852:	80 83       	st	Z, r24
		break;
	default:  break;
	}
	/* TO START CONVERTION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
    1854:	e6 e2       	ldi	r30, 0x26	; 38
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	80 64       	ori	r24, 0x40	; 64
    185c:	80 83       	st	Z, r24
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	50 e0       	ldi	r21, 0x00	; 0

	while(Local_U32_Counter < POLLING_TIME)
	{
		Local_U32_Counter++;
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE)
    1866:	80 81       	ld	r24, Z
    1868:	84 fd       	sbrc	r24, 4
    186a:	0c c0       	rjmp	.+24     	; 0x1884 <M_ADC_U16_ADCRead+0xd2>
	/* TO START CONVERTION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);

	while(Local_U32_Counter < POLLING_TIME)
	{
		Local_U32_Counter++;
    186c:	2f 5f       	subi	r18, 0xFF	; 255
    186e:	3f 4f       	sbci	r19, 0xFF	; 255
    1870:	4f 4f       	sbci	r20, 0xFF	; 255
    1872:	5f 4f       	sbci	r21, 0xFF	; 255
	default:  break;
	}
	/* TO START CONVERTION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);

	while(Local_U32_Counter < POLLING_TIME)
    1874:	20 30       	cpi	r18, 0x00	; 0
    1876:	8d e2       	ldi	r24, 0x2D	; 45
    1878:	38 07       	cpc	r19, r24
    187a:	81 e3       	ldi	r24, 0x31	; 49
    187c:	48 07       	cpc	r20, r24
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	58 07       	cpc	r21, r24
    1882:	89 f7       	brne	.-30     	; 0x1866 <M_ADC_U16_ADCRead+0xb4>
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE)
		{
			break;
		}
	}
	return ADCL_REG;
    1884:	24 b1       	in	r18, 0x04	; 4
    1886:	35 b1       	in	r19, 0x05	; 5
}
    1888:	82 2f       	mov	r24, r18
    188a:	93 2f       	mov	r25, r19
    188c:	08 95       	ret

0000188e <H_Servo_Void_ServoSetStop>:
{
	M_Timer_Void_PWMStart(TIMER1_CHANNEL);
}
void H_Servo_Void_ServoSetStop(void)
{
M_Timer_Void_PWMStart(TIMER1_CHANNEL);
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_Timer_Void_PWMStart>
}
    1894:	08 95       	ret

00001896 <H_Servo_Void_ServoSetStart>:
	f32 Local_F32_Value = ((Copy_U8_Angel * 5.0 ) / 180.0) + 5.0;
	M_Timer_Void_PWMSetDutyCycle(TIMER1_CHANNEL,Local_F32_Value);
}
void H_Servo_Void_ServoSetStart(void)
{
	M_Timer_Void_PWMStart(TIMER1_CHANNEL);
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_Timer_Void_PWMStart>
}
    189c:	08 95       	ret

0000189e <H_Servo_Void_ServoSetAngel>:
	M_Timer_Void_PWMSetFreaquancy(50);
}
void H_Servo_Void_ServoSetAngel(u8 Copy_U8_Angel)
{
	f32 Local_F32_Value = ((Copy_U8_Angel * 5.0 ) / 180.0) + 5.0;
	M_Timer_Void_PWMSetDutyCycle(TIMER1_CHANNEL,Local_F32_Value);
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	aa 27       	eor	r26, r26
    18a2:	97 fd       	sbrc	r25, 7
    18a4:	a0 95       	com	r26
    18a6:	ba 2f       	mov	r27, r26
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 ea       	ldi	r20, 0xA0	; 160
    18b6:	50 e4       	ldi	r21, 0x40	; 64
    18b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	44 e3       	ldi	r20, 0x34	; 52
    18c2:	53 e4       	ldi	r21, 0x43	; 67
    18c4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 ea       	ldi	r20, 0xA0	; 160
    18ce:	50 e4       	ldi	r21, 0x40	; 64
    18d0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    18d4:	ab 01       	movw	r20, r22
    18d6:	bc 01       	movw	r22, r24
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	0e 94 1b 08 	call	0x1036	; 0x1036 <M_Timer_Void_PWMSetDutyCycle>
}
    18de:	08 95       	ret

000018e0 <H_Servo_Void_ServoInit>:

#include "Servo_Interface.h"

void H_Servo_Void_ServoInit(void)
{
	M_Timer_Void_PWMInit(TIMER1_CHANNEL);
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	0e 94 cf 08 	call	0x119e	; 0x119e <M_Timer_Void_PWMInit>
	M_Timer_Void_PWMSetFreaquancy(50);
    18e6:	82 e3       	ldi	r24, 0x32	; 50
    18e8:	0e 94 57 08 	call	0x10ae	; 0x10ae <M_Timer_Void_PWMSetFreaquancy>
}
    18ec:	08 95       	ret

000018ee <H_SSD_Void_SSDDigitDisplay>:
	}
}

static void H_SSD_Void_SSDDigitDisplay(u8 Copy_U8_Number)
{
	switch(Copy_U8_Number)
    18ee:	84 30       	cpi	r24, 0x04	; 4
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <H_SSD_Void_SSDDigitDisplay+0x6>
    18f2:	63 c0       	rjmp	.+198    	; 0x19ba <H_SSD_Void_SSDDigitDisplay+0xcc>
    18f4:	85 30       	cpi	r24, 0x05	; 5
    18f6:	50 f4       	brcc	.+20     	; 0x190c <H_SSD_Void_SSDDigitDisplay+0x1e>
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	61 f1       	breq	.+88     	; 0x1954 <H_SSD_Void_SSDDigitDisplay+0x66>
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	c8 f0       	brcs	.+50     	; 0x1932 <H_SSD_Void_SSDDigitDisplay+0x44>
    1900:	82 30       	cpi	r24, 0x02	; 2
    1902:	c9 f1       	breq	.+114    	; 0x1976 <H_SSD_Void_SSDDigitDisplay+0x88>
    1904:	83 30       	cpi	r24, 0x03	; 3
    1906:	09 f0       	breq	.+2      	; 0x190a <H_SSD_Void_SSDDigitDisplay+0x1c>
    1908:	bd c0       	rjmp	.+378    	; 0x1a84 <H_SSD_Void_SSDDigitDisplay+0x196>
    190a:	46 c0       	rjmp	.+140    	; 0x1998 <H_SSD_Void_SSDDigitDisplay+0xaa>
    190c:	87 30       	cpi	r24, 0x07	; 7
    190e:	09 f4       	brne	.+2      	; 0x1912 <H_SSD_Void_SSDDigitDisplay+0x24>
    1910:	87 c0       	rjmp	.+270    	; 0x1a20 <H_SSD_Void_SSDDigitDisplay+0x132>
    1912:	88 30       	cpi	r24, 0x08	; 8
    1914:	38 f4       	brcc	.+14     	; 0x1924 <H_SSD_Void_SSDDigitDisplay+0x36>
    1916:	85 30       	cpi	r24, 0x05	; 5
    1918:	09 f4       	brne	.+2      	; 0x191c <H_SSD_Void_SSDDigitDisplay+0x2e>
    191a:	60 c0       	rjmp	.+192    	; 0x19dc <H_SSD_Void_SSDDigitDisplay+0xee>
    191c:	86 30       	cpi	r24, 0x06	; 6
    191e:	09 f0       	breq	.+2      	; 0x1922 <H_SSD_Void_SSDDigitDisplay+0x34>
    1920:	b1 c0       	rjmp	.+354    	; 0x1a84 <H_SSD_Void_SSDDigitDisplay+0x196>
    1922:	6d c0       	rjmp	.+218    	; 0x19fe <H_SSD_Void_SSDDigitDisplay+0x110>
    1924:	88 30       	cpi	r24, 0x08	; 8
    1926:	09 f4       	brne	.+2      	; 0x192a <H_SSD_Void_SSDDigitDisplay+0x3c>
    1928:	8c c0       	rjmp	.+280    	; 0x1a42 <H_SSD_Void_SSDDigitDisplay+0x154>
    192a:	89 30       	cpi	r24, 0x09	; 9
    192c:	09 f0       	breq	.+2      	; 0x1930 <H_SSD_Void_SSDDigitDisplay+0x42>
    192e:	aa c0       	rjmp	.+340    	; 0x1a84 <H_SSD_Void_SSDDigitDisplay+0x196>
    1930:	99 c0       	rjmp	.+306    	; 0x1a64 <H_SSD_Void_SSDDigitDisplay+0x176>
	{
	case 0:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    1932:	8e e0       	ldi	r24, 0x0E	; 14
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    193a:	8f e0       	ldi	r24, 0x0F	; 15
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1942:	80 e1       	ldi	r24, 0x10	; 16
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    194a:	81 e1       	ldi	r24, 0x11	; 17
    194c:	60 e0       	ldi	r22, 0x00	; 0
    194e:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1952:	08 95       	ret
		break;
	case 1:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    1954:	8e e0       	ldi	r24, 0x0E	; 14
    1956:	61 e0       	ldi	r22, 0x01	; 1
    1958:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    195c:	8f e0       	ldi	r24, 0x0F	; 15
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1964:	80 e1       	ldi	r24, 0x10	; 16
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    196c:	81 e1       	ldi	r24, 0x11	; 17
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1974:	08 95       	ret
		break;
	case 2:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    1976:	8e e0       	ldi	r24, 0x0E	; 14
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
    197e:	8f e0       	ldi	r24, 0x0F	; 15
    1980:	61 e0       	ldi	r22, 0x01	; 1
    1982:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1986:	80 e1       	ldi	r24, 0x10	; 16
    1988:	60 e0       	ldi	r22, 0x00	; 0
    198a:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    198e:	81 e1       	ldi	r24, 0x11	; 17
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1996:	08 95       	ret
		break;
	case 3:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    1998:	8e e0       	ldi	r24, 0x0E	; 14
    199a:	61 e0       	ldi	r22, 0x01	; 1
    199c:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
    19a0:	8f e0       	ldi	r24, 0x0F	; 15
    19a2:	61 e0       	ldi	r22, 0x01	; 1
    19a4:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    19a8:	80 e1       	ldi	r24, 0x10	; 16
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    19b0:	81 e1       	ldi	r24, 0x11	; 17
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    19b8:	08 95       	ret
		break;
	case 4:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    19ba:	8e e0       	ldi	r24, 0x0E	; 14
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    19c2:	8f e0       	ldi	r24, 0x0F	; 15
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
    19ca:	80 e1       	ldi	r24, 0x10	; 16
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    19d2:	81 e1       	ldi	r24, 0x11	; 17
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    19da:	08 95       	ret
		break;
	case 5:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    19dc:	8e e0       	ldi	r24, 0x0E	; 14
    19de:	61 e0       	ldi	r22, 0x01	; 1
    19e0:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    19e4:	8f e0       	ldi	r24, 0x0F	; 15
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
    19ec:	80 e1       	ldi	r24, 0x10	; 16
    19ee:	61 e0       	ldi	r22, 0x01	; 1
    19f0:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    19f4:	81 e1       	ldi	r24, 0x11	; 17
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    19fc:	08 95       	ret
		break;
	case 6:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    19fe:	8e e0       	ldi	r24, 0x0E	; 14
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
    1a06:	8f e0       	ldi	r24, 0x0F	; 15
    1a08:	61 e0       	ldi	r22, 0x01	; 1
    1a0a:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
    1a0e:	80 e1       	ldi	r24, 0x10	; 16
    1a10:	61 e0       	ldi	r22, 0x01	; 1
    1a12:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1a16:	81 e1       	ldi	r24, 0x11	; 17
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1a1e:	08 95       	ret
		break;
	case 7:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    1a20:	8e e0       	ldi	r24, 0x0E	; 14
    1a22:	61 e0       	ldi	r22, 0x01	; 1
    1a24:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
    1a28:	8f e0       	ldi	r24, 0x0F	; 15
    1a2a:	61 e0       	ldi	r22, 0x01	; 1
    1a2c:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
    1a30:	80 e1       	ldi	r24, 0x10	; 16
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1a38:	81 e1       	ldi	r24, 0x11	; 17
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1a40:	08 95       	ret
		break;
	case 8:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    1a42:	8e e0       	ldi	r24, 0x0E	; 14
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    1a4a:	8f e0       	ldi	r24, 0x0F	; 15
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1a52:	80 e1       	ldi	r24, 0x10	; 16
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,HIGH);
    1a5a:	81 e1       	ldi	r24, 0x11	; 17
    1a5c:	61 e0       	ldi	r22, 0x01	; 1
    1a5e:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1a62:	08 95       	ret
		break;
	case 9:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    1a64:	8e e0       	ldi	r24, 0x0E	; 14
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    1a6c:	8f e0       	ldi	r24, 0x0F	; 15
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1a74:	80 e1       	ldi	r24, 0x10	; 16
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,HIGH);
    1a7c:	81 e1       	ldi	r24, 0x11	; 17
    1a7e:	61 e0       	ldi	r22, 0x01	; 1
    1a80:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1a84:	08 95       	ret

00001a86 <H_SSD_Void_SSDWriteNumber>:

	M_DIO_Void_SetPinDirection(SSD_EN1_PIN,OUTPUT);
	M_DIO_Void_SetPinDirection(SSD_EN2_PIN,OUTPUT);
}
void H_SSD_Void_SSDWriteNumber(u8 Copy_U8_Number)
{
    1a86:	ef 92       	push	r14
    1a88:	ff 92       	push	r15
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	cf 93       	push	r28
    1a90:	df 93       	push	r29
    1a92:	28 2f       	mov	r18, r24
	u32 Local_U32_Counter = 0;
	for(;Local_U32_Counter < 500;Local_U32_Counter++)
	{
	u8 Local_U8_Ones = Copy_U8_Number % 10;
    1a94:	6a e0       	ldi	r22, 0x0A	; 10
    1a96:	0e 94 3c 11 	call	0x2278	; 0x2278 <__udivmodqi4>
    1a9a:	e9 2e       	mov	r14, r25
	u8 Local_U8_Tens = Copy_U8_Number / 10;
    1a9c:	82 2f       	mov	r24, r18
    1a9e:	0e 94 3c 11 	call	0x2278	; 0x2278 <__udivmodqi4>
    1aa2:	f8 2e       	mov	r15, r24
    1aa4:	c0 e0       	ldi	r28, 0x00	; 0
    1aa6:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aa8:	00 ea       	ldi	r16, 0xA0	; 160
    1aaa:	1f e0       	ldi	r17, 0x0F	; 15
	H_SSD_Void_SSDDigitDisplay(Local_U8_Tens);
    1aac:	8f 2d       	mov	r24, r15
    1aae:	0e 94 77 0c 	call	0x18ee	; 0x18ee <H_SSD_Void_SSDDigitDisplay>
	M_DIO_Void_SetPinValue(SSD_EN2_PIN,HIGH);
    1ab2:	86 e1       	ldi	r24, 0x16	; 22
    1ab4:	61 e0       	ldi	r22, 0x01	; 1
    1ab6:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1aba:	c8 01       	movw	r24, r16
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <H_SSD_Void_SSDWriteNumber+0x36>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(SSD_EN2_PIN,LOW);
    1ac0:	86 e1       	ldi	r24, 0x16	; 22
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
	H_SSD_Void_SSDDigitDisplay(Local_U8_Ones);
    1ac8:	8e 2d       	mov	r24, r14
    1aca:	0e 94 77 0c 	call	0x18ee	; 0x18ee <H_SSD_Void_SSDDigitDisplay>
	M_DIO_Void_SetPinValue(SSD_EN1_PIN,HIGH);
    1ace:	85 e1       	ldi	r24, 0x15	; 21
    1ad0:	61 e0       	ldi	r22, 0x01	; 1
    1ad2:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <H_SSD_Void_SSDWriteNumber+0x52>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(SSD_EN1_PIN,LOW);
    1adc:	85 e1       	ldi	r24, 0x15	; 21
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1ae4:	21 96       	adiw	r28, 0x01	; 1
	M_DIO_Void_SetPinDirection(SSD_EN2_PIN,OUTPUT);
}
void H_SSD_Void_SSDWriteNumber(u8 Copy_U8_Number)
{
	u32 Local_U32_Counter = 0;
	for(;Local_U32_Counter < 500;Local_U32_Counter++)
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	c4 3f       	cpi	r28, 0xF4	; 244
    1aea:	d8 07       	cpc	r29, r24
    1aec:	f9 f6       	brne	.-66     	; 0x1aac <H_SSD_Void_SSDWriteNumber+0x26>
	H_SSD_Void_SSDDigitDisplay(Local_U8_Ones);
	M_DIO_Void_SetPinValue(SSD_EN1_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(SSD_EN1_PIN,LOW);
	}
}
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	1f 91       	pop	r17
    1af4:	0f 91       	pop	r16
    1af6:	ff 90       	pop	r15
    1af8:	ef 90       	pop	r14
    1afa:	08 95       	ret

00001afc <H_SSD_Void_SSDInit>:
#include "SSD_Interface.h"
#include "SSD_Private.h"

void H_SSD_Void_SSDInit(void)
{
	M_DIO_Void_SetPinDirection(SSD_A_PIN,OUTPUT);
    1afc:	8e e0       	ldi	r24, 0x0E	; 14
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_B_PIN,OUTPUT);
    1b04:	8f e0       	ldi	r24, 0x0F	; 15
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_C_PIN,OUTPUT);
    1b0c:	80 e1       	ldi	r24, 0x10	; 16
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_D_PIN,OUTPUT);
    1b14:	81 e1       	ldi	r24, 0x11	; 17
    1b16:	61 e0       	ldi	r22, 0x01	; 1
    1b18:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinDirection(SSD_EN1_PIN,OUTPUT);
    1b1c:	85 e1       	ldi	r24, 0x15	; 21
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_EN2_PIN,OUTPUT);
    1b24:	86 e1       	ldi	r24, 0x16	; 22
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
}
    1b2c:	08 95       	ret

00001b2e <H_PB_U8_PBRead>:

}
u8   H_PB_U8_PBRead(u8 Copy_U8_PushButton)
{
	u8 Local_U8_Reading = RELEASED;
	switch (Copy_U8_PushButton)
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	11 f1       	breq	.+68     	; 0x1b76 <H_PB_U8_PBRead+0x48>
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	20 f0       	brcs	.+8      	; 0x1b3e <H_PB_U8_PBRead+0x10>
    1b36:	82 30       	cpi	r24, 0x02	; 2
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <H_PB_U8_PBRead+0xe>
    1b3a:	51 c0       	rjmp	.+162    	; 0x1bde <H_PB_U8_PBRead+0xb0>
    1b3c:	36 c0       	rjmp	.+108    	; 0x1baa <H_PB_U8_PBRead+0x7c>
	{
	case PB0 :
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED)
    1b3e:	84 e1       	ldi	r24, 0x14	; 20
    1b40:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_U8_GetPinValue>
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <H_PB_U8_PBRead+0x1c>
    1b48:	4a c0       	rjmp	.+148    	; 0x1bde <H_PB_U8_PBRead+0xb0>
    1b4a:	24 e1       	ldi	r18, 0x14	; 20
    1b4c:	35 e0       	ldi	r19, 0x05	; 5
    1b4e:	40 e9       	ldi	r20, 0x90	; 144
    1b50:	51 e0       	ldi	r21, 0x01	; 1
    1b52:	ca 01       	movw	r24, r20
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <H_PB_U8_PBRead+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b58:	21 50       	subi	r18, 0x01	; 1
    1b5a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	d1 f7       	brne	.-12     	; 0x1b52 <H_PB_U8_PBRead+0x24>
		{
			_delay_ms(PB_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED)
    1b5e:	84 e1       	ldi	r24, 0x14	; 20
    1b60:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_U8_GetPinValue>
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <H_PB_U8_PBRead+0x3c>
    1b68:	3a c0       	rjmp	.+116    	; 0x1bde <H_PB_U8_PBRead+0xb0>
			{
				while(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED);
    1b6a:	84 e1       	ldi	r24, 0x14	; 20
    1b6c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_U8_GetPinValue>
    1b70:	81 30       	cpi	r24, 0x01	; 1
    1b72:	d9 f3       	breq	.-10     	; 0x1b6a <H_PB_U8_PBRead+0x3c>
    1b74:	36 c0       	rjmp	.+108    	; 0x1be2 <H_PB_U8_PBRead+0xb4>
				Local_U8_Reading = PRESSED;
			}
		}
		break;
	case PB1 :
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED)
    1b76:	8e e2       	ldi	r24, 0x2E	; 46
    1b78:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_U8_GetPinValue>
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	79 f5       	brne	.+94     	; 0x1bde <H_PB_U8_PBRead+0xb0>
    1b80:	24 e1       	ldi	r18, 0x14	; 20
    1b82:	35 e0       	ldi	r19, 0x05	; 5
    1b84:	40 e9       	ldi	r20, 0x90	; 144
    1b86:	51 e0       	ldi	r21, 0x01	; 1
    1b88:	ca 01       	movw	r24, r20
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <H_PB_U8_PBRead+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8e:	21 50       	subi	r18, 0x01	; 1
    1b90:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b92:	d1 f7       	brne	.-12     	; 0x1b88 <H_PB_U8_PBRead+0x5a>
		{
			_delay_ms(PB_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED)
    1b94:	8e e2       	ldi	r24, 0x2E	; 46
    1b96:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_U8_GetPinValue>
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	01 f5       	brne	.+64     	; 0x1bde <H_PB_U8_PBRead+0xb0>
			{
				while(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED);
    1b9e:	8e e2       	ldi	r24, 0x2E	; 46
    1ba0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_U8_GetPinValue>
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	d9 f3       	breq	.-10     	; 0x1b9e <H_PB_U8_PBRead+0x70>
    1ba8:	1c c0       	rjmp	.+56     	; 0x1be2 <H_PB_U8_PBRead+0xb4>
				Local_U8_Reading = PRESSED;
			}
		}
		break;
	case PB2 :
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED)
    1baa:	8a e2       	ldi	r24, 0x2A	; 42
    1bac:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_U8_GetPinValue>
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	a9 f4       	brne	.+42     	; 0x1bde <H_PB_U8_PBRead+0xb0>
    1bb4:	24 e1       	ldi	r18, 0x14	; 20
    1bb6:	35 e0       	ldi	r19, 0x05	; 5
    1bb8:	40 e9       	ldi	r20, 0x90	; 144
    1bba:	51 e0       	ldi	r21, 0x01	; 1
    1bbc:	ca 01       	movw	r24, r20
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <H_PB_U8_PBRead+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc2:	21 50       	subi	r18, 0x01	; 1
    1bc4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc6:	d1 f7       	brne	.-12     	; 0x1bbc <H_PB_U8_PBRead+0x8e>
		{
			_delay_ms(PB_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED)
    1bc8:	8a e2       	ldi	r24, 0x2A	; 42
    1bca:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_U8_GetPinValue>
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	31 f4       	brne	.+12     	; 0x1bde <H_PB_U8_PBRead+0xb0>
			{
				while(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED);
    1bd2:	8a e2       	ldi	r24, 0x2A	; 42
    1bd4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_U8_GetPinValue>
    1bd8:	81 30       	cpi	r24, 0x01	; 1
    1bda:	d9 f3       	breq	.-10     	; 0x1bd2 <H_PB_U8_PBRead+0xa4>
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <H_PB_U8_PBRead+0xb4>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	08 95       	ret
    1be2:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
	default  :                                                     break;
	}
	return Local_U8_Reading;
}
    1be4:	08 95       	ret

00001be6 <H_PB_Void_PBInit>:
#include "PB_Interface.h"


void H_PB_Void_PBInit(u8 Copy_U8_PushButton)
{
	switch (Copy_U8_PushButton)
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	51 f0       	breq	.+20     	; 0x1bfe <H_PB_Void_PBInit+0x18>
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	18 f0       	brcs	.+6      	; 0x1bf4 <H_PB_Void_PBInit+0xe>
    1bee:	82 30       	cpi	r24, 0x02	; 2
    1bf0:	79 f4       	brne	.+30     	; 0x1c10 <H_PB_Void_PBInit+0x2a>
    1bf2:	0a c0       	rjmp	.+20     	; 0x1c08 <H_PB_Void_PBInit+0x22>
	{
	case PB0 : M_DIO_Void_SetPinDirection(PUSH_BUTTON0_PIN,INPUT); break;
    1bf4:	84 e1       	ldi	r24, 0x14	; 20
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
    1bfc:	08 95       	ret
	case PB1 : M_DIO_Void_SetPinDirection(PUSH_BUTTON0_PIN,INPUT); break;
    1bfe:	84 e1       	ldi	r24, 0x14	; 20
    1c00:	60 e0       	ldi	r22, 0x00	; 0
    1c02:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
    1c06:	08 95       	ret
	case PB2 : M_DIO_Void_SetPinDirection(PUSH_BUTTON0_PIN,INPUT); break;
    1c08:	84 e1       	ldi	r24, 0x14	; 20
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
    1c10:	08 95       	ret

00001c12 <H_LM35_Void_LM35Read>:
{
	M_ADC_Void_ADCInit();
}
u16  H_LM35_Void_LM35Read(void)
{
	 u16 Local_U16_AdcValue = M_ADC_U16_ADCRead(LM35_PIN);
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <M_ADC_U16_ADCRead>
    1c18:	a0 e0       	ldi	r26, 0x00	; 0
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	bc 01       	movw	r22, r24
    1c1e:	cd 01       	movw	r24, r26
    1c20:	24 ef       	ldi	r18, 0xF4	; 244
    1c22:	31 e0       	ldi	r19, 0x01	; 1
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	0e 94 1d 11 	call	0x223a	; 0x223a <__mulsi3>
    1c2c:	2f ef       	ldi	r18, 0xFF	; 255
    1c2e:	33 e0       	ldi	r19, 0x03	; 3
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	0e 94 48 11 	call	0x2290	; 0x2290 <__udivmodsi4>
    1c38:	82 2f       	mov	r24, r18
    1c3a:	93 2f       	mov	r25, r19
	 u16 temp               = ((u32)Local_U16_AdcValue * 500) / 1023;
	 return temp;
}
    1c3c:	08 95       	ret

00001c3e <H_LM35_Void_LM35Init>:

#include "LM35_Interface.h"

void H_LM35_Void_LM35Init(void)
{
	M_ADC_Void_ADCInit();
    1c3e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <M_ADC_Void_ADCInit>
}
    1c42:	08 95       	ret

00001c44 <H_LED_Void_LedTog>:
	default:                                         break;
	}
}
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	49 f0       	breq	.+18     	; 0x1c5a <H_LED_Void_LedTog+0x16>
    1c48:	81 30       	cpi	r24, 0x01	; 1
    1c4a:	18 f0       	brcs	.+6      	; 0x1c52 <H_LED_Void_LedTog+0xe>
    1c4c:	82 30       	cpi	r24, 0x02	; 2
    1c4e:	61 f4       	brne	.+24     	; 0x1c68 <H_LED_Void_LedTog+0x24>
    1c50:	08 c0       	rjmp	.+16     	; 0x1c62 <H_LED_Void_LedTog+0x1e>
	{
	case LED0: M_DIO_Void_TogPin(LED0_PIN); break;
    1c52:	80 e2       	ldi	r24, 0x20	; 32
    1c54:	0e 94 a6 0a 	call	0x154c	; 0x154c <M_DIO_Void_TogPin>
    1c58:	08 95       	ret
	case LED1: M_DIO_Void_TogPin(LED1_PIN); break;
    1c5a:	85 e2       	ldi	r24, 0x25	; 37
    1c5c:	0e 94 a6 0a 	call	0x154c	; 0x154c <M_DIO_Void_TogPin>
    1c60:	08 95       	ret
	case LED2: M_DIO_Void_TogPin(LED2_PIN); break;
    1c62:	8b e2       	ldi	r24, 0x2B	; 43
    1c64:	0e 94 a6 0a 	call	0x154c	; 0x154c <M_DIO_Void_TogPin>
    1c68:	08 95       	ret

00001c6a <H_LED_Void_LedSetOff>:
	default:                                          break;
	}
}
void H_LED_Void_LedSetOff(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	51 f0       	breq	.+20     	; 0x1c82 <H_LED_Void_LedSetOff+0x18>
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	18 f0       	brcs	.+6      	; 0x1c78 <H_LED_Void_LedSetOff+0xe>
    1c72:	82 30       	cpi	r24, 0x02	; 2
    1c74:	79 f4       	brne	.+30     	; 0x1c94 <H_LED_Void_LedSetOff+0x2a>
    1c76:	0a c0       	rjmp	.+20     	; 0x1c8c <H_LED_Void_LedSetOff+0x22>
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,LOW); break;
    1c78:	80 e2       	ldi	r24, 0x20	; 32
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1c80:	08 95       	ret
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,LOW); break;
    1c82:	85 e2       	ldi	r24, 0x25	; 37
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1c8a:	08 95       	ret
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,LOW); break;
    1c8c:	8b e2       	ldi	r24, 0x2B	; 43
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1c94:	08 95       	ret

00001c96 <H_LED_Void_LedSetOn>:
	default:                                                break;
	}
}
void H_LED_Void_LedSetOn(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	51 f0       	breq	.+20     	; 0x1cae <H_LED_Void_LedSetOn+0x18>
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	18 f0       	brcs	.+6      	; 0x1ca4 <H_LED_Void_LedSetOn+0xe>
    1c9e:	82 30       	cpi	r24, 0x02	; 2
    1ca0:	79 f4       	brne	.+30     	; 0x1cc0 <H_LED_Void_LedSetOn+0x2a>
    1ca2:	0a c0       	rjmp	.+20     	; 0x1cb8 <H_LED_Void_LedSetOn+0x22>
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,HIGH); break;
    1ca4:	80 e2       	ldi	r24, 0x20	; 32
    1ca6:	61 e0       	ldi	r22, 0x01	; 1
    1ca8:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1cac:	08 95       	ret
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,HIGH); break;
    1cae:	85 e2       	ldi	r24, 0x25	; 37
    1cb0:	61 e0       	ldi	r22, 0x01	; 1
    1cb2:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1cb6:	08 95       	ret
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,HIGH); break;
    1cb8:	8b e2       	ldi	r24, 0x2B	; 43
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1cc0:	08 95       	ret

00001cc2 <H_LED_Void_LedInit>:
#include "LED_Interface.h"


void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	51 f0       	breq	.+20     	; 0x1cda <H_LED_Void_LedInit+0x18>
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	18 f0       	brcs	.+6      	; 0x1cd0 <H_LED_Void_LedInit+0xe>
    1cca:	82 30       	cpi	r24, 0x02	; 2
    1ccc:	79 f4       	brne	.+30     	; 0x1cec <H_LED_Void_LedInit+0x2a>
    1cce:	0a c0       	rjmp	.+20     	; 0x1ce4 <H_LED_Void_LedInit+0x22>
	{
	case LED0: M_DIO_Void_SetPinDirection(LED0_PIN,OUTPUT); break;
    1cd0:	80 e2       	ldi	r24, 0x20	; 32
    1cd2:	61 e0       	ldi	r22, 0x01	; 1
    1cd4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
    1cd8:	08 95       	ret
	case LED1: M_DIO_Void_SetPinDirection(LED1_PIN,OUTPUT); break;
    1cda:	85 e2       	ldi	r24, 0x25	; 37
    1cdc:	61 e0       	ldi	r22, 0x01	; 1
    1cde:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
    1ce2:	08 95       	ret
	case LED2: M_DIO_Void_SetPinDirection(LED2_PIN,OUTPUT); break;
    1ce4:	8b e2       	ldi	r24, 0x2B	; 43
    1ce6:	61 e0       	ldi	r22, 0x01	; 1
    1ce8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
    1cec:	08 95       	ret

00001cee <H_LCD_Void_SetLCDPins>:
{
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
}

static void H_LCD_Void_SetLCDPins(u8 Copy_U8_Pins)
{
    1cee:	1f 93       	push	r17
    1cf0:	18 2f       	mov	r17, r24
	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 4 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 5 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 6 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 7 & 0x01);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 0 & 0x01);
    1cf2:	68 2f       	mov	r22, r24
    1cf4:	61 70       	andi	r22, 0x01	; 1
    1cf6:	8e e0       	ldi	r24, 0x0E	; 14
    1cf8:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 1 & 0x01);
    1cfc:	61 2f       	mov	r22, r17
    1cfe:	66 95       	lsr	r22
    1d00:	61 70       	andi	r22, 0x01	; 1
    1d02:	8f e0       	ldi	r24, 0x0F	; 15
    1d04:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 2 & 0x01);
    1d08:	61 2f       	mov	r22, r17
    1d0a:	66 95       	lsr	r22
    1d0c:	66 95       	lsr	r22
    1d0e:	61 70       	andi	r22, 0x01	; 1
    1d10:	80 e1       	ldi	r24, 0x10	; 16
    1d12:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 3 & 0x01);
    1d16:	16 95       	lsr	r17
    1d18:	16 95       	lsr	r17
    1d1a:	16 95       	lsr	r17
    1d1c:	11 70       	andi	r17, 0x01	; 1
    1d1e:	81 e1       	ldi	r24, 0x11	; 17
    1d20:	61 2f       	mov	r22, r17
    1d22:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
#endif
}
    1d26:	1f 91       	pop	r17
    1d28:	08 95       	ret

00001d2a <H_LCD_Void_LCDWriteCommand>:
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#endif
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    1d2a:	ff 92       	push	r15
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	f8 2e       	mov	r15, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    1d32:	85 e1       	ldi	r24, 0x15	; 21
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Command >> 4);
    1d3a:	8f 2d       	mov	r24, r15
    1d3c:	82 95       	swap	r24
    1d3e:	8f 70       	andi	r24, 0x0F	; 15
    1d40:	0e 94 77 0e 	call	0x1cee	; 0x1cee <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1d44:	87 e1       	ldi	r24, 0x17	; 23
    1d46:	61 e0       	ldi	r22, 0x01	; 1
    1d48:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1d4c:	00 ea       	ldi	r16, 0xA0	; 160
    1d4e:	1f e0       	ldi	r17, 0x0F	; 15
    1d50:	c8 01       	movw	r24, r16
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <H_LCD_Void_LCDWriteCommand+0x28>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1d56:	87 e1       	ldi	r24, 0x17	; 23
    1d58:	60 e0       	ldi	r22, 0x00	; 0
    1d5a:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1d5e:	c8 01       	movw	r24, r16
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <H_LCD_Void_LCDWriteCommand+0x36>
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
    1d64:	8f 2d       	mov	r24, r15
    1d66:	0e 94 77 0e 	call	0x1cee	; 0x1cee <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1d6a:	87 e1       	ldi	r24, 0x17	; 23
    1d6c:	61 e0       	ldi	r22, 0x01	; 1
    1d6e:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1d72:	c8 01       	movw	r24, r16
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	f1 f7       	brne	.-4      	; 0x1d74 <H_LCD_Void_LCDWriteCommand+0x4a>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1d78:	87 e1       	ldi	r24, 0x17	; 23
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1d80:	c8 01       	movw	r24, r16
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <H_LCD_Void_LCDWriteCommand+0x58>
#endif
	_delay_ms(1);
}
    1d86:	1f 91       	pop	r17
    1d88:	0f 91       	pop	r16
    1d8a:	ff 90       	pop	r15
    1d8c:	08 95       	ret

00001d8e <H_LCD_Void_LCDClear>:



void H_LCD_Void_LCDClear(void)
{
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <H_LCD_Void_LCDWriteCommand>
}
    1d94:	08 95       	ret

00001d96 <H_LCD_Void_LCDGoTo>:




void H_LCD_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <H_LCD_Void_LCDGoTo+0x6>
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8Arr [2] = {0x80 , 0xC0};
    1da0:	90 e8       	ldi	r25, 0x80	; 128
    1da2:	99 83       	std	Y+1, r25	; 0x01
    1da4:	90 ec       	ldi	r25, 0xC0	; 192
    1da6:	9a 83       	std	Y+2, r25	; 0x02
	H_LCD_Void_LCDWriteCommand(Local_U8Arr[Copy_U8_Row] + Copy_U8_Col);
    1da8:	fe 01       	movw	r30, r28
    1daa:	e8 0f       	add	r30, r24
    1dac:	f1 1d       	adc	r31, r1
    1dae:	81 81       	ldd	r24, Z+1	; 0x01
    1db0:	86 0f       	add	r24, r22
    1db2:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <H_LCD_Void_LCDWriteCommand>
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <H_LCD_Void_LCDWriteCharacter>:
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
#endif

}
void H_LCD_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    1dc0:	ff 92       	push	r15
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
    1dc6:	f8 2e       	mov	r15, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    1dc8:	85 e1       	ldi	r24, 0x15	; 21
    1dca:	61 e0       	ldi	r22, 0x01	; 1
    1dcc:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Character >> 4);
    1dd0:	8f 2d       	mov	r24, r15
    1dd2:	82 95       	swap	r24
    1dd4:	8f 70       	andi	r24, 0x0F	; 15
    1dd6:	0e 94 77 0e 	call	0x1cee	; 0x1cee <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1dda:	87 e1       	ldi	r24, 0x17	; 23
    1ddc:	61 e0       	ldi	r22, 0x01	; 1
    1dde:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1de2:	00 ea       	ldi	r16, 0xA0	; 160
    1de4:	1f e0       	ldi	r17, 0x0F	; 15
    1de6:	c8 01       	movw	r24, r16
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <H_LCD_Void_LCDWriteCharacter+0x28>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1dec:	87 e1       	ldi	r24, 0x17	; 23
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1df4:	c8 01       	movw	r24, r16
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <H_LCD_Void_LCDWriteCharacter+0x36>
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
    1dfa:	8f 2d       	mov	r24, r15
    1dfc:	0e 94 77 0e 	call	0x1cee	; 0x1cee <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1e00:	87 e1       	ldi	r24, 0x17	; 23
    1e02:	61 e0       	ldi	r22, 0x01	; 1
    1e04:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1e08:	c8 01       	movw	r24, r16
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <H_LCD_Void_LCDWriteCharacter+0x4a>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1e0e:	87 e1       	ldi	r24, 0x17	; 23
    1e10:	60 e0       	ldi	r22, 0x00	; 0
    1e12:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    1e16:	c8 01       	movw	r24, r16
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <H_LCD_Void_LCDWriteCharacter+0x58>
#endif
	_delay_ms(1);
}
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	ff 90       	pop	r15
    1e22:	08 95       	ret

00001e24 <H_LCD_Void_LCDWriteNumber>:
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
void H_LCD_Void_LCDWriteNumber(s32 Copy_S32_Num)
{
    1e24:	af 92       	push	r10
    1e26:	bf 92       	push	r11
    1e28:	cf 92       	push	r12
    1e2a:	df 92       	push	r13
    1e2c:	ef 92       	push	r14
    1e2e:	ff 92       	push	r15
    1e30:	0f 93       	push	r16
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	62 97       	sbiw	r28, 0x12	; 18
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
    1e46:	6b 01       	movw	r12, r22
    1e48:	7c 01       	movw	r14, r24
	s8 Local_S8_Counter = -1;
	u8 Local_U8_Arr[16];
	if(Copy_S32_Num < 0)
    1e4a:	99 23       	and	r25, r25
    1e4c:	5c f4       	brge	.+22     	; 0x1e64 <H_LCD_Void_LCDWriteNumber+0x40>
	{
		Copy_S32_Num = Copy_S32_Num * -1;
    1e4e:	f0 94       	com	r15
    1e50:	e0 94       	com	r14
    1e52:	d0 94       	com	r13
    1e54:	c0 94       	com	r12
    1e56:	c1 1c       	adc	r12, r1
    1e58:	d1 1c       	adc	r13, r1
    1e5a:	e1 1c       	adc	r14, r1
    1e5c:	f1 1c       	adc	r15, r1
		H_LCD_Void_LCDWriteCharacter('-');
    1e5e:	8d e2       	ldi	r24, 0x2D	; 45
    1e60:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <H_LCD_Void_LCDWriteCharacter>
    1e64:	0f ef       	ldi	r16, 0xFF	; 255
	}
	do
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
    1e66:	5e 01       	movw	r10, r28
    1e68:	08 94       	sec
    1e6a:	a1 1c       	adc	r10, r1
    1e6c:	b1 1c       	adc	r11, r1
		Copy_S32_Num = Copy_S32_Num * -1;
		H_LCD_Void_LCDWriteCharacter('-');
	}
	do
	{
		Local_S8_Counter++;
    1e6e:	0f 5f       	subi	r16, 0xFF	; 255
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
    1e70:	80 2f       	mov	r24, r16
    1e72:	99 27       	eor	r25, r25
    1e74:	87 fd       	sbrc	r24, 7
    1e76:	90 95       	com	r25
    1e78:	95 01       	movw	r18, r10
    1e7a:	28 0f       	add	r18, r24
    1e7c:	39 1f       	adc	r19, r25
    1e7e:	3a 8b       	std	Y+18, r19	; 0x12
    1e80:	29 8b       	std	Y+17, r18	; 0x11
    1e82:	c7 01       	movw	r24, r14
    1e84:	b6 01       	movw	r22, r12
    1e86:	2a e0       	ldi	r18, 0x0A	; 10
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__divmodsi4>
    1e92:	e9 89       	ldd	r30, Y+17	; 0x11
    1e94:	fa 89       	ldd	r31, Y+18	; 0x12
    1e96:	60 83       	st	Z, r22
		Copy_S32_Num = Copy_S32_Num / 10;
    1e98:	c7 01       	movw	r24, r14
    1e9a:	b6 01       	movw	r22, r12
    1e9c:	2a e0       	ldi	r18, 0x0A	; 10
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__divmodsi4>
    1ea8:	82 2f       	mov	r24, r18
    1eaa:	93 2f       	mov	r25, r19
    1eac:	a4 2f       	mov	r26, r20
    1eae:	b5 2f       	mov	r27, r21
    1eb0:	6c 01       	movw	r12, r24
    1eb2:	7d 01       	movw	r14, r26
	}while(Copy_S32_Num != 0);
    1eb4:	c1 14       	cp	r12, r1
    1eb6:	d1 04       	cpc	r13, r1
    1eb8:	e1 04       	cpc	r14, r1
    1eba:	f1 04       	cpc	r15, r1
    1ebc:	c1 f6       	brne	.-80     	; 0x1e6e <H_LCD_Void_LCDWriteNumber+0x4a>
	while(Local_S8_Counter >= 0)
    1ebe:	00 23       	and	r16, r16
    1ec0:	8c f0       	brlt	.+34     	; 0x1ee4 <H_LCD_Void_LCDWriteNumber+0xc0>
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
    1ec2:	7e 01       	movw	r14, r28
    1ec4:	08 94       	sec
    1ec6:	e1 1c       	adc	r14, r1
    1ec8:	f1 1c       	adc	r15, r1
    1eca:	80 2f       	mov	r24, r16
    1ecc:	99 27       	eor	r25, r25
    1ece:	87 fd       	sbrc	r24, 7
    1ed0:	90 95       	com	r25
    1ed2:	f7 01       	movw	r30, r14
    1ed4:	e8 0f       	add	r30, r24
    1ed6:	f9 1f       	adc	r31, r25
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 5d       	subi	r24, 0xD0	; 208
    1edc:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <H_LCD_Void_LCDWriteCharacter>
		Local_S8_Counter--;
    1ee0:	01 50       	subi	r16, 0x01	; 1
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
		Copy_S32_Num = Copy_S32_Num / 10;
	}while(Copy_S32_Num != 0);
	while(Local_S8_Counter >= 0)
    1ee2:	9a f7       	brpl	.-26     	; 0x1eca <H_LCD_Void_LCDWriteNumber+0xa6>
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
		Local_S8_Counter--;
	}


}
    1ee4:	62 96       	adiw	r28, 0x12	; 18
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	0f 91       	pop	r16
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	df 90       	pop	r13
    1efc:	cf 90       	pop	r12
    1efe:	bf 90       	pop	r11
    1f00:	af 90       	pop	r10
    1f02:	08 95       	ret

00001f04 <H_LCD_Void_LCDWriteString>:
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#endif
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	ec 01       	movw	r28, r24
	u8 Local_U8_Counter = 0;
	while(Copy_U8_P[Local_U8_Counter] != '\0')
    1f0c:	88 81       	ld	r24, Y
    1f0e:	88 23       	and	r24, r24
    1f10:	51 f0       	breq	.+20     	; 0x1f26 <H_LCD_Void_LCDWriteString+0x22>
    1f12:	10 e0       	ldi	r17, 0x00	; 0
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
    1f14:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <H_LCD_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    1f18:	1f 5f       	subi	r17, 0xFF	; 255
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_P[Local_U8_Counter] != '\0')
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e1 0f       	add	r30, r17
    1f1e:	f1 1d       	adc	r31, r1
    1f20:	80 81       	ld	r24, Z
    1f22:	88 23       	and	r24, r24
    1f24:	b9 f7       	brne	.-18     	; 0x1f14 <H_LCD_Void_LCDWriteString+0x10>
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	1f 91       	pop	r17
    1f2c:	08 95       	ret

00001f2e <H_LCD_Void_LCDInit>:
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
	H_LCD_Void_LCDWriteCommand(LCD_8_BIT_MODE);
	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    1f2e:	8e e0       	ldi	r24, 0x0E	; 14
    1f30:	61 e0       	ldi	r22, 0x01	; 1
    1f32:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    1f36:	8f e0       	ldi	r24, 0x0F	; 15
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    1f3e:	80 e1       	ldi	r24, 0x10	; 16
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    1f46:	81 e1       	ldi	r24, 0x11	; 17
    1f48:	61 e0       	ldi	r22, 0x01	; 1
    1f4a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    1f4e:	85 e1       	ldi	r24, 0x15	; 21
    1f50:	61 e0       	ldi	r22, 0x01	; 1
    1f52:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    1f56:	87 e1       	ldi	r24, 0x17	; 23
    1f58:	61 e0       	ldi	r22, 0x01	; 1
    1f5a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
    1f5e:	86 e1       	ldi	r24, 0x16	; 22
    1f60:	61 e0       	ldi	r22, 0x01	; 1
    1f62:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
    1f66:	86 e1       	ldi	r24, 0x16	; 22
    1f68:	60 e0       	ldi	r22, 0x00	; 0
    1f6a:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>

	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_1);
    1f6e:	83 e3       	ldi	r24, 0x33	; 51
    1f70:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_2);
    1f74:	82 e3       	ldi	r24, 0x32	; 50
    1f76:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_3);
    1f7a:	88 e2       	ldi	r24, 0x28	; 40
    1f7c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <H_LCD_Void_LCDWriteCommand>

	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    1f80:	8c e0       	ldi	r24, 0x0C	; 12
    1f82:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <H_LCD_Void_LCDWriteCommand>
#endif

}
    1f92:	08 95       	ret

00001f94 <H_KeyPad_U8_KeyPadRead>:
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
}
u8   H_KeyPad_U8_KeyPadRead(void)
{
    1f94:	6f 92       	push	r6
    1f96:	7f 92       	push	r7
    1f98:	8f 92       	push	r8
    1f9a:	9f 92       	push	r9
    1f9c:	af 92       	push	r10
    1f9e:	bf 92       	push	r11
    1fa0:	cf 92       	push	r12
    1fa2:	df 92       	push	r13
    1fa4:	ef 92       	push	r14
    1fa6:	ff 92       	push	r15
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	60 97       	sbiw	r28, 0x10	; 16
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8_Arr [4][4] = { { '1' , '2' , '3' , 'A' },
			                   { '4' , '5' , '6' , 'B' },
		                       { '7' , '8' , '9' , 'C' },
			                   { '*' , '0' , '#' , 'D' }};
    1fc0:	de 01       	movw	r26, r28
    1fc2:	11 96       	adiw	r26, 0x01	; 1
    1fc4:	e8 e6       	ldi	r30, 0x68	; 104
    1fc6:	f1 e0       	ldi	r31, 0x01	; 1
    1fc8:	80 e1       	ldi	r24, 0x10	; 16
    1fca:	01 90       	ld	r0, Z+
    1fcc:	0d 92       	st	X+, r0
    1fce:	81 50       	subi	r24, 0x01	; 1
    1fd0:	e1 f7       	brne	.-8      	; 0x1fca <H_KeyPad_U8_KeyPadRead+0x36>
    1fd2:	99 24       	eor	r9, r9
    1fd4:	cc 24       	eor	r12, r12
    1fd6:	dd 24       	eor	r13, r13
	u8 Local_U8_Reading = 0;
	u8 Local_U8_Row = 0;
	u8 Local_U8_Col = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
	{
		M_DIO_Void_SetPinValue(Local_U8_Row,LOW);
    1fd8:	0f 2e       	mov	r0, r31
    1fda:	f8 e1       	ldi	r31, 0x18	; 24
    1fdc:	8f 2e       	mov	r8, r31
    1fde:	f0 2d       	mov	r31, r0
    1fe0:	00 e9       	ldi	r16, 0x90	; 144
    1fe2:	11 e0       	ldi	r17, 0x01	; 1
		for(Local_U8_Col=KEYPAD_C0_PIN;Local_U8_Col<=KEYPAD_C3_PIN;Local_U8_Col++)
		{
			if(M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
    1fe4:	80 eb       	ldi	r24, 0xB0	; 176
    1fe6:	94 e0       	ldi	r25, 0x04	; 4
    1fe8:	b8 2e       	mov	r11, r24
    1fea:	a9 2e       	mov	r10, r25
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
				{
					while(M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED);
					Local_U8_Reading = Local_U8_Arr[Local_U8_Row-KEYPAD_R0_PIN][Local_U8_Col-KEYPAD_C0_PIN];
    1fec:	3e 01       	movw	r6, r28
    1fee:	08 94       	sec
    1ff0:	61 1c       	adc	r6, r1
    1ff2:	71 1c       	adc	r7, r1
u8   H_KeyPad_U8_KeyPadRead(void)
{
	u8 Local_U8_Arr [4][4] = { { '1' , '2' , '3' , 'A' },
			                   { '4' , '5' , '6' , 'B' },
		                       { '7' , '8' , '9' , 'C' },
			                   { '*' , '0' , '#' , 'D' }};
    1ff4:	0f 2e       	mov	r0, r31
    1ff6:	f1 e2       	ldi	r31, 0x21	; 33
    1ff8:	ef 2e       	mov	r14, r31
    1ffa:	f0 2d       	mov	r31, r0
    1ffc:	ec 0c       	add	r14, r12
	u8 Local_U8_Reading = 0;
	u8 Local_U8_Row = 0;
	u8 Local_U8_Col = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
	{
		M_DIO_Void_SetPinValue(Local_U8_Row,LOW);
    1ffe:	8e 2d       	mov	r24, r14
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    2006:	f8 2c       	mov	r15, r8
		for(Local_U8_Col=KEYPAD_C0_PIN;Local_U8_Col<=KEYPAD_C3_PIN;Local_U8_Col++)
		{
			if(M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
    2008:	8f 2d       	mov	r24, r15
    200a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_U8_GetPinValue>
    200e:	88 23       	and	r24, r24
    2010:	f1 f4       	brne	.+60     	; 0x204e <H_KeyPad_U8_KeyPadRead+0xba>
    2012:	8b 2d       	mov	r24, r11
    2014:	9a 2d       	mov	r25, r10
    2016:	f8 01       	movw	r30, r16
    2018:	31 97       	sbiw	r30, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <H_KeyPad_U8_KeyPadRead+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201e:	d9 f7       	brne	.-10     	; 0x2016 <H_KeyPad_U8_KeyPadRead+0x82>
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
    2020:	8f 2d       	mov	r24, r15
    2022:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_U8_GetPinValue>
    2026:	88 23       	and	r24, r24
    2028:	91 f4       	brne	.+36     	; 0x204e <H_KeyPad_U8_KeyPadRead+0xba>
				{
					while(M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED);
    202a:	8f 2d       	mov	r24, r15
    202c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <M_DIO_U8_GetPinValue>
    2030:	88 23       	and	r24, r24
    2032:	d9 f3       	breq	.-10     	; 0x202a <H_KeyPad_U8_KeyPadRead+0x96>
					Local_U8_Reading = Local_U8_Arr[Local_U8_Row-KEYPAD_R0_PIN][Local_U8_Col-KEYPAD_C0_PIN];
    2034:	c6 01       	movw	r24, r12
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	f3 01       	movw	r30, r6
    2040:	e8 0f       	add	r30, r24
    2042:	f9 1f       	adc	r31, r25
    2044:	ef 0d       	add	r30, r15
    2046:	f1 1d       	adc	r31, r1
    2048:	78 97       	sbiw	r30, 0x18	; 24
    204a:	90 80       	ld	r9, Z
    204c:	04 c0       	rjmp	.+8      	; 0x2056 <H_KeyPad_U8_KeyPadRead+0xc2>
	u8 Local_U8_Row = 0;
	u8 Local_U8_Col = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
	{
		M_DIO_Void_SetPinValue(Local_U8_Row,LOW);
		for(Local_U8_Col=KEYPAD_C0_PIN;Local_U8_Col<=KEYPAD_C3_PIN;Local_U8_Col++)
    204e:	f3 94       	inc	r15
    2050:	8c e1       	ldi	r24, 0x1C	; 28
    2052:	f8 16       	cp	r15, r24
    2054:	c9 f6       	brne	.-78     	; 0x2008 <H_KeyPad_U8_KeyPadRead+0x74>
					Local_U8_Reading = Local_U8_Arr[Local_U8_Row-KEYPAD_R0_PIN][Local_U8_Col-KEYPAD_C0_PIN];
					break;
				}
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_Row,HIGH);
    2056:	8e 2d       	mov	r24, r14
    2058:	61 e0       	ldi	r22, 0x01	; 1
    205a:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    205e:	08 94       	sec
    2060:	c1 1c       	adc	r12, r1
    2062:	d1 1c       	adc	r13, r1
		                       { '7' , '8' , '9' , 'C' },
			                   { '*' , '0' , '#' , 'D' }};
	u8 Local_U8_Reading = 0;
	u8 Local_U8_Row = 0;
	u8 Local_U8_Col = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
    2064:	84 e0       	ldi	r24, 0x04	; 4
    2066:	c8 16       	cp	r12, r24
    2068:	d1 04       	cpc	r13, r1
    206a:	21 f6       	brne	.-120    	; 0x1ff4 <H_KeyPad_U8_KeyPadRead+0x60>
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_Row,HIGH);
	}
	return Local_U8_Reading;
}
    206c:	89 2d       	mov	r24, r9
    206e:	60 96       	adiw	r28, 0x10	; 16
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	1f 91       	pop	r17
    2080:	0f 91       	pop	r16
    2082:	ff 90       	pop	r15
    2084:	ef 90       	pop	r14
    2086:	df 90       	pop	r13
    2088:	cf 90       	pop	r12
    208a:	bf 90       	pop	r11
    208c:	af 90       	pop	r10
    208e:	9f 90       	pop	r9
    2090:	8f 90       	pop	r8
    2092:	7f 90       	pop	r7
    2094:	6f 90       	pop	r6
    2096:	08 95       	ret

00002098 <H_KeyPad_Void_KeyPadInit>:



void H_KeyPad_Void_KeyPadInit(void)
{
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
    2098:	81 e2       	ldi	r24, 0x21	; 33
    209a:	61 e0       	ldi	r22, 0x01	; 1
    209c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
    20a0:	82 e2       	ldi	r24, 0x22	; 34
    20a2:	61 e0       	ldi	r22, 0x01	; 1
    20a4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
    20a8:	83 e2       	ldi	r24, 0x23	; 35
    20aa:	61 e0       	ldi	r22, 0x01	; 1
    20ac:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
    20b0:	84 e2       	ldi	r24, 0x24	; 36
    20b2:	61 e0       	ldi	r22, 0x01	; 1
    20b4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
    20b8:	88 e1       	ldi	r24, 0x18	; 24
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
    20c0:	89 e1       	ldi	r24, 0x19	; 25
    20c2:	60 e0       	ldi	r22, 0x00	; 0
    20c4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
    20c8:	8a e1       	ldi	r24, 0x1A	; 26
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
    20d0:	8b e1       	ldi	r24, 0x1B	; 27
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	// to activate internal pull up res
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C0_PIN,ENABLE);
    20d8:	88 e1       	ldi	r24, 0x18	; 24
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	0e 94 27 0b 	call	0x164e	; 0x164e <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C1_PIN,ENABLE);
    20e0:	89 e1       	ldi	r24, 0x19	; 25
    20e2:	61 e0       	ldi	r22, 0x01	; 1
    20e4:	0e 94 27 0b 	call	0x164e	; 0x164e <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C2_PIN,ENABLE);
    20e8:	8a e1       	ldi	r24, 0x1A	; 26
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	0e 94 27 0b 	call	0x164e	; 0x164e <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C3_PIN,ENABLE);
    20f0:	8b e1       	ldi	r24, 0x1B	; 27
    20f2:	61 e0       	ldi	r22, 0x01	; 1
    20f4:	0e 94 27 0b 	call	0x164e	; 0x164e <M_DIO_Void_SetPinPullUpRes>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
    20f8:	81 e2       	ldi	r24, 0x21	; 33
    20fa:	61 e0       	ldi	r22, 0x01	; 1
    20fc:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
    2100:	82 e2       	ldi	r24, 0x22	; 34
    2102:	61 e0       	ldi	r22, 0x01	; 1
    2104:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
    2108:	83 e2       	ldi	r24, 0x23	; 35
    210a:	61 e0       	ldi	r22, 0x01	; 1
    210c:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
    2110:	84 e2       	ldi	r24, 0x24	; 36
    2112:	61 e0       	ldi	r22, 0x01	; 1
    2114:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
}
    2118:	08 95       	ret

0000211a <H_DCMotor_Void_DCMotorStop>:
	M_Timer_Void_PWMStart(TIMER1_CHANNEL);

}
void H_DCMotor_Void_DCMotorStop(void)
{
	M_Timer_Void_PWMStop(TIMER1_CHANNEL);
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	0e 94 67 08 	call	0x10ce	; 0x10ce <M_Timer_Void_PWMStop>
}
    2120:	08 95       	ret

00002122 <H_DCMotor_Void_DCMotorStart>:
	break;
}
}
void H_DCMotor_Void_DCMotorStart(void)
{
	M_Timer_Void_PWMStart(TIMER1_CHANNEL);
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_Timer_Void_PWMStart>

}
    2128:	08 95       	ret

0000212a <H_DCMotor_Void_DCMotorSetDirection>:
{
	M_Timer_Void_PWMSetDutyCycle(TIMER1_CHANNEL,Copy_U32_MotorSpeed);
}
void H_DCMotor_Void_DCMotorSetDirection(u8 Copy_U8_Direction)
{
switch(Copy_U8_Direction)
    212a:	88 23       	and	r24, r24
    212c:	19 f0       	breq	.+6      	; 0x2134 <H_DCMotor_Void_DCMotorSetDirection+0xa>
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	91 f4       	brne	.+36     	; 0x2156 <H_DCMotor_Void_DCMotorSetDirection+0x2c>
    2132:	09 c0       	rjmp	.+18     	; 0x2146 <H_DCMotor_Void_DCMotorSetDirection+0x1c>
{
case ACW:
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN1,LOW);
    2134:	83 e2       	ldi	r24, 0x23	; 35
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN2,HIGH);
    213c:	84 e2       	ldi	r24, 0x24	; 36
    213e:	61 e0       	ldi	r22, 0x01	; 1
    2140:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    2144:	08 95       	ret
	break;
case CW:
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN1,HIGH);
    2146:	83 e2       	ldi	r24, 0x23	; 35
    2148:	61 e0       	ldi	r22, 0x01	; 1
    214a:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN2,LOW);
    214e:	84 e2       	ldi	r24, 0x24	; 36
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    2156:	08 95       	ret

00002158 <H_DCMotor_Void_DCMotorSetSpeed>:
	M_DIO_Void_SetPinDirection(DC_MOTOR_PIN2,OUTPUT);
	M_Timer_Void_PWMInit(TIMER1_CHANNEL);
}
void H_DCMotor_Void_DCMotorSetSpeed(u32 Copy_U32_MotorSpeed)
{
	M_Timer_Void_PWMSetDutyCycle(TIMER1_CHANNEL,Copy_U32_MotorSpeed);
    2158:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    215c:	ab 01       	movw	r20, r22
    215e:	bc 01       	movw	r22, r24
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	0e 94 1b 08 	call	0x1036	; 0x1036 <M_Timer_Void_PWMSetDutyCycle>
}
    2166:	08 95       	ret

00002168 <H_DCMotor_Void_DCMotorInit>:

#include "DCMotor_Interface.h"

void H_DCMotor_Void_DCMotorInit(void)
{
	M_DIO_Void_SetPinDirection(DC_MOTOR_PIN1,OUTPUT);
    2168:	83 e2       	ldi	r24, 0x23	; 35
    216a:	61 e0       	ldi	r22, 0x01	; 1
    216c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(DC_MOTOR_PIN2,OUTPUT);
    2170:	84 e2       	ldi	r24, 0x24	; 36
    2172:	61 e0       	ldi	r22, 0x01	; 1
    2174:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
	M_Timer_Void_PWMInit(TIMER1_CHANNEL);
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	0e 94 cf 08 	call	0x119e	; 0x119e <M_Timer_Void_PWMInit>
}
    217e:	08 95       	ret

00002180 <H_Buzzer_Void_BuzzerOnce>:
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
}
void H_Buzzer_Void_BuzzerOnce(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    2180:	8d e0       	ldi	r24, 0x0D	; 13
    2182:	61 e0       	ldi	r22, 0x01	; 1
    2184:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
    2188:	28 e5       	ldi	r18, 0x58	; 88
    218a:	32 e0       	ldi	r19, 0x02	; 2
    218c:	40 e9       	ldi	r20, 0x90	; 144
    218e:	51 e0       	ldi	r21, 0x01	; 1
    2190:	ca 01       	movw	r24, r20
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <H_Buzzer_Void_BuzzerOnce+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2196:	21 50       	subi	r18, 0x01	; 1
    2198:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219a:	d1 f7       	brne	.-12     	; 0x2190 <H_Buzzer_Void_BuzzerOnce+0x10>
	_delay_ms(BUZZER_TIME_ON);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    219c:	8d e0       	ldi	r24, 0x0D	; 13
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
}
    21a4:	08 95       	ret

000021a6 <H_Buzzer_Void_BuzzerSetOff>:
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
}
void H_Buzzer_Void_BuzzerSetOff(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    21a6:	8d e0       	ldi	r24, 0x0D	; 13
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
}
    21ae:	08 95       	ret

000021b0 <H_Buzzer_Void_BuzzerSetOn>:
{
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
}
void H_Buzzer_Void_BuzzerSetOn(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    21b0:	8d e0       	ldi	r24, 0x0D	; 13
    21b2:	61 e0       	ldi	r22, 0x01	; 1
    21b4:	0e 94 11 0a 	call	0x1422	; 0x1422 <M_DIO_Void_SetPinValue>
}
    21b8:	08 95       	ret

000021ba <H_Buzzer_Void_BuzzerInit>:

#include "Buzzer_Interface.h"

void H_Buzzer_Void_BuzzerInit(void)
{
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
    21ba:	8d e0       	ldi	r24, 0x0D	; 13
    21bc:	61 e0       	ldi	r22, 0x01	; 1
    21be:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <M_DIO_Void_SetPinDirection>
}
    21c2:	08 95       	ret

000021c4 <A_SSDProject>:
 */

#include "Projects.h"

void A_SSDProject(void)
{
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
	int x = 0;
	H_SSD_Void_SSDInit();
    21ce:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <H_SSD_Void_SSDInit>
    21d2:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		H_SSD_Void_SSDWriteNumber(x);
    21d4:	0f 2e       	mov	r0, r31
    21d6:	f0 e1       	ldi	r31, 0x10	; 16
    21d8:	ef 2e       	mov	r14, r31
    21da:	f7 e2       	ldi	r31, 0x27	; 39
    21dc:	ff 2e       	mov	r15, r31
    21de:	f0 2d       	mov	r31, r0
    21e0:	c0 e9       	ldi	r28, 0x90	; 144
    21e2:	d1 e0       	ldi	r29, 0x01	; 1
    21e4:	81 2f       	mov	r24, r17
    21e6:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <H_SSD_Void_SSDWriteNumber>
    21ea:	97 01       	movw	r18, r14
    21ec:	ce 01       	movw	r24, r28
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <A_SSDProject+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f2:	21 50       	subi	r18, 0x01	; 1
    21f4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f6:	d1 f7       	brne	.-12     	; 0x21ec <A_SSDProject+0x28>
    21f8:	1f 5f       	subi	r17, 0xFF	; 255
    21fa:	f4 cf       	rjmp	.-24     	; 0x21e4 <A_SSDProject+0x20>

000021fc <A_Timer1_Execution>:
	H_LED_Void_LedTog(LED0);
}
void A_Timer1_Execution(void)
{
	//H_Buzzer_Void_BuzzerOnce();
	H_LED_Void_LedTog(LED0);
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <H_LED_Void_LedTog>
}
    2202:	08 95       	ret

00002204 <A_Timer0_Execution>:
	H_LCD_Void_LCDWriteCharacter('A');
}
void A_Timer0_Execution(void)
{
	//H_Buzzer_Void_BuzzerOnce();
	H_LED_Void_LedTog(LED0);
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <H_LED_Void_LedTog>
}
    220a:	08 95       	ret

0000220c <A_EXT_INT0_Execution>:
	return 0;
}

void A_EXT_INT0_Execution(void)
{
	H_Buzzer_Void_BuzzerOnce();
    220c:	0e 94 c0 10 	call	0x2180	; 0x2180 <H_Buzzer_Void_BuzzerOnce>
	H_LED_Void_LedSetOn(LED0);
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <H_LED_Void_LedSetOn>
	H_LCD_Void_LCDWriteCharacter('A');
    2216:	81 e4       	ldi	r24, 0x41	; 65
    2218:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <H_LCD_Void_LCDWriteCharacter>
}
    221c:	08 95       	ret

0000221e <main>:
void A_Timer0_Execution(void);


int main()
{
	H_LCD_Void_LCDInit();
    221e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <H_LCD_Void_LCDInit>
	M_UART_Void_UARTInit();
    2222:	0e 94 54 07 	call	0xea8	; 0xea8 <M_UART_Void_UARTInit>
	H_LCD_Void_LCDWriteCharacter('k');
    2226:	8b e6       	ldi	r24, 0x6B	; 107
    2228:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <H_LCD_Void_LCDWriteCharacter>
	u8 x = 0;
	while(1)
	{
		x = M_UART_Void_UARTRec();
    222c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <M_UART_Void_UARTRec>
		if(x != 0)
    2230:	88 23       	and	r24, r24
    2232:	e1 f3       	breq	.-8      	; 0x222c <main+0xe>
		{
			H_LCD_Void_LCDWriteCharacter(x);
    2234:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <H_LCD_Void_LCDWriteCharacter>
    2238:	f9 cf       	rjmp	.-14     	; 0x222c <main+0xe>

0000223a <__mulsi3>:
    223a:	62 9f       	mul	r22, r18
    223c:	d0 01       	movw	r26, r0
    223e:	73 9f       	mul	r23, r19
    2240:	f0 01       	movw	r30, r0
    2242:	82 9f       	mul	r24, r18
    2244:	e0 0d       	add	r30, r0
    2246:	f1 1d       	adc	r31, r1
    2248:	64 9f       	mul	r22, r20
    224a:	e0 0d       	add	r30, r0
    224c:	f1 1d       	adc	r31, r1
    224e:	92 9f       	mul	r25, r18
    2250:	f0 0d       	add	r31, r0
    2252:	83 9f       	mul	r24, r19
    2254:	f0 0d       	add	r31, r0
    2256:	74 9f       	mul	r23, r20
    2258:	f0 0d       	add	r31, r0
    225a:	65 9f       	mul	r22, r21
    225c:	f0 0d       	add	r31, r0
    225e:	99 27       	eor	r25, r25
    2260:	72 9f       	mul	r23, r18
    2262:	b0 0d       	add	r27, r0
    2264:	e1 1d       	adc	r30, r1
    2266:	f9 1f       	adc	r31, r25
    2268:	63 9f       	mul	r22, r19
    226a:	b0 0d       	add	r27, r0
    226c:	e1 1d       	adc	r30, r1
    226e:	f9 1f       	adc	r31, r25
    2270:	bd 01       	movw	r22, r26
    2272:	cf 01       	movw	r24, r30
    2274:	11 24       	eor	r1, r1
    2276:	08 95       	ret

00002278 <__udivmodqi4>:
    2278:	99 1b       	sub	r25, r25
    227a:	79 e0       	ldi	r23, 0x09	; 9
    227c:	04 c0       	rjmp	.+8      	; 0x2286 <__udivmodqi4_ep>

0000227e <__udivmodqi4_loop>:
    227e:	99 1f       	adc	r25, r25
    2280:	96 17       	cp	r25, r22
    2282:	08 f0       	brcs	.+2      	; 0x2286 <__udivmodqi4_ep>
    2284:	96 1b       	sub	r25, r22

00002286 <__udivmodqi4_ep>:
    2286:	88 1f       	adc	r24, r24
    2288:	7a 95       	dec	r23
    228a:	c9 f7       	brne	.-14     	; 0x227e <__udivmodqi4_loop>
    228c:	80 95       	com	r24
    228e:	08 95       	ret

00002290 <__udivmodsi4>:
    2290:	a1 e2       	ldi	r26, 0x21	; 33
    2292:	1a 2e       	mov	r1, r26
    2294:	aa 1b       	sub	r26, r26
    2296:	bb 1b       	sub	r27, r27
    2298:	fd 01       	movw	r30, r26
    229a:	0d c0       	rjmp	.+26     	; 0x22b6 <__udivmodsi4_ep>

0000229c <__udivmodsi4_loop>:
    229c:	aa 1f       	adc	r26, r26
    229e:	bb 1f       	adc	r27, r27
    22a0:	ee 1f       	adc	r30, r30
    22a2:	ff 1f       	adc	r31, r31
    22a4:	a2 17       	cp	r26, r18
    22a6:	b3 07       	cpc	r27, r19
    22a8:	e4 07       	cpc	r30, r20
    22aa:	f5 07       	cpc	r31, r21
    22ac:	20 f0       	brcs	.+8      	; 0x22b6 <__udivmodsi4_ep>
    22ae:	a2 1b       	sub	r26, r18
    22b0:	b3 0b       	sbc	r27, r19
    22b2:	e4 0b       	sbc	r30, r20
    22b4:	f5 0b       	sbc	r31, r21

000022b6 <__udivmodsi4_ep>:
    22b6:	66 1f       	adc	r22, r22
    22b8:	77 1f       	adc	r23, r23
    22ba:	88 1f       	adc	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	1a 94       	dec	r1
    22c0:	69 f7       	brne	.-38     	; 0x229c <__udivmodsi4_loop>
    22c2:	60 95       	com	r22
    22c4:	70 95       	com	r23
    22c6:	80 95       	com	r24
    22c8:	90 95       	com	r25
    22ca:	9b 01       	movw	r18, r22
    22cc:	ac 01       	movw	r20, r24
    22ce:	bd 01       	movw	r22, r26
    22d0:	cf 01       	movw	r24, r30
    22d2:	08 95       	ret

000022d4 <__divmodsi4>:
    22d4:	97 fb       	bst	r25, 7
    22d6:	09 2e       	mov	r0, r25
    22d8:	05 26       	eor	r0, r21
    22da:	0e d0       	rcall	.+28     	; 0x22f8 <__divmodsi4_neg1>
    22dc:	57 fd       	sbrc	r21, 7
    22de:	04 d0       	rcall	.+8      	; 0x22e8 <__divmodsi4_neg2>
    22e0:	d7 df       	rcall	.-82     	; 0x2290 <__udivmodsi4>
    22e2:	0a d0       	rcall	.+20     	; 0x22f8 <__divmodsi4_neg1>
    22e4:	00 1c       	adc	r0, r0
    22e6:	38 f4       	brcc	.+14     	; 0x22f6 <__divmodsi4_exit>

000022e8 <__divmodsi4_neg2>:
    22e8:	50 95       	com	r21
    22ea:	40 95       	com	r20
    22ec:	30 95       	com	r19
    22ee:	21 95       	neg	r18
    22f0:	3f 4f       	sbci	r19, 0xFF	; 255
    22f2:	4f 4f       	sbci	r20, 0xFF	; 255
    22f4:	5f 4f       	sbci	r21, 0xFF	; 255

000022f6 <__divmodsi4_exit>:
    22f6:	08 95       	ret

000022f8 <__divmodsi4_neg1>:
    22f8:	f6 f7       	brtc	.-4      	; 0x22f6 <__divmodsi4_exit>
    22fa:	90 95       	com	r25
    22fc:	80 95       	com	r24
    22fe:	70 95       	com	r23
    2300:	61 95       	neg	r22
    2302:	7f 4f       	sbci	r23, 0xFF	; 255
    2304:	8f 4f       	sbci	r24, 0xFF	; 255
    2306:	9f 4f       	sbci	r25, 0xFF	; 255
    2308:	08 95       	ret

0000230a <__prologue_saves__>:
    230a:	2f 92       	push	r2
    230c:	3f 92       	push	r3
    230e:	4f 92       	push	r4
    2310:	5f 92       	push	r5
    2312:	6f 92       	push	r6
    2314:	7f 92       	push	r7
    2316:	8f 92       	push	r8
    2318:	9f 92       	push	r9
    231a:	af 92       	push	r10
    231c:	bf 92       	push	r11
    231e:	cf 92       	push	r12
    2320:	df 92       	push	r13
    2322:	ef 92       	push	r14
    2324:	ff 92       	push	r15
    2326:	0f 93       	push	r16
    2328:	1f 93       	push	r17
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	ca 1b       	sub	r28, r26
    2334:	db 0b       	sbc	r29, r27
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
    2340:	09 94       	ijmp

00002342 <__epilogue_restores__>:
    2342:	2a 88       	ldd	r2, Y+18	; 0x12
    2344:	39 88       	ldd	r3, Y+17	; 0x11
    2346:	48 88       	ldd	r4, Y+16	; 0x10
    2348:	5f 84       	ldd	r5, Y+15	; 0x0f
    234a:	6e 84       	ldd	r6, Y+14	; 0x0e
    234c:	7d 84       	ldd	r7, Y+13	; 0x0d
    234e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2350:	9b 84       	ldd	r9, Y+11	; 0x0b
    2352:	aa 84       	ldd	r10, Y+10	; 0x0a
    2354:	b9 84       	ldd	r11, Y+9	; 0x09
    2356:	c8 84       	ldd	r12, Y+8	; 0x08
    2358:	df 80       	ldd	r13, Y+7	; 0x07
    235a:	ee 80       	ldd	r14, Y+6	; 0x06
    235c:	fd 80       	ldd	r15, Y+5	; 0x05
    235e:	0c 81       	ldd	r16, Y+4	; 0x04
    2360:	1b 81       	ldd	r17, Y+3	; 0x03
    2362:	aa 81       	ldd	r26, Y+2	; 0x02
    2364:	b9 81       	ldd	r27, Y+1	; 0x01
    2366:	ce 0f       	add	r28, r30
    2368:	d1 1d       	adc	r29, r1
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	ed 01       	movw	r28, r26
    2376:	08 95       	ret

00002378 <_exit>:
    2378:	f8 94       	cli

0000237a <__stop_program>:
    237a:	ff cf       	rjmp	.-2      	; 0x237a <__stop_program>
