
PWM_G_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000ad0  00000b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080006e  0080006e  00000b72  2**0
                  ALLOC
  3 .stab         000017b8  00000000  00000000  00000b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ff8  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <main>
  8a:	0c 94 66 05 	jmp	0xacc	; 0xacc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <M_Timer_Void_TimerInit>:
  92:	e3 e5       	ldi	r30, 0x53	; 83
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	8f 7b       	andi	r24, 0xBF	; 191
  9a:	80 83       	st	Z, r24
  9c:	80 81       	ld	r24, Z
  9e:	88 60       	ori	r24, 0x08	; 8
  a0:	80 83       	st	Z, r24
  a2:	e9 e5       	ldi	r30, 0x59	; 89
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	80 83       	st	Z, r24
  ac:	08 95       	ret

000000ae <M_Timer_Void_TimerStart>:
}

void M_Timer_Void_TimerStart()
{
#if   TIMER_PRESCALER_DV   ==   1024
		SET_BIT(TCCR0_REG,CS00_BIT);
  ae:	e3 e5       	ldi	r30, 0x53	; 83
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
  b8:	80 81       	ld	r24, Z
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG,CS02_BIT);
  be:	80 81       	ld	r24, Z
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	80 83       	st	Z, r24
#elif TIMER_PRESCALER_DV   ==   256
		CLR_BIT(TCCR0_REG,CS00_BIT);
		CLR_BIT(TCCR0_REG,CS01_BIT);
		SET_BIT(TCCR0_REG,CS02_BIT);
#endif
}
  c4:	08 95       	ret

000000c6 <M_Timer_Void_TimerStop>:

void M_Timer_Void_TimerStop()
{
		CLR_BIT(TCCR0_REG,CS00_BIT);
  c6:	e3 e5       	ldi	r30, 0x53	; 83
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
  d0:	80 81       	ld	r24, Z
  d2:	8d 7f       	andi	r24, 0xFD	; 253
  d4:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS02_BIT);
  d6:	80 81       	ld	r24, Z
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	80 83       	st	Z, r24
}
  dc:	08 95       	ret

000000de <M_Timer_Void_PWMSetDutyCycle>:
		SET_BIT(TCCR0_REG,COM01_BIT);
#endif
}

void M_Timer_Void_PWMSetDutyCycle(u8 Copy_U8_DutyCycle)
{
  de:	98 2f       	mov	r25, r24
#if   PWM0_MODE   ==   FAST_PWM
#if   PWM0_MODE2   ==   NON_INVERTED
		if(Copy_U8_DutyCycle == 0)
  e0:	88 23       	and	r24, r24
  e2:	11 f4       	brne	.+4      	; 0xe8 <M_Timer_Void_PWMSetDutyCycle+0xa>
		{
			OCR0_REG = 0;
  e4:	1c be       	out	0x3c, r1	; 60
  e6:	08 95       	ret
		}
		else
		{
			OCR0_REG = ((Copy_U8_DutyCycle * 256) / 100)  -1;
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	64 e6       	ldi	r22, 0x64	; 100
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	0e 94 02 05 	call	0xa04	; 0xa04 <__divmodhi4>
  f2:	61 50       	subi	r22, 0x01	; 1
  f4:	6c bf       	out	0x3c, r22	; 60
  f6:	08 95       	ret

000000f8 <M_Timer_Void_PWMSetFrequency>:
#endif

}
void M_Timer_Void_PWMSetFrequency(u8 Copy_U8_Freq)
{
	ICR1_REG = ((F_OSC * 1000000 / 256) / Copy_U8_Freq);
  f8:	28 2f       	mov	r18, r24
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	64 e2       	ldi	r22, 0x24	; 36
 102:	74 ef       	ldi	r23, 0xF4	; 244
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 15 05 	call	0xa2a	; 0xa2a <__divmodsi4>
 10c:	37 bd       	out	0x27, r19	; 39
 10e:	26 bd       	out	0x26, r18	; 38
}
 110:	08 95       	ret

00000112 <M_Timer_Void_PWMStart>:
void M_Timer_Void_PWMStart()
{
	M_Timer_Void_TimerStart(); //prescalar set
 112:	0e 94 57 00 	call	0xae	; 0xae <M_Timer_Void_TimerStart>
}
 116:	08 95       	ret

00000118 <M_Timer_Void_PWMStop>:
void M_Timer_Void_PWMStop()
{
	M_Timer_Void_TimerStop();
 118:	0e 94 63 00 	call	0xc6	; 0xc6 <M_Timer_Void_TimerStop>
}
 11c:	08 95       	ret

0000011e <M_Timer_Void_PWMDutyOsc>:
	if (Local_U8_Duty=100)
		{	M_Timer_Void_PWMDutyOsc();	}

}*/
void M_Timer_Void_PWMDutyOsc()
{
 11e:	2f 92       	push	r2
 120:	3f 92       	push	r3
 122:	4f 92       	push	r4
 124:	5f 92       	push	r5
 126:	6f 92       	push	r6
 128:	7f 92       	push	r7
 12a:	8f 92       	push	r8
 12c:	9f 92       	push	r9
 12e:	af 92       	push	r10
 130:	bf 92       	push	r11
 132:	cf 92       	push	r12
 134:	df 92       	push	r13
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
	int LocalCounterDC		=	10;
	int LocalCounterLoopUp	=	1;
	int LocalCounterUpper	=	0;
	int LocalCounterLower	=	0;
	int LocalCounterLoopDown	=	0;
	M_DIO_Void_SetPinValue(ON_PIN,HIGH);
 142:	8a e2       	ldi	r24, 0x2A	; 42
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>
 14a:	0f 2e       	mov	r0, r31
 14c:	fa e0       	ldi	r31, 0x0A	; 10
 14e:	af 2e       	mov	r10, r31
 150:	bb 24       	eor	r11, r11
 152:	f0 2d       	mov	r31, r0
			H_LCD_Void_LCDGoTo(1,0);
			LocalCounterUpper = LocalCounterDC /10;

			for (LocalCounterLoopUp= 1; LocalCounterLoopUp<=LocalCounterUpper; LocalCounterLoopUp++)
				{
				H_LCD_Void_LCDWriteString("-");
 154:	80 e6       	ldi	r24, 0x60	; 96
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	68 2e       	mov	r6, r24
 15a:	89 2e       	mov	r8, r25
				}

			LocalCounterLoopDown = 10 - LocalCounterUpper;
			for (LocalCounterLower= LocalCounterLoopDown; LocalCounterLower>=0; LocalCounterLower--)
			{
			H_LCD_Void_LCDWriteString("_");
 15c:	82 e6       	ldi	r24, 0x62	; 98
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	78 2e       	mov	r7, r24
 162:	99 2e       	mov	r9, r25
			}

			H_LCD_Void_LCDGoTo(0,0);
			H_LCD_Void_LCDWriteString("DC=");
 164:	0f 2e       	mov	r0, r31
 166:	f4 e6       	ldi	r31, 0x64	; 100
 168:	4f 2e       	mov	r4, r31
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	5f 2e       	mov	r5, r31
 16e:	f0 2d       	mov	r31, r0
			H_LCD_Void_LCDGoTo(0,5);
			H_LCD_Void_LCDWriteNumber(LocalCounterDC);
			H_LCD_Void_LCDGoTo(0,8);
			H_LCD_Void_LCDWriteString("3.8Hz");
 170:	0f 2e       	mov	r0, r31
 172:	f8 e6       	ldi	r31, 0x68	; 104
 174:	2f 2e       	mov	r2, r31
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	3f 2e       	mov	r3, r31
 17a:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17c:	0f 2e       	mov	r0, r31
 17e:	f0 e9       	ldi	r31, 0x90	; 144
 180:	ef 2e       	mov	r14, r31
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	ff 2e       	mov	r15, r31
 186:	f0 2d       	mov	r31, r0
 188:	c7 01       	movw	r24, r14
 18a:	ce 2c       	mov	r12, r14
 18c:	d9 2e       	mov	r13, r25
	M_DIO_Void_SetPinValue(ON_PIN,HIGH);


			while (LocalCounterDC <=100)
		{
			M_Timer_Void_PWMSetDutyCycle(LocalCounterDC);
 18e:	8a 2d       	mov	r24, r10
 190:	0e 94 6f 00 	call	0xde	; 0xde <M_Timer_Void_PWMSetDutyCycle>
			H_LCD_Void_LCDGoTo(1,0);
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <H_LCD_Void_LCDGoTo>
			LocalCounterUpper = LocalCounterDC /10;
 1a0:	c5 01       	movw	r24, r10
 1a2:	6a e0       	ldi	r22, 0x0A	; 10
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	0e 94 02 05 	call	0xa04	; 0xa04 <__divmodhi4>
 1aa:	86 2f       	mov	r24, r22
 1ac:	97 2f       	mov	r25, r23
 1ae:	8c 01       	movw	r16, r24

			for (LocalCounterLoopUp= 1; LocalCounterLoopUp<=LocalCounterUpper; LocalCounterLoopUp++)
 1b0:	10 16       	cp	r1, r16
 1b2:	11 06       	cpc	r1, r17
 1b4:	54 f4       	brge	.+20     	; 0x1ca <M_Timer_Void_PWMDutyOsc+0xac>
 1b6:	c1 e0       	ldi	r28, 0x01	; 1
 1b8:	d0 e0       	ldi	r29, 0x00	; 0
				{
				H_LCD_Void_LCDWriteString("-");
 1ba:	86 2d       	mov	r24, r6
 1bc:	98 2d       	mov	r25, r8
 1be:	0e 94 94 04 	call	0x928	; 0x928 <H_LCD_Void_LCDWriteString>
		{
			M_Timer_Void_PWMSetDutyCycle(LocalCounterDC);
			H_LCD_Void_LCDGoTo(1,0);
			LocalCounterUpper = LocalCounterDC /10;

			for (LocalCounterLoopUp= 1; LocalCounterLoopUp<=LocalCounterUpper; LocalCounterLoopUp++)
 1c2:	21 96       	adiw	r28, 0x01	; 1
 1c4:	0c 17       	cp	r16, r28
 1c6:	1d 07       	cpc	r17, r29
 1c8:	c4 f7       	brge	.-16     	; 0x1ba <M_Timer_Void_PWMDutyOsc+0x9c>
				{
				H_LCD_Void_LCDWriteString("-");
				}

			LocalCounterLoopDown = 10 - LocalCounterUpper;
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	80 1b       	sub	r24, r16
 1d0:	91 0b       	sbc	r25, r17
			for (LocalCounterLower= LocalCounterLoopDown; LocalCounterLower>=0; LocalCounterLower--)
 1d2:	3a f0       	brmi	.+14     	; 0x1e2 <M_Timer_Void_PWMDutyOsc+0xc4>
 1d4:	ec 01       	movw	r28, r24
			{
			H_LCD_Void_LCDWriteString("_");
 1d6:	87 2d       	mov	r24, r7
 1d8:	99 2d       	mov	r25, r9
 1da:	0e 94 94 04 	call	0x928	; 0x928 <H_LCD_Void_LCDWriteString>
				{
				H_LCD_Void_LCDWriteString("-");
				}

			LocalCounterLoopDown = 10 - LocalCounterUpper;
			for (LocalCounterLower= LocalCounterLoopDown; LocalCounterLower>=0; LocalCounterLower--)
 1de:	21 97       	sbiw	r28, 0x01	; 1
 1e0:	d2 f7       	brpl	.-12     	; 0x1d6 <M_Timer_Void_PWMDutyOsc+0xb8>
			{
			H_LCD_Void_LCDWriteString("_");
			}

			H_LCD_Void_LCDGoTo(0,0);
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <H_LCD_Void_LCDGoTo>
			H_LCD_Void_LCDWriteString("DC=");
 1ee:	c2 01       	movw	r24, r4
 1f0:	0e 94 94 04 	call	0x928	; 0x928 <H_LCD_Void_LCDWriteString>
			H_LCD_Void_LCDGoTo(0,5);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	65 e0       	ldi	r22, 0x05	; 5
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <H_LCD_Void_LCDGoTo>
			H_LCD_Void_LCDWriteNumber(LocalCounterDC);
 200:	c5 01       	movw	r24, r10
 202:	0e 94 24 04 	call	0x848	; 0x848 <H_LCD_Void_LCDWriteNumber>
			H_LCD_Void_LCDGoTo(0,8);
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	68 e0       	ldi	r22, 0x08	; 8
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <H_LCD_Void_LCDGoTo>
			H_LCD_Void_LCDWriteString("3.8Hz");
 212:	c1 01       	movw	r24, r2
 214:	0e 94 94 04 	call	0x928	; 0x928 <H_LCD_Void_LCDWriteString>
 218:	24 ec       	ldi	r18, 0xC4	; 196
 21a:	39 e0       	ldi	r19, 0x09	; 9
 21c:	c7 01       	movw	r24, r14
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <M_Timer_Void_PWMDutyOsc+0x100>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 222:	21 50       	subi	r18, 0x01	; 1
 224:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 226:	d1 f7       	brne	.-12     	; 0x21c <M_Timer_Void_PWMDutyOsc+0xfe>
			_delay_ms(250);
			H_LCD_Void_LCDClear();
 228:	0e 94 d5 03 	call	0x7aa	; 0x7aa <H_LCD_Void_LCDClear>
			LocalCounterDC +=10;
 22c:	8a e0       	ldi	r24, 0x0A	; 10
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	a8 0e       	add	r10, r24
 232:	b9 1e       	adc	r11, r25
	int LocalCounterLower	=	0;
	int LocalCounterLoopDown	=	0;
	M_DIO_Void_SetPinValue(ON_PIN,HIGH);


			while (LocalCounterDC <=100)
 234:	9e e6       	ldi	r25, 0x6E	; 110
 236:	a9 16       	cp	r10, r25
 238:	b1 04       	cpc	r11, r1
 23a:	09 f0       	breq	.+2      	; 0x23e <M_Timer_Void_PWMDutyOsc+0x120>
 23c:	a8 cf       	rjmp	.-176    	; 0x18e <M_Timer_Void_PWMDutyOsc+0x70>
			_delay_ms(250);
			H_LCD_Void_LCDClear();
			LocalCounterDC +=10;
		}

}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	df 90       	pop	r13
 24c:	cf 90       	pop	r12
 24e:	bf 90       	pop	r11
 250:	af 90       	pop	r10
 252:	9f 90       	pop	r9
 254:	8f 90       	pop	r8
 256:	7f 90       	pop	r7
 258:	6f 90       	pop	r6
 25a:	5f 90       	pop	r5
 25c:	4f 90       	pop	r4
 25e:	3f 90       	pop	r3
 260:	2f 90       	pop	r2
 262:	08 95       	ret

00000264 <M_Timer_Void_PWMInit>:
		CLR_BIT(TCCR0_REG,CS02_BIT);
}

void M_Timer_Void_PWMInit()
{
		M_DIO_Void_SetPinDirection(PWM_PIN,OUTPUT);
 264:	87 e1       	ldi	r24, 0x17	; 23
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	0e 94 45 01 	call	0x28a	; 0x28a <M_DIO_Void_SetPinDirection>

#if   PWM0_MODE   ==   FAST_PWM
		SET_BIT(TCCR0_REG,WGM00_BIT);
 26c:	e3 e5       	ldi	r30, 0x53	; 83
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	80 64       	ori	r24, 0x40	; 64
 274:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG,WGM01_BIT);
 276:	80 81       	ld	r24, Z
 278:	88 60       	ori	r24, 0x08	; 8
 27a:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,WGM01_BIT);
#endif


#if   PWM0_MODE2   ==   NON_INVERTED
		CLR_BIT(TCCR0_REG,COM00_BIT);
 27c:	80 81       	ld	r24, Z
 27e:	8f 7e       	andi	r24, 0xEF	; 239
 280:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG,COM01_BIT);
 282:	80 81       	ld	r24, Z
 284:	80 62       	ori	r24, 0x20	; 32
 286:	80 83       	st	Z, r24
#elif PWM0_MODE2   ==   INVERTED
		SET_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
#endif
}
 288:	08 95       	ret

0000028a <M_DIO_Void_SetPinDirection>:
#include "DIO_Private.h"
#include "DIO_Interface.h"


void M_DIO_Void_SetPinDirection(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
 28a:	28 2f       	mov	r18, r24
 28c:	36 2f       	mov	r19, r22
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
 28e:	6a e0       	ldi	r22, 0x0A	; 10
 290:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 294:	49 2f       	mov	r20, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
 296:	82 2f       	mov	r24, r18
 298:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
			switch(Copy_U8_State)
 29c:	33 23       	and	r19, r19
 29e:	21 f0       	breq	.+8      	; 0x2a8 <M_DIO_Void_SetPinDirection+0x1e>
 2a0:	31 30       	cpi	r19, 0x01	; 1
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <M_DIO_Void_SetPinDirection+0x1c>
 2a4:	86 c0       	rjmp	.+268    	; 0x3b2 <M_DIO_Void_SetPinDirection+0x128>
 2a6:	46 c0       	rjmp	.+140    	; 0x334 <M_DIO_Void_SetPinDirection+0xaa>
			{
			case INPUT :
				switch(Local_U8_Port)
 2a8:	82 30       	cpi	r24, 0x02	; 2
 2aa:	d1 f0       	breq	.+52     	; 0x2e0 <M_DIO_Void_SetPinDirection+0x56>
 2ac:	83 30       	cpi	r24, 0x03	; 3
 2ae:	20 f4       	brcc	.+8      	; 0x2b8 <M_DIO_Void_SetPinDirection+0x2e>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <M_DIO_Void_SetPinDirection+0x2c>
 2b4:	7e c0       	rjmp	.+252    	; 0x3b2 <M_DIO_Void_SetPinDirection+0x128>
 2b6:	06 c0       	rjmp	.+12     	; 0x2c4 <M_DIO_Void_SetPinDirection+0x3a>
 2b8:	83 30       	cpi	r24, 0x03	; 3
 2ba:	01 f1       	breq	.+64     	; 0x2fc <M_DIO_Void_SetPinDirection+0x72>
 2bc:	84 30       	cpi	r24, 0x04	; 4
 2be:	09 f0       	breq	.+2      	; 0x2c2 <M_DIO_Void_SetPinDirection+0x38>
 2c0:	78 c0       	rjmp	.+240    	; 0x3b2 <M_DIO_Void_SetPinDirection+0x128>
 2c2:	2a c0       	rjmp	.+84     	; 0x318 <M_DIO_Void_SetPinDirection+0x8e>
				{
				case 1: CLR_BIT(DDRA_REG,Local_U8_Pin); break;
 2c4:	ea e3       	ldi	r30, 0x3A	; 58
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	20 81       	ld	r18, Z
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <M_DIO_Void_SetPinDirection+0x4a>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	4a 95       	dec	r20
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <M_DIO_Void_SetPinDirection+0x46>
 2d8:	80 95       	com	r24
 2da:	82 23       	and	r24, r18
 2dc:	80 83       	st	Z, r24
 2de:	08 95       	ret
				case 2: CLR_BIT(DDRB_REG,Local_U8_Pin); break;
 2e0:	e7 e3       	ldi	r30, 0x37	; 55
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	20 81       	ld	r18, Z
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <M_DIO_Void_SetPinDirection+0x66>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	4a 95       	dec	r20
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <M_DIO_Void_SetPinDirection+0x62>
 2f4:	80 95       	com	r24
 2f6:	82 23       	and	r24, r18
 2f8:	80 83       	st	Z, r24
 2fa:	08 95       	ret
				case 3: CLR_BIT(DDRC_REG,Local_U8_Pin); break;
 2fc:	e4 e3       	ldi	r30, 0x34	; 52
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	20 81       	ld	r18, Z
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <M_DIO_Void_SetPinDirection+0x82>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	4a 95       	dec	r20
 30e:	e2 f7       	brpl	.-8      	; 0x308 <M_DIO_Void_SetPinDirection+0x7e>
 310:	80 95       	com	r24
 312:	82 23       	and	r24, r18
 314:	80 83       	st	Z, r24
 316:	08 95       	ret
				case 4: CLR_BIT(DDRD_REG,Local_U8_Pin); break;
 318:	e1 e3       	ldi	r30, 0x31	; 49
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	20 81       	ld	r18, Z
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <M_DIO_Void_SetPinDirection+0x9e>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	4a 95       	dec	r20
 32a:	e2 f7       	brpl	.-8      	; 0x324 <M_DIO_Void_SetPinDirection+0x9a>
 32c:	80 95       	com	r24
 32e:	82 23       	and	r24, r18
 330:	80 83       	st	Z, r24
 332:	08 95       	ret
				default:                                break;
				}
				break;
			case OUTPUT:
				switch(Local_U8_Port)
 334:	82 30       	cpi	r24, 0x02	; 2
 336:	b9 f0       	breq	.+46     	; 0x366 <M_DIO_Void_SetPinDirection+0xdc>
 338:	83 30       	cpi	r24, 0x03	; 3
 33a:	18 f4       	brcc	.+6      	; 0x342 <M_DIO_Void_SetPinDirection+0xb8>
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	c9 f5       	brne	.+114    	; 0x3b2 <M_DIO_Void_SetPinDirection+0x128>
 340:	05 c0       	rjmp	.+10     	; 0x34c <M_DIO_Void_SetPinDirection+0xc2>
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	e9 f0       	breq	.+58     	; 0x380 <M_DIO_Void_SetPinDirection+0xf6>
 346:	84 30       	cpi	r24, 0x04	; 4
 348:	a1 f5       	brne	.+104    	; 0x3b2 <M_DIO_Void_SetPinDirection+0x128>
 34a:	27 c0       	rjmp	.+78     	; 0x39a <M_DIO_Void_SetPinDirection+0x110>
				{
				case 1: SET_BIT(DDRA_REG,Local_U8_Pin); break;
 34c:	ea e3       	ldi	r30, 0x3A	; 58
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	20 81       	ld	r18, Z
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <M_DIO_Void_SetPinDirection+0xd2>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	4a 95       	dec	r20
 35e:	e2 f7       	brpl	.-8      	; 0x358 <M_DIO_Void_SetPinDirection+0xce>
 360:	28 2b       	or	r18, r24
 362:	20 83       	st	Z, r18
 364:	08 95       	ret
				case 2: SET_BIT(DDRB_REG,Local_U8_Pin); break;
 366:	e7 e3       	ldi	r30, 0x37	; 55
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	20 81       	ld	r18, Z
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <M_DIO_Void_SetPinDirection+0xec>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	4a 95       	dec	r20
 378:	e2 f7       	brpl	.-8      	; 0x372 <M_DIO_Void_SetPinDirection+0xe8>
 37a:	28 2b       	or	r18, r24
 37c:	20 83       	st	Z, r18
 37e:	08 95       	ret
				case 3: SET_BIT(DDRC_REG,Local_U8_Pin); break;
 380:	e4 e3       	ldi	r30, 0x34	; 52
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	20 81       	ld	r18, Z
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <M_DIO_Void_SetPinDirection+0x106>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	4a 95       	dec	r20
 392:	e2 f7       	brpl	.-8      	; 0x38c <M_DIO_Void_SetPinDirection+0x102>
 394:	28 2b       	or	r18, r24
 396:	20 83       	st	Z, r18
 398:	08 95       	ret
				case 4: SET_BIT(DDRD_REG,Local_U8_Pin); break;
 39a:	e1 e3       	ldi	r30, 0x31	; 49
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	20 81       	ld	r18, Z
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <M_DIO_Void_SetPinDirection+0x120>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	4a 95       	dec	r20
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <M_DIO_Void_SetPinDirection+0x11c>
 3ae:	28 2b       	or	r18, r24
 3b0:	20 83       	st	Z, r18
 3b2:	08 95       	ret

000003b4 <M_DIO_Void_SetPinValue>:
				default:                                break;
			}
}

void M_DIO_Void_SetPinValue(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
 3b4:	28 2f       	mov	r18, r24
 3b6:	36 2f       	mov	r19, r22
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
 3b8:	6a e0       	ldi	r22, 0x0A	; 10
 3ba:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 3be:	49 2f       	mov	r20, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
 3c0:	82 2f       	mov	r24, r18
 3c2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
			switch(Copy_U8_State)
 3c6:	33 23       	and	r19, r19
 3c8:	21 f0       	breq	.+8      	; 0x3d2 <M_DIO_Void_SetPinValue+0x1e>
 3ca:	31 30       	cpi	r19, 0x01	; 1
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <M_DIO_Void_SetPinValue+0x1c>
 3ce:	86 c0       	rjmp	.+268    	; 0x4dc <M_DIO_Void_SetPinValue+0x128>
 3d0:	46 c0       	rjmp	.+140    	; 0x45e <M_DIO_Void_SetPinValue+0xaa>
			{
			case LOW :
				switch(Local_U8_Port)
 3d2:	82 30       	cpi	r24, 0x02	; 2
 3d4:	d1 f0       	breq	.+52     	; 0x40a <M_DIO_Void_SetPinValue+0x56>
 3d6:	83 30       	cpi	r24, 0x03	; 3
 3d8:	20 f4       	brcc	.+8      	; 0x3e2 <M_DIO_Void_SetPinValue+0x2e>
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	09 f0       	breq	.+2      	; 0x3e0 <M_DIO_Void_SetPinValue+0x2c>
 3de:	7e c0       	rjmp	.+252    	; 0x4dc <M_DIO_Void_SetPinValue+0x128>
 3e0:	06 c0       	rjmp	.+12     	; 0x3ee <M_DIO_Void_SetPinValue+0x3a>
 3e2:	83 30       	cpi	r24, 0x03	; 3
 3e4:	01 f1       	breq	.+64     	; 0x426 <M_DIO_Void_SetPinValue+0x72>
 3e6:	84 30       	cpi	r24, 0x04	; 4
 3e8:	09 f0       	breq	.+2      	; 0x3ec <M_DIO_Void_SetPinValue+0x38>
 3ea:	78 c0       	rjmp	.+240    	; 0x4dc <M_DIO_Void_SetPinValue+0x128>
 3ec:	2a c0       	rjmp	.+84     	; 0x442 <M_DIO_Void_SetPinValue+0x8e>
				{
				case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
 3ee:	eb e3       	ldi	r30, 0x3B	; 59
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	20 81       	ld	r18, Z
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <M_DIO_Void_SetPinValue+0x4a>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	4a 95       	dec	r20
 400:	e2 f7       	brpl	.-8      	; 0x3fa <M_DIO_Void_SetPinValue+0x46>
 402:	80 95       	com	r24
 404:	82 23       	and	r24, r18
 406:	80 83       	st	Z, r24
 408:	08 95       	ret
				case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
 40a:	e8 e3       	ldi	r30, 0x38	; 56
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	20 81       	ld	r18, Z
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <M_DIO_Void_SetPinValue+0x66>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	4a 95       	dec	r20
 41c:	e2 f7       	brpl	.-8      	; 0x416 <M_DIO_Void_SetPinValue+0x62>
 41e:	80 95       	com	r24
 420:	82 23       	and	r24, r18
 422:	80 83       	st	Z, r24
 424:	08 95       	ret
				case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
 426:	e5 e3       	ldi	r30, 0x35	; 53
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	20 81       	ld	r18, Z
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <M_DIO_Void_SetPinValue+0x82>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	4a 95       	dec	r20
 438:	e2 f7       	brpl	.-8      	; 0x432 <M_DIO_Void_SetPinValue+0x7e>
 43a:	80 95       	com	r24
 43c:	82 23       	and	r24, r18
 43e:	80 83       	st	Z, r24
 440:	08 95       	ret
				case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
 442:	e2 e3       	ldi	r30, 0x32	; 50
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	20 81       	ld	r18, Z
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <M_DIO_Void_SetPinValue+0x9e>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	4a 95       	dec	r20
 454:	e2 f7       	brpl	.-8      	; 0x44e <M_DIO_Void_SetPinValue+0x9a>
 456:	80 95       	com	r24
 458:	82 23       	and	r24, r18
 45a:	80 83       	st	Z, r24
 45c:	08 95       	ret
				default:                                 break;
				}
				break;
			case HIGH:
				switch(Local_U8_Port)
 45e:	82 30       	cpi	r24, 0x02	; 2
 460:	b9 f0       	breq	.+46     	; 0x490 <M_DIO_Void_SetPinValue+0xdc>
 462:	83 30       	cpi	r24, 0x03	; 3
 464:	18 f4       	brcc	.+6      	; 0x46c <M_DIO_Void_SetPinValue+0xb8>
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	c9 f5       	brne	.+114    	; 0x4dc <M_DIO_Void_SetPinValue+0x128>
 46a:	05 c0       	rjmp	.+10     	; 0x476 <M_DIO_Void_SetPinValue+0xc2>
 46c:	83 30       	cpi	r24, 0x03	; 3
 46e:	e9 f0       	breq	.+58     	; 0x4aa <M_DIO_Void_SetPinValue+0xf6>
 470:	84 30       	cpi	r24, 0x04	; 4
 472:	a1 f5       	brne	.+104    	; 0x4dc <M_DIO_Void_SetPinValue+0x128>
 474:	27 c0       	rjmp	.+78     	; 0x4c4 <M_DIO_Void_SetPinValue+0x110>
				{
				case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
 476:	eb e3       	ldi	r30, 0x3B	; 59
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	20 81       	ld	r18, Z
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <M_DIO_Void_SetPinValue+0xd2>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	4a 95       	dec	r20
 488:	e2 f7       	brpl	.-8      	; 0x482 <M_DIO_Void_SetPinValue+0xce>
 48a:	28 2b       	or	r18, r24
 48c:	20 83       	st	Z, r18
 48e:	08 95       	ret
				case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
 490:	e8 e3       	ldi	r30, 0x38	; 56
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	20 81       	ld	r18, Z
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <M_DIO_Void_SetPinValue+0xec>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	4a 95       	dec	r20
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <M_DIO_Void_SetPinValue+0xe8>
 4a4:	28 2b       	or	r18, r24
 4a6:	20 83       	st	Z, r18
 4a8:	08 95       	ret
				case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
 4aa:	e5 e3       	ldi	r30, 0x35	; 53
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	20 81       	ld	r18, Z
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <M_DIO_Void_SetPinValue+0x106>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	4a 95       	dec	r20
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <M_DIO_Void_SetPinValue+0x102>
 4be:	28 2b       	or	r18, r24
 4c0:	20 83       	st	Z, r18
 4c2:	08 95       	ret
				case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
 4c4:	e2 e3       	ldi	r30, 0x32	; 50
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	20 81       	ld	r18, Z
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <M_DIO_Void_SetPinValue+0x120>
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	4a 95       	dec	r20
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <M_DIO_Void_SetPinValue+0x11c>
 4d8:	28 2b       	or	r18, r24
 4da:	20 83       	st	Z, r18
 4dc:	08 95       	ret

000004de <M_DIO_Void_TogPin>:
				break;
				default:                                 break;
			}
}
void M_DIO_Void_TogPin(u8 Copy_U8_Num)
{
 4de:	28 2f       	mov	r18, r24
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
 4e0:	6a e0       	ldi	r22, 0x0A	; 10
 4e2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 4e6:	39 2f       	mov	r19, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
	switch(Local_U8_Port)
 4e8:	82 2f       	mov	r24, r18
 4ea:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	b9 f0       	breq	.+46     	; 0x520 <M_DIO_Void_TogPin+0x42>
 4f2:	83 30       	cpi	r24, 0x03	; 3
 4f4:	18 f4       	brcc	.+6      	; 0x4fc <M_DIO_Void_TogPin+0x1e>
 4f6:	81 30       	cpi	r24, 0x01	; 1
 4f8:	c9 f5       	brne	.+114    	; 0x56c <M_DIO_Void_TogPin+0x8e>
 4fa:	05 c0       	rjmp	.+10     	; 0x506 <M_DIO_Void_TogPin+0x28>
 4fc:	83 30       	cpi	r24, 0x03	; 3
 4fe:	e9 f0       	breq	.+58     	; 0x53a <M_DIO_Void_TogPin+0x5c>
 500:	84 30       	cpi	r24, 0x04	; 4
 502:	a1 f5       	brne	.+104    	; 0x56c <M_DIO_Void_TogPin+0x8e>
 504:	27 c0       	rjmp	.+78     	; 0x554 <M_DIO_Void_TogPin+0x76>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Pin); break;
 506:	eb e3       	ldi	r30, 0x3B	; 59
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	20 81       	ld	r18, Z
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <M_DIO_Void_TogPin+0x38>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	3a 95       	dec	r19
 518:	e2 f7       	brpl	.-8      	; 0x512 <M_DIO_Void_TogPin+0x34>
 51a:	28 27       	eor	r18, r24
 51c:	20 83       	st	Z, r18
 51e:	08 95       	ret
	case 2: TOG_BIT(PORTB_REG,Local_U8_Pin); break;
 520:	e8 e3       	ldi	r30, 0x38	; 56
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	20 81       	ld	r18, Z
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <M_DIO_Void_TogPin+0x52>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	3a 95       	dec	r19
 532:	e2 f7       	brpl	.-8      	; 0x52c <M_DIO_Void_TogPin+0x4e>
 534:	28 27       	eor	r18, r24
 536:	20 83       	st	Z, r18
 538:	08 95       	ret
	case 3: TOG_BIT(PORTC_REG,Local_U8_Pin); break;
 53a:	e5 e3       	ldi	r30, 0x35	; 53
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	20 81       	ld	r18, Z
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <M_DIO_Void_TogPin+0x6c>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	3a 95       	dec	r19
 54c:	e2 f7       	brpl	.-8      	; 0x546 <M_DIO_Void_TogPin+0x68>
 54e:	28 27       	eor	r18, r24
 550:	20 83       	st	Z, r18
 552:	08 95       	ret
	case 4: TOG_BIT(PORTD_REG,Local_U8_Pin); break;
 554:	e2 e3       	ldi	r30, 0x32	; 50
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	20 81       	ld	r18, Z
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 c0       	rjmp	.+4      	; 0x564 <M_DIO_Void_TogPin+0x86>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	3a 95       	dec	r19
 566:	e2 f7       	brpl	.-8      	; 0x560 <M_DIO_Void_TogPin+0x82>
 568:	28 27       	eor	r18, r24
 56a:	20 83       	st	Z, r18
 56c:	08 95       	ret

0000056e <M_DIO_U8_GetPinValue>:
	default:                                 break;
	}
}
u8   M_DIO_U8_GetPinValue(u8 Copy_U8_Num)
{
 56e:	28 2f       	mov	r18, r24
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
 570:	6a e0       	ldi	r22, 0x0A	; 10
 572:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 576:	39 2f       	mov	r19, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
	u8 Local_U8_Reading = 0;
	switch(Local_U8_Port)
 578:	82 2f       	mov	r24, r18
 57a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 57e:	82 30       	cpi	r24, 0x02	; 2
 580:	a1 f0       	breq	.+40     	; 0x5aa <M_DIO_U8_GetPinValue+0x3c>
 582:	83 30       	cpi	r24, 0x03	; 3
 584:	18 f4       	brcc	.+6      	; 0x58c <M_DIO_U8_GetPinValue+0x1e>
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	29 f4       	brne	.+10     	; 0x594 <M_DIO_U8_GetPinValue+0x26>
 58a:	06 c0       	rjmp	.+12     	; 0x598 <M_DIO_U8_GetPinValue+0x2a>
 58c:	83 30       	cpi	r24, 0x03	; 3
 58e:	b1 f0       	breq	.+44     	; 0x5bc <M_DIO_U8_GetPinValue+0x4e>
 590:	84 30       	cpi	r24, 0x04	; 4
 592:	e9 f0       	breq	.+58     	; 0x5ce <M_DIO_U8_GetPinValue+0x60>
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	08 95       	ret
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Pin); break;
 598:	89 b3       	in	r24, 0x19	; 25
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <M_DIO_U8_GetPinValue+0x34>
 59e:	95 95       	asr	r25
 5a0:	87 95       	ror	r24
 5a2:	3a 95       	dec	r19
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <M_DIO_U8_GetPinValue+0x30>
 5a6:	81 70       	andi	r24, 0x01	; 1
 5a8:	08 95       	ret
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Pin); break;
 5aa:	86 b3       	in	r24, 0x16	; 22
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <M_DIO_U8_GetPinValue+0x46>
 5b0:	95 95       	asr	r25
 5b2:	87 95       	ror	r24
 5b4:	3a 95       	dec	r19
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <M_DIO_U8_GetPinValue+0x42>
 5b8:	81 70       	andi	r24, 0x01	; 1
 5ba:	08 95       	ret
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Pin); break;
 5bc:	83 b3       	in	r24, 0x13	; 19
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <M_DIO_U8_GetPinValue+0x58>
 5c2:	95 95       	asr	r25
 5c4:	87 95       	ror	r24
 5c6:	3a 95       	dec	r19
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <M_DIO_U8_GetPinValue+0x54>
 5ca:	81 70       	andi	r24, 0x01	; 1
 5cc:	08 95       	ret
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Pin); break;
 5ce:	80 b3       	in	r24, 0x10	; 16
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <M_DIO_U8_GetPinValue+0x6a>
 5d4:	95 95       	asr	r25
 5d6:	87 95       	ror	r24
 5d8:	3a 95       	dec	r19
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <M_DIO_U8_GetPinValue+0x66>
 5dc:	81 70       	andi	r24, 0x01	; 1
	default:                                                   break;
	}
	return Local_U8_Reading;
}
 5de:	08 95       	ret

000005e0 <M_DIO_Void_SetPinPullUpRes>:
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Num,u8 Copy_U8_State)
{
 5e0:	28 2f       	mov	r18, r24
 5e2:	36 2f       	mov	r19, r22
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
 5e4:	6a e0       	ldi	r22, 0x0A	; 10
 5e6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 5ea:	49 2f       	mov	r20, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
 5ec:	82 2f       	mov	r24, r18
 5ee:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
			switch(Copy_U8_State)
 5f2:	33 23       	and	r19, r19
 5f4:	21 f0       	breq	.+8      	; 0x5fe <M_DIO_Void_SetPinPullUpRes+0x1e>
 5f6:	31 30       	cpi	r19, 0x01	; 1
 5f8:	09 f0       	breq	.+2      	; 0x5fc <M_DIO_Void_SetPinPullUpRes+0x1c>
 5fa:	86 c0       	rjmp	.+268    	; 0x708 <M_DIO_Void_SetPinPullUpRes+0x128>
 5fc:	46 c0       	rjmp	.+140    	; 0x68a <M_DIO_Void_SetPinPullUpRes+0xaa>
			{
			case DISABLE :
				switch(Local_U8_Port)
 5fe:	82 30       	cpi	r24, 0x02	; 2
 600:	d1 f0       	breq	.+52     	; 0x636 <M_DIO_Void_SetPinPullUpRes+0x56>
 602:	83 30       	cpi	r24, 0x03	; 3
 604:	20 f4       	brcc	.+8      	; 0x60e <M_DIO_Void_SetPinPullUpRes+0x2e>
 606:	81 30       	cpi	r24, 0x01	; 1
 608:	09 f0       	breq	.+2      	; 0x60c <M_DIO_Void_SetPinPullUpRes+0x2c>
 60a:	7e c0       	rjmp	.+252    	; 0x708 <M_DIO_Void_SetPinPullUpRes+0x128>
 60c:	06 c0       	rjmp	.+12     	; 0x61a <M_DIO_Void_SetPinPullUpRes+0x3a>
 60e:	83 30       	cpi	r24, 0x03	; 3
 610:	01 f1       	breq	.+64     	; 0x652 <M_DIO_Void_SetPinPullUpRes+0x72>
 612:	84 30       	cpi	r24, 0x04	; 4
 614:	09 f0       	breq	.+2      	; 0x618 <M_DIO_Void_SetPinPullUpRes+0x38>
 616:	78 c0       	rjmp	.+240    	; 0x708 <M_DIO_Void_SetPinPullUpRes+0x128>
 618:	2a c0       	rjmp	.+84     	; 0x66e <M_DIO_Void_SetPinPullUpRes+0x8e>
				{
				case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
 61a:	eb e3       	ldi	r30, 0x3B	; 59
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	20 81       	ld	r18, Z
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <M_DIO_Void_SetPinPullUpRes+0x4a>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	4a 95       	dec	r20
 62c:	e2 f7       	brpl	.-8      	; 0x626 <M_DIO_Void_SetPinPullUpRes+0x46>
 62e:	80 95       	com	r24
 630:	82 23       	and	r24, r18
 632:	80 83       	st	Z, r24
 634:	08 95       	ret
				case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
 636:	e8 e3       	ldi	r30, 0x38	; 56
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	20 81       	ld	r18, Z
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <M_DIO_Void_SetPinPullUpRes+0x66>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	4a 95       	dec	r20
 648:	e2 f7       	brpl	.-8      	; 0x642 <M_DIO_Void_SetPinPullUpRes+0x62>
 64a:	80 95       	com	r24
 64c:	82 23       	and	r24, r18
 64e:	80 83       	st	Z, r24
 650:	08 95       	ret
				case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
 652:	e5 e3       	ldi	r30, 0x35	; 53
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	20 81       	ld	r18, Z
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	02 c0       	rjmp	.+4      	; 0x662 <M_DIO_Void_SetPinPullUpRes+0x82>
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	4a 95       	dec	r20
 664:	e2 f7       	brpl	.-8      	; 0x65e <M_DIO_Void_SetPinPullUpRes+0x7e>
 666:	80 95       	com	r24
 668:	82 23       	and	r24, r18
 66a:	80 83       	st	Z, r24
 66c:	08 95       	ret
				case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
 66e:	e2 e3       	ldi	r30, 0x32	; 50
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	20 81       	ld	r18, Z
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <M_DIO_Void_SetPinPullUpRes+0x9e>
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	4a 95       	dec	r20
 680:	e2 f7       	brpl	.-8      	; 0x67a <M_DIO_Void_SetPinPullUpRes+0x9a>
 682:	80 95       	com	r24
 684:	82 23       	and	r24, r18
 686:	80 83       	st	Z, r24
 688:	08 95       	ret
				default:                                 break;
				}
				break;
			case ENABLE:
				switch(Local_U8_Port)
 68a:	82 30       	cpi	r24, 0x02	; 2
 68c:	b9 f0       	breq	.+46     	; 0x6bc <M_DIO_Void_SetPinPullUpRes+0xdc>
 68e:	83 30       	cpi	r24, 0x03	; 3
 690:	18 f4       	brcc	.+6      	; 0x698 <M_DIO_Void_SetPinPullUpRes+0xb8>
 692:	81 30       	cpi	r24, 0x01	; 1
 694:	c9 f5       	brne	.+114    	; 0x708 <M_DIO_Void_SetPinPullUpRes+0x128>
 696:	05 c0       	rjmp	.+10     	; 0x6a2 <M_DIO_Void_SetPinPullUpRes+0xc2>
 698:	83 30       	cpi	r24, 0x03	; 3
 69a:	e9 f0       	breq	.+58     	; 0x6d6 <M_DIO_Void_SetPinPullUpRes+0xf6>
 69c:	84 30       	cpi	r24, 0x04	; 4
 69e:	a1 f5       	brne	.+104    	; 0x708 <M_DIO_Void_SetPinPullUpRes+0x128>
 6a0:	27 c0       	rjmp	.+78     	; 0x6f0 <M_DIO_Void_SetPinPullUpRes+0x110>
				{
				case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
 6a2:	eb e3       	ldi	r30, 0x3B	; 59
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	20 81       	ld	r18, Z
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <M_DIO_Void_SetPinPullUpRes+0xd2>
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	4a 95       	dec	r20
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <M_DIO_Void_SetPinPullUpRes+0xce>
 6b6:	28 2b       	or	r18, r24
 6b8:	20 83       	st	Z, r18
 6ba:	08 95       	ret
				case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
 6bc:	e8 e3       	ldi	r30, 0x38	; 56
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	20 81       	ld	r18, Z
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <M_DIO_Void_SetPinPullUpRes+0xec>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	4a 95       	dec	r20
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <M_DIO_Void_SetPinPullUpRes+0xe8>
 6d0:	28 2b       	or	r18, r24
 6d2:	20 83       	st	Z, r18
 6d4:	08 95       	ret
				case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
 6d6:	e5 e3       	ldi	r30, 0x35	; 53
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	20 81       	ld	r18, Z
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <M_DIO_Void_SetPinPullUpRes+0x106>
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	4a 95       	dec	r20
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <M_DIO_Void_SetPinPullUpRes+0x102>
 6ea:	28 2b       	or	r18, r24
 6ec:	20 83       	st	Z, r18
 6ee:	08 95       	ret
				case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
 6f0:	e2 e3       	ldi	r30, 0x32	; 50
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	20 81       	ld	r18, Z
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <M_DIO_Void_SetPinPullUpRes+0x120>
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	4a 95       	dec	r20
 702:	e2 f7       	brpl	.-8      	; 0x6fc <M_DIO_Void_SetPinPullUpRes+0x11c>
 704:	28 2b       	or	r18, r24
 706:	20 83       	st	Z, r18
 708:	08 95       	ret

0000070a <H_LCD_Void_SetLCDPins>:
}



static void H_LCD_Void_SetLCDPins(u8 Copy_U8_Pins)
{
 70a:	1f 93       	push	r17
 70c:	18 2f       	mov	r17, r24

	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 0 & 0x01);
 70e:	68 2f       	mov	r22, r24
 710:	61 70       	andi	r22, 0x01	; 1
 712:	8a e0       	ldi	r24, 0x0A	; 10
 714:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 1 & 0x01);
 718:	61 2f       	mov	r22, r17
 71a:	66 95       	lsr	r22
 71c:	61 70       	andi	r22, 0x01	; 1
 71e:	8b e0       	ldi	r24, 0x0B	; 11
 720:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 2 & 0x01);
 724:	61 2f       	mov	r22, r17
 726:	66 95       	lsr	r22
 728:	66 95       	lsr	r22
 72a:	61 70       	andi	r22, 0x01	; 1
 72c:	8c e0       	ldi	r24, 0x0C	; 12
 72e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 3 & 0x01);
 732:	16 95       	lsr	r17
 734:	16 95       	lsr	r17
 736:	16 95       	lsr	r17
 738:	11 70       	andi	r17, 0x01	; 1
 73a:	8d e0       	ldi	r24, 0x0D	; 13
 73c:	61 2f       	mov	r22, r17
 73e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>

}
 742:	1f 91       	pop	r17
 744:	08 95       	ret

00000746 <H_LCD_Void_LCDWriteCommand>:
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);

	_delay_ms(2);
}
void H_LCD_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
 746:	ff 92       	push	r15
 748:	0f 93       	push	r16
 74a:	1f 93       	push	r17
 74c:	f8 2e       	mov	r15, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
 74e:	8e e0       	ldi	r24, 0x0E	; 14
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>

	H_LCD_Void_SetLCDPins(Copy_U8_Command >> 4);
 756:	8f 2d       	mov	r24, r15
 758:	82 95       	swap	r24
 75a:	8f 70       	andi	r24, 0x0F	; 15
 75c:	0e 94 85 03 	call	0x70a	; 0x70a <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
 760:	80 e1       	ldi	r24, 0x10	; 16
 762:	61 e0       	ldi	r22, 0x01	; 1
 764:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>
 768:	00 e4       	ldi	r16, 0x40	; 64
 76a:	1f e1       	ldi	r17, 0x1F	; 31
 76c:	c8 01       	movw	r24, r16
 76e:	01 97       	sbiw	r24, 0x01	; 1
 770:	f1 f7       	brne	.-4      	; 0x76e <H_LCD_Void_LCDWriteCommand+0x28>
	_delay_ms(2);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
 772:	80 e1       	ldi	r24, 0x10	; 16
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>
 77a:	c8 01       	movw	r24, r16
 77c:	01 97       	sbiw	r24, 0x01	; 1
 77e:	f1 f7       	brne	.-4      	; 0x77c <H_LCD_Void_LCDWriteCommand+0x36>
	_delay_ms(2);
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
 780:	8f 2d       	mov	r24, r15
 782:	0e 94 85 03 	call	0x70a	; 0x70a <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
 786:	80 e1       	ldi	r24, 0x10	; 16
 788:	61 e0       	ldi	r22, 0x01	; 1
 78a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>
 78e:	c8 01       	movw	r24, r16
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	f1 f7       	brne	.-4      	; 0x790 <H_LCD_Void_LCDWriteCommand+0x4a>
	_delay_ms(2);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
 794:	80 e1       	ldi	r24, 0x10	; 16
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>
 79c:	c8 01       	movw	r24, r16
 79e:	01 97       	sbiw	r24, 0x01	; 1
 7a0:	f1 f7       	brne	.-4      	; 0x79e <H_LCD_Void_LCDWriteCommand+0x58>
	_delay_ms(2);
}
 7a2:	1f 91       	pop	r17
 7a4:	0f 91       	pop	r16
 7a6:	ff 90       	pop	r15
 7a8:	08 95       	ret

000007aa <H_LCD_Void_LCDClear>:
}


void H_LCD_Void_LCDClear(void)
{
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	0e 94 a3 03 	call	0x746	; 0x746 <H_LCD_Void_LCDWriteCommand>
}
 7b0:	08 95       	ret

000007b2 <H_LCD_Void_LCDGoTo>:
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
		Local_S8_Counter--;
	}
}
void H_LCD_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
 7b2:	df 93       	push	r29
 7b4:	cf 93       	push	r28
 7b6:	00 d0       	rcall	.+0      	; 0x7b8 <H_LCD_Void_LCDGoTo+0x6>
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8Arr [2] = {0x80 , 0xC0};
 7bc:	90 e8       	ldi	r25, 0x80	; 128
 7be:	99 83       	std	Y+1, r25	; 0x01
 7c0:	90 ec       	ldi	r25, 0xC0	; 192
 7c2:	9a 83       	std	Y+2, r25	; 0x02
	H_LCD_Void_LCDWriteCommand(Local_U8Arr[Copy_U8_Row] + Copy_U8_Col);
 7c4:	fe 01       	movw	r30, r28
 7c6:	e8 0f       	add	r30, r24
 7c8:	f1 1d       	adc	r31, r1
 7ca:	81 81       	ldd	r24, Z+1	; 0x01
 7cc:	86 0f       	add	r24, r22
 7ce:	0e 94 a3 03 	call	0x746	; 0x746 <H_LCD_Void_LCDWriteCommand>
}
 7d2:	0f 90       	pop	r0
 7d4:	0f 90       	pop	r0
 7d6:	cf 91       	pop	r28
 7d8:	df 91       	pop	r29
 7da:	08 95       	ret

000007dc <H_LCD_Void_LCDWriteCharacter>:
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 3 & 0x01);

}

void H_LCD_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
 7dc:	ff 92       	push	r15
 7de:	0f 93       	push	r16
 7e0:	1f 93       	push	r17
 7e2:	f8 2e       	mov	r15, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
 7e4:	8e e0       	ldi	r24, 0x0E	; 14
 7e6:	61 e0       	ldi	r22, 0x01	; 1
 7e8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
 7ec:	8f e0       	ldi	r24, 0x0F	; 15
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>

	H_LCD_Void_SetLCDPins(Copy_U8_Character>>4);
 7f4:	8f 2d       	mov	r24, r15
 7f6:	82 95       	swap	r24
 7f8:	8f 70       	andi	r24, 0x0F	; 15
 7fa:	0e 94 85 03 	call	0x70a	; 0x70a <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
 7fe:	80 e1       	ldi	r24, 0x10	; 16
 800:	61 e0       	ldi	r22, 0x01	; 1
 802:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>
 806:	00 e4       	ldi	r16, 0x40	; 64
 808:	1f e1       	ldi	r17, 0x1F	; 31
 80a:	c8 01       	movw	r24, r16
 80c:	01 97       	sbiw	r24, 0x01	; 1
 80e:	f1 f7       	brne	.-4      	; 0x80c <H_LCD_Void_LCDWriteCharacter+0x30>
	_delay_ms(2);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
 810:	80 e1       	ldi	r24, 0x10	; 16
 812:	60 e0       	ldi	r22, 0x00	; 0
 814:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>
 818:	c8 01       	movw	r24, r16
 81a:	01 97       	sbiw	r24, 0x01	; 1
 81c:	f1 f7       	brne	.-4      	; 0x81a <H_LCD_Void_LCDWriteCharacter+0x3e>
	_delay_ms(2);
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
 81e:	8f 2d       	mov	r24, r15
 820:	0e 94 85 03 	call	0x70a	; 0x70a <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
 824:	80 e1       	ldi	r24, 0x10	; 16
 826:	61 e0       	ldi	r22, 0x01	; 1
 828:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>
 82c:	c8 01       	movw	r24, r16
 82e:	01 97       	sbiw	r24, 0x01	; 1
 830:	f1 f7       	brne	.-4      	; 0x82e <H_LCD_Void_LCDWriteCharacter+0x52>
	_delay_ms(2);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
 832:	80 e1       	ldi	r24, 0x10	; 16
 834:	60 e0       	ldi	r22, 0x00	; 0
 836:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>
 83a:	c8 01       	movw	r24, r16
 83c:	01 97       	sbiw	r24, 0x01	; 1
 83e:	f1 f7       	brne	.-4      	; 0x83c <H_LCD_Void_LCDWriteCharacter+0x60>

	_delay_ms(2);
}
 840:	1f 91       	pop	r17
 842:	0f 91       	pop	r16
 844:	ff 90       	pop	r15
 846:	08 95       	ret

00000848 <H_LCD_Void_LCDWriteNumber>:
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
void H_LCD_Void_LCDWriteNumber(s32 Copy_S32_Num)
{
 848:	af 92       	push	r10
 84a:	bf 92       	push	r11
 84c:	cf 92       	push	r12
 84e:	df 92       	push	r13
 850:	ef 92       	push	r14
 852:	ff 92       	push	r15
 854:	0f 93       	push	r16
 856:	df 93       	push	r29
 858:	cf 93       	push	r28
 85a:	cd b7       	in	r28, 0x3d	; 61
 85c:	de b7       	in	r29, 0x3e	; 62
 85e:	62 97       	sbiw	r28, 0x12	; 18
 860:	0f b6       	in	r0, 0x3f	; 63
 862:	f8 94       	cli
 864:	de bf       	out	0x3e, r29	; 62
 866:	0f be       	out	0x3f, r0	; 63
 868:	cd bf       	out	0x3d, r28	; 61
 86a:	6b 01       	movw	r12, r22
 86c:	7c 01       	movw	r14, r24
	s8 Local_S8_Counter = -1;
	u8 Local_U8_Arr[16];
	if(Copy_S32_Num < 0)
 86e:	99 23       	and	r25, r25
 870:	5c f4       	brge	.+22     	; 0x888 <__stack+0x29>
	{
		Copy_S32_Num = Copy_S32_Num * -1;
 872:	f0 94       	com	r15
 874:	e0 94       	com	r14
 876:	d0 94       	com	r13
 878:	c0 94       	com	r12
 87a:	c1 1c       	adc	r12, r1
 87c:	d1 1c       	adc	r13, r1
 87e:	e1 1c       	adc	r14, r1
 880:	f1 1c       	adc	r15, r1
		H_LCD_Void_LCDWriteCharacter('-');
 882:	8d e2       	ldi	r24, 0x2D	; 45
 884:	0e 94 ee 03 	call	0x7dc	; 0x7dc <H_LCD_Void_LCDWriteCharacter>
 888:	0f ef       	ldi	r16, 0xFF	; 255
	}
	do
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
 88a:	5e 01       	movw	r10, r28
 88c:	08 94       	sec
 88e:	a1 1c       	adc	r10, r1
 890:	b1 1c       	adc	r11, r1
		Copy_S32_Num = Copy_S32_Num * -1;
		H_LCD_Void_LCDWriteCharacter('-');
	}
	do
	{
		Local_S8_Counter++;
 892:	0f 5f       	subi	r16, 0xFF	; 255
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
 894:	80 2f       	mov	r24, r16
 896:	99 27       	eor	r25, r25
 898:	87 fd       	sbrc	r24, 7
 89a:	90 95       	com	r25
 89c:	95 01       	movw	r18, r10
 89e:	28 0f       	add	r18, r24
 8a0:	39 1f       	adc	r19, r25
 8a2:	3a 8b       	std	Y+18, r19	; 0x12
 8a4:	29 8b       	std	Y+17, r18	; 0x11
 8a6:	c7 01       	movw	r24, r14
 8a8:	b6 01       	movw	r22, r12
 8aa:	2a e0       	ldi	r18, 0x0A	; 10
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	40 e0       	ldi	r20, 0x00	; 0
 8b0:	50 e0       	ldi	r21, 0x00	; 0
 8b2:	0e 94 15 05 	call	0xa2a	; 0xa2a <__divmodsi4>
 8b6:	e9 89       	ldd	r30, Y+17	; 0x11
 8b8:	fa 89       	ldd	r31, Y+18	; 0x12
 8ba:	60 83       	st	Z, r22
		Copy_S32_Num = Copy_S32_Num / 10;
 8bc:	c7 01       	movw	r24, r14
 8be:	b6 01       	movw	r22, r12
 8c0:	2a e0       	ldi	r18, 0x0A	; 10
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	40 e0       	ldi	r20, 0x00	; 0
 8c6:	50 e0       	ldi	r21, 0x00	; 0
 8c8:	0e 94 15 05 	call	0xa2a	; 0xa2a <__divmodsi4>
 8cc:	82 2f       	mov	r24, r18
 8ce:	93 2f       	mov	r25, r19
 8d0:	a4 2f       	mov	r26, r20
 8d2:	b5 2f       	mov	r27, r21
 8d4:	6c 01       	movw	r12, r24
 8d6:	7d 01       	movw	r14, r26
	}while(Copy_S32_Num != 0);
 8d8:	c1 14       	cp	r12, r1
 8da:	d1 04       	cpc	r13, r1
 8dc:	e1 04       	cpc	r14, r1
 8de:	f1 04       	cpc	r15, r1
 8e0:	c1 f6       	brne	.-80     	; 0x892 <__stack+0x33>
	while(Local_S8_Counter >= 0)
 8e2:	00 23       	and	r16, r16
 8e4:	8c f0       	brlt	.+34     	; 0x908 <__stack+0xa9>
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
 8e6:	7e 01       	movw	r14, r28
 8e8:	08 94       	sec
 8ea:	e1 1c       	adc	r14, r1
 8ec:	f1 1c       	adc	r15, r1
 8ee:	80 2f       	mov	r24, r16
 8f0:	99 27       	eor	r25, r25
 8f2:	87 fd       	sbrc	r24, 7
 8f4:	90 95       	com	r25
 8f6:	f7 01       	movw	r30, r14
 8f8:	e8 0f       	add	r30, r24
 8fa:	f9 1f       	adc	r31, r25
 8fc:	80 81       	ld	r24, Z
 8fe:	80 5d       	subi	r24, 0xD0	; 208
 900:	0e 94 ee 03 	call	0x7dc	; 0x7dc <H_LCD_Void_LCDWriteCharacter>
		Local_S8_Counter--;
 904:	01 50       	subi	r16, 0x01	; 1
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
		Copy_S32_Num = Copy_S32_Num / 10;
	}while(Copy_S32_Num != 0);
	while(Local_S8_Counter >= 0)
 906:	9a f7       	brpl	.-26     	; 0x8ee <__stack+0x8f>
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
		Local_S8_Counter--;
	}
}
 908:	62 96       	adiw	r28, 0x12	; 18
 90a:	0f b6       	in	r0, 0x3f	; 63
 90c:	f8 94       	cli
 90e:	de bf       	out	0x3e, r29	; 62
 910:	0f be       	out	0x3f, r0	; 63
 912:	cd bf       	out	0x3d, r28	; 61
 914:	cf 91       	pop	r28
 916:	df 91       	pop	r29
 918:	0f 91       	pop	r16
 91a:	ff 90       	pop	r15
 91c:	ef 90       	pop	r14
 91e:	df 90       	pop	r13
 920:	cf 90       	pop	r12
 922:	bf 90       	pop	r11
 924:	af 90       	pop	r10
 926:	08 95       	ret

00000928 <H_LCD_Void_LCDWriteString>:
	_delay_ms(2);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
	_delay_ms(2);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
 928:	1f 93       	push	r17
 92a:	cf 93       	push	r28
 92c:	df 93       	push	r29
 92e:	ec 01       	movw	r28, r24
	u8 Local_U8_Counter = 0;
	while(Copy_U8_P[Local_U8_Counter] != '\0')
 930:	88 81       	ld	r24, Y
 932:	88 23       	and	r24, r24
 934:	51 f0       	breq	.+20     	; 0x94a <H_LCD_Void_LCDWriteString+0x22>
 936:	10 e0       	ldi	r17, 0x00	; 0
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
 938:	0e 94 ee 03 	call	0x7dc	; 0x7dc <H_LCD_Void_LCDWriteCharacter>
		Local_U8_Counter++;
 93c:	1f 5f       	subi	r17, 0xFF	; 255
	_delay_ms(2);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_P[Local_U8_Counter] != '\0')
 93e:	fe 01       	movw	r30, r28
 940:	e1 0f       	add	r30, r17
 942:	f1 1d       	adc	r31, r1
 944:	80 81       	ld	r24, Z
 946:	88 23       	and	r24, r24
 948:	b9 f7       	brne	.-18     	; 0x938 <H_LCD_Void_LCDWriteString+0x10>
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	1f 91       	pop	r17
 950:	08 95       	ret

00000952 <H_LCD_Void_LCDInit>:
#include "LCD_Config.h"


void H_LCD_Void_LCDInit(void)
{
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
 952:	8a e0       	ldi	r24, 0x0A	; 10
 954:	61 e0       	ldi	r22, 0x01	; 1
 956:	0e 94 45 01 	call	0x28a	; 0x28a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
 95a:	8b e0       	ldi	r24, 0x0B	; 11
 95c:	61 e0       	ldi	r22, 0x01	; 1
 95e:	0e 94 45 01 	call	0x28a	; 0x28a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
 962:	8c e0       	ldi	r24, 0x0C	; 12
 964:	61 e0       	ldi	r22, 0x01	; 1
 966:	0e 94 45 01 	call	0x28a	; 0x28a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
 96a:	8d e0       	ldi	r24, 0x0D	; 13
 96c:	61 e0       	ldi	r22, 0x01	; 1
 96e:	0e 94 45 01 	call	0x28a	; 0x28a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
 972:	8e e0       	ldi	r24, 0x0E	; 14
 974:	61 e0       	ldi	r22, 0x01	; 1
 976:	0e 94 45 01 	call	0x28a	; 0x28a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
 97a:	80 e1       	ldi	r24, 0x10	; 16
 97c:	61 e0       	ldi	r22, 0x01	; 1
 97e:	0e 94 45 01 	call	0x28a	; 0x28a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
 982:	8f e0       	ldi	r24, 0x0F	; 15
 984:	61 e0       	ldi	r22, 0x01	; 1
 986:	0e 94 45 01 	call	0x28a	; 0x28a <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
 98a:	8f e0       	ldi	r24, 0x0F	; 15
 98c:	60 e0       	ldi	r22, 0x00	; 0
 98e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_DIO_Void_SetPinValue>

	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_1);
 992:	83 e3       	ldi	r24, 0x33	; 51
 994:	0e 94 a3 03 	call	0x746	; 0x746 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_2);
 998:	82 e3       	ldi	r24, 0x32	; 50
 99a:	0e 94 a3 03 	call	0x746	; 0x746 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_3);
 99e:	88 e2       	ldi	r24, 0x28	; 40
 9a0:	0e 94 a3 03 	call	0x746	; 0x746 <H_LCD_Void_LCDWriteCommand>

	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
 9a4:	8c e0       	ldi	r24, 0x0C	; 12
 9a6:	0e 94 a3 03 	call	0x746	; 0x746 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
 9aa:	81 e0       	ldi	r24, 0x01	; 1
 9ac:	0e 94 a3 03 	call	0x746	; 0x746 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
 9b0:	82 e0       	ldi	r24, 0x02	; 2
 9b2:	0e 94 a3 03 	call	0x746	; 0x746 <H_LCD_Void_LCDWriteCommand>

}
 9b6:	08 95       	ret

000009b8 <main>:

#include "Projects.h"
#define F_CPU 16000000UL

int main()
{
 9b8:	cf 93       	push	r28
 9ba:	df 93       	push	r29
	M_DIO_Void_SetPinDirection(ON_PIN,OUTPUT);
 9bc:	8a e2       	ldi	r24, 0x2A	; 42
 9be:	61 e0       	ldi	r22, 0x01	; 1
 9c0:	0e 94 45 01 	call	0x28a	; 0x28a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PWM_PIN,OUTPUT);
 9c4:	87 e1       	ldi	r24, 0x17	; 23
 9c6:	61 e0       	ldi	r22, 0x01	; 1
 9c8:	0e 94 45 01 	call	0x28a	; 0x28a <M_DIO_Void_SetPinDirection>

	M_Timer_Void_PWMInit();
 9cc:	0e 94 32 01 	call	0x264	; 0x264 <M_Timer_Void_PWMInit>
	H_LCD_Void_LCDInit();
 9d0:	0e 94 a9 04 	call	0x952	; 0x952 <H_LCD_Void_LCDInit>
 9d4:	c0 e4       	ldi	r28, 0x40	; 64
 9d6:	dc e9       	ldi	r29, 0x9C	; 156

		while (1)
		{
			M_Timer_Void_PWMStart();
 9d8:	0e 94 89 00 	call	0x112	; 0x112 <M_Timer_Void_PWMStart>
			M_Timer_Void_PWMDutyOsc();
 9dc:	0e 94 8f 00 	call	0x11e	; 0x11e <M_Timer_Void_PWMDutyOsc>
			H_LCD_Void_LCDClear();
 9e0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <H_LCD_Void_LCDClear>
 9e4:	ce 01       	movw	r24, r28
 9e6:	01 97       	sbiw	r24, 0x01	; 1
 9e8:	f1 f7       	brne	.-4      	; 0x9e6 <main+0x2e>
 9ea:	f6 cf       	rjmp	.-20     	; 0x9d8 <main+0x20>

000009ec <__udivmodqi4>:
 9ec:	99 1b       	sub	r25, r25
 9ee:	79 e0       	ldi	r23, 0x09	; 9
 9f0:	04 c0       	rjmp	.+8      	; 0x9fa <__udivmodqi4_ep>

000009f2 <__udivmodqi4_loop>:
 9f2:	99 1f       	adc	r25, r25
 9f4:	96 17       	cp	r25, r22
 9f6:	08 f0       	brcs	.+2      	; 0x9fa <__udivmodqi4_ep>
 9f8:	96 1b       	sub	r25, r22

000009fa <__udivmodqi4_ep>:
 9fa:	88 1f       	adc	r24, r24
 9fc:	7a 95       	dec	r23
 9fe:	c9 f7       	brne	.-14     	; 0x9f2 <__udivmodqi4_loop>
 a00:	80 95       	com	r24
 a02:	08 95       	ret

00000a04 <__divmodhi4>:
 a04:	97 fb       	bst	r25, 7
 a06:	09 2e       	mov	r0, r25
 a08:	07 26       	eor	r0, r23
 a0a:	0a d0       	rcall	.+20     	; 0xa20 <__divmodhi4_neg1>
 a0c:	77 fd       	sbrc	r23, 7
 a0e:	04 d0       	rcall	.+8      	; 0xa18 <__divmodhi4_neg2>
 a10:	27 d0       	rcall	.+78     	; 0xa60 <__udivmodhi4>
 a12:	06 d0       	rcall	.+12     	; 0xa20 <__divmodhi4_neg1>
 a14:	00 20       	and	r0, r0
 a16:	1a f4       	brpl	.+6      	; 0xa1e <__divmodhi4_exit>

00000a18 <__divmodhi4_neg2>:
 a18:	70 95       	com	r23
 a1a:	61 95       	neg	r22
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a1e <__divmodhi4_exit>:
 a1e:	08 95       	ret

00000a20 <__divmodhi4_neg1>:
 a20:	f6 f7       	brtc	.-4      	; 0xa1e <__divmodhi4_exit>
 a22:	90 95       	com	r25
 a24:	81 95       	neg	r24
 a26:	9f 4f       	sbci	r25, 0xFF	; 255
 a28:	08 95       	ret

00000a2a <__divmodsi4>:
 a2a:	97 fb       	bst	r25, 7
 a2c:	09 2e       	mov	r0, r25
 a2e:	05 26       	eor	r0, r21
 a30:	0e d0       	rcall	.+28     	; 0xa4e <__divmodsi4_neg1>
 a32:	57 fd       	sbrc	r21, 7
 a34:	04 d0       	rcall	.+8      	; 0xa3e <__divmodsi4_neg2>
 a36:	28 d0       	rcall	.+80     	; 0xa88 <__udivmodsi4>
 a38:	0a d0       	rcall	.+20     	; 0xa4e <__divmodsi4_neg1>
 a3a:	00 1c       	adc	r0, r0
 a3c:	38 f4       	brcc	.+14     	; 0xa4c <__divmodsi4_exit>

00000a3e <__divmodsi4_neg2>:
 a3e:	50 95       	com	r21
 a40:	40 95       	com	r20
 a42:	30 95       	com	r19
 a44:	21 95       	neg	r18
 a46:	3f 4f       	sbci	r19, 0xFF	; 255
 a48:	4f 4f       	sbci	r20, 0xFF	; 255
 a4a:	5f 4f       	sbci	r21, 0xFF	; 255

00000a4c <__divmodsi4_exit>:
 a4c:	08 95       	ret

00000a4e <__divmodsi4_neg1>:
 a4e:	f6 f7       	brtc	.-4      	; 0xa4c <__divmodsi4_exit>
 a50:	90 95       	com	r25
 a52:	80 95       	com	r24
 a54:	70 95       	com	r23
 a56:	61 95       	neg	r22
 a58:	7f 4f       	sbci	r23, 0xFF	; 255
 a5a:	8f 4f       	sbci	r24, 0xFF	; 255
 a5c:	9f 4f       	sbci	r25, 0xFF	; 255
 a5e:	08 95       	ret

00000a60 <__udivmodhi4>:
 a60:	aa 1b       	sub	r26, r26
 a62:	bb 1b       	sub	r27, r27
 a64:	51 e1       	ldi	r21, 0x11	; 17
 a66:	07 c0       	rjmp	.+14     	; 0xa76 <__udivmodhi4_ep>

00000a68 <__udivmodhi4_loop>:
 a68:	aa 1f       	adc	r26, r26
 a6a:	bb 1f       	adc	r27, r27
 a6c:	a6 17       	cp	r26, r22
 a6e:	b7 07       	cpc	r27, r23
 a70:	10 f0       	brcs	.+4      	; 0xa76 <__udivmodhi4_ep>
 a72:	a6 1b       	sub	r26, r22
 a74:	b7 0b       	sbc	r27, r23

00000a76 <__udivmodhi4_ep>:
 a76:	88 1f       	adc	r24, r24
 a78:	99 1f       	adc	r25, r25
 a7a:	5a 95       	dec	r21
 a7c:	a9 f7       	brne	.-22     	; 0xa68 <__udivmodhi4_loop>
 a7e:	80 95       	com	r24
 a80:	90 95       	com	r25
 a82:	bc 01       	movw	r22, r24
 a84:	cd 01       	movw	r24, r26
 a86:	08 95       	ret

00000a88 <__udivmodsi4>:
 a88:	a1 e2       	ldi	r26, 0x21	; 33
 a8a:	1a 2e       	mov	r1, r26
 a8c:	aa 1b       	sub	r26, r26
 a8e:	bb 1b       	sub	r27, r27
 a90:	fd 01       	movw	r30, r26
 a92:	0d c0       	rjmp	.+26     	; 0xaae <__udivmodsi4_ep>

00000a94 <__udivmodsi4_loop>:
 a94:	aa 1f       	adc	r26, r26
 a96:	bb 1f       	adc	r27, r27
 a98:	ee 1f       	adc	r30, r30
 a9a:	ff 1f       	adc	r31, r31
 a9c:	a2 17       	cp	r26, r18
 a9e:	b3 07       	cpc	r27, r19
 aa0:	e4 07       	cpc	r30, r20
 aa2:	f5 07       	cpc	r31, r21
 aa4:	20 f0       	brcs	.+8      	; 0xaae <__udivmodsi4_ep>
 aa6:	a2 1b       	sub	r26, r18
 aa8:	b3 0b       	sbc	r27, r19
 aaa:	e4 0b       	sbc	r30, r20
 aac:	f5 0b       	sbc	r31, r21

00000aae <__udivmodsi4_ep>:
 aae:	66 1f       	adc	r22, r22
 ab0:	77 1f       	adc	r23, r23
 ab2:	88 1f       	adc	r24, r24
 ab4:	99 1f       	adc	r25, r25
 ab6:	1a 94       	dec	r1
 ab8:	69 f7       	brne	.-38     	; 0xa94 <__udivmodsi4_loop>
 aba:	60 95       	com	r22
 abc:	70 95       	com	r23
 abe:	80 95       	com	r24
 ac0:	90 95       	com	r25
 ac2:	9b 01       	movw	r18, r22
 ac4:	ac 01       	movw	r20, r24
 ac6:	bd 01       	movw	r22, r26
 ac8:	cf 01       	movw	r24, r30
 aca:	08 95       	ret

00000acc <_exit>:
 acc:	f8 94       	cli

00000ace <__stop_program>:
 ace:	ff cf       	rjmp	.-2      	; 0xace <__stop_program>
